---
layout: nil
---
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title>Chris Parsons: posts tagged craftsmanship</title>

  <link href="http://chrismdp.com/"/>
  <updated>2012-09-28T20:46:31+01:00</updated>
  <id>http://chrismdp.com/tag/craftsmanship</id>
  <author>
    <name>Chris Parsons</name>
    <email>chrismdp@gmail.com</email>
  </author>
<entry><title>Your framework is a liability</title><category term='code'/><category term='craftsmanship'/><category term='lean'/><category term='ruby'/><category term='agile'/><category term='liability'/><category term='sinatra'/><category term='paypal'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2012/09/your-framework-is-a-liability'/><updated>2012-09-28T20:46:31+01:00</updated><id>http://chrismdp.com/2012/09/your-framework-is-a-liability</id><content type='html'>&lt;p&gt;Your framework is a liability.&lt;/p&gt;

&lt;p&gt;Every library you import before you start the project means more for someone else to digest and understand. Each complex ‘clever’ library equals another few minutes per team member trying to interpret why you imported it, how to use it, and where the configuration goes. Every framework you decide to use is a early decision about how your project will fundamentally work, which might turn out to be the wrong one. Each library is an opportunity for someone else to introduce a bug into your project.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The only asset a framework or library gives you is a faster route to your feature.&lt;/em&gt; Anything else will drag you down.&lt;/p&gt;

&lt;p&gt;If your framework is heavy and onerous, then your code will have a large net negative liability before you’ve even begun. You’ll be constrained to follow a certain set of patterns, which you might end up fighting against later on. Work on the app first: your &lt;anacronym title=&quot;minimum viable product&quot;&gt;MVP&lt;/anacronym&gt; might not even need the benefits your framework provides.&lt;/p&gt;

&lt;p&gt;A few examples of where I’ve benefited from not blindly installing the “standard stack”:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;I’ve recently started building some new projects wholly in &lt;a href=&quot;http://sinatrarb.com&quot;&gt;Sinatra&lt;/a&gt;, pulling in various gems only when I need to, rather than starting with Rails from the outset. &lt;a href=&quot;http://soltrader.net&quot;&gt;Sol Trader’s website&lt;/a&gt; is pure Sinatra. It was simply much quicker to get started, and I found I could layer on functionality as I needed it. Several months on, I’ve yet to need to turn to a Rails app.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When I came to add Paypal integration to the site, I looked at various gems, and decided they were just going to drag me down with extra configuration and hassle. I ended up building Paypal IPN integration &lt;a href=&quot;https://gist.github.com/2768532&quot;&gt;in about 30 lines&lt;/a&gt; using pure ruby: no libraries. Most of that code was tests.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Don’t get me wrong: I still use frameworks for some of my projects, and libraries for all of them, but I’m learning to stop and think before cargo culting the latest stack of 25 different libraries before I can get anything done.&lt;/p&gt;

&lt;p&gt;Import a lightweight framework or library when you need to. Consider when you might be chaining yourself to it, which might make a later pivot difficult. It’s much easier to add a framework than to remove one from your project: pick the easiest thing to move away from.&lt;/p&gt;
</content></entry><entry><title>Your code is a liability</title><category term='code'/><category term='craftsmanship'/><category term='lean'/><category term='agile'/><category term='team'/><category term='liability'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2012/09/code-is-a-liability'/><updated>2012-09-24T20:48:13+01:00</updated><id>http://chrismdp.com/2012/09/code-is-a-liability</id><content type='html'>&lt;p&gt;Your code is a liability.&lt;/p&gt;

&lt;p&gt;Every line you write means more for someone else to read, digest and understand. Each complex ‘clever’ regular expression represents another few minutes per team member trying to interpret what you wrote and why you wrote it. Every line you add limits your project’s responsiveness to change.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Only the feature that your code provides is an asset.&lt;/em&gt; The more that we reduce the amount of code we write, the lighter weight and more agile our software. The easier it is to understand, the less of a intellectual drag it is on the team.&lt;/p&gt;

&lt;p&gt;There used to be a lot of talk about getting into the “programmer zone”: that place of heightened focus where time rushes by as if a blur, and the number of lines of output a programmer produces per hour skyrockets… except that lines per hour was never the best measure of coder output to begin with. All that coder is doing is dragging down the project faster. Let’s hope they’re adding useful features during that process!&lt;/p&gt;

&lt;p&gt;It’s my belief that the best code is written in conversation, not in the “zone.” A team discussion about the architecture and the arrangement of the different concepts into the simplest and lightest code structure we can fathom will always improve on our own ideas, when we implement them in isolation at a ridiculous rate.&lt;/p&gt;

&lt;p&gt;Lightweight, lean coding like this sets our features free from the drag of the code and allows them to soar: responsive to change requests, and easily debugged as the code isn’t difficult to understand.&lt;/p&gt;
</content></entry><entry><title>Never leave a failing test</title><category term='tdd'/><category term='craftsmanship'/><category term='code'/><category term='testing'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2012/09/failing-tests-rot'/><updated>2012-09-20T15:36:32+01:00</updated><id>http://chrismdp.com/2012/09/failing-tests-rot</id><content type='html'>&lt;p&gt;Imagine this: you're taking a guided tour of a nuclear power station. Just above the door as you come in there there are five lights marked Key Safety Indicators. One of the lights is flashing red.&lt;/p&gt;

&lt;p&gt;“What’s that flashing red light?” you nervously ask your host.&lt;/p&gt;

&lt;p&gt;“Oh, that light does that from time to time. We’re not sure why; we just ignore it.”&lt;/p&gt;

&lt;p&gt;There’s an awkward silence. How confident are you feeling right now?&lt;/p&gt;

&lt;h2 id=&quot;failing-tests-fester&quot;&gt;Failing tests fester.&lt;/h2&gt;

&lt;p&gt;Red tests are like code rot. Catch it early and sort them out, and you’ll be fine. If you don’t, they’ll spread through your code like a disease, causing all sorts of damage:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Failures cause fear of change.&lt;/em&gt; If we don’t understand why a test is failing, we don’t understand the code base. If we don’t understand our code, we can’t change it safely. All bets are off: any change we make will cause us to be that little bit more anxious.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Failures breed failures.&lt;/em&gt; If one test continually fails, then other coders are more likely to tolerate failing tests, and the number of failing tests will grow quickly.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Failures kill urgency.&lt;/em&gt; There’s a scene in a well-known heist movie where a team of thieves has to break into a bank. Their strategy revolves around putting a remote-controlled car under a waste bin: they use this to cause the bin to move at night, setting off all the alarm sensors. The first time the alarm goes off, the place is filled with police in a matter of seconds. The fifth time the alarm goes off, only one squad car with two bored officers turn up, totally unprepared for the waiting thieves who quickly overpower them. The same is true with tests: if they fail all the time, developers will take a cavalier attitude to checking out the cause. This could cause a really serious failure to be missed.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The only point at which failing tests are valid is when you’ve written them just before the code you plan to add. If the test should be failing, write code to make it work. If the test shouldn’t be failing, change it or delete it. Never leave it to fester.&lt;/p&gt;
</content></entry><entry><title>The power of good naming</title><category term='code'/><category term='craftsmanship'/><category term='refactoring'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2012/09/the-power-of-good-naming'/><updated>2012-09-18T20:43:02+01:00</updated><id>http://chrismdp.com/2012/09/the-power-of-good-naming</id><content type='html'>&lt;p&gt;&lt;i&gt;&quot;There are two hard problems in computer science: Cache invaliation, naming things, and off by one errors.&quot;&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;– Source: &lt;a href=&quot;http://martinfowler.com/bliki/TwoHardThings.html&quot;&gt;Martin Fowler&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Naming things is hard. Why do we expend so much effort to get them right? Because naming programming concepts well gives us a big insight into how they fit into the system we’re designing. Continually renaming things records our insights as we go: the right names for our objects, methods and variables will yield fresh insight and in turn shape the design of the system.&lt;/p&gt;

&lt;p&gt;J.B. Rainsberger &lt;a href=&quot;http://www.jbrains.ca/permalink/the-four-elements-of-simple-design&quot;&gt;talks about&lt;/a&gt; names of classes, methods and variables going through four stages:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Nonsense:&lt;/em&gt; For example, we might extract a method from a larger one and quickly rename it &lt;code&gt;foo()&lt;/code&gt; to get the refactor done and the tests passing.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Accurate:&lt;/em&gt; We rename the nonsense method to what it actually does, such as &lt;code&gt;processPayroll()&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Precise:&lt;/em&gt; Once we realise what the method really does, we might refine the accurate name and give it more precision, such as &lt;code&gt;loopThroughEmployeesAndPayThem()&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Meaningful:&lt;/em&gt; At this point, we’ve revealed the complexity of the method, and can look to split it up into two methods: &lt;code&gt;forEachEmployee()&lt;/code&gt; and perhaps a &lt;code&gt;pay()&lt;/code&gt; method on a seperate interface.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some simple rules of thumb to follow when naming things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Don’t be afraid of nonesense names.&lt;/em&gt; We shouldn’t shy away from the early stages of naming. If we’re not sure what something is yet, give it a nonsense name. The name &lt;code&gt;foo()&lt;/code&gt; is fine, as long as it’s only going to last fifteen minutes. Best not to commit it though :)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;If you don’t like the code you’re writing, use really long names.&lt;/em&gt; If in doubt as to what or where something fits, use a really (really) long name: the longer and more precise the better. I will call a variable something like &lt;code&gt;computed_unsorted_project_task_matrix&lt;/code&gt; especially if I don’t like it and want to refactor it at some point. This is much better than &lt;code&gt;result&lt;/code&gt; (or &lt;code&gt;res&lt;/code&gt; or even &lt;code&gt;r&lt;/code&gt;). I reveal the complexity of the object through the name, which helps reveal complexity in the code.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Characters are cheap, confusion is costly.&lt;/em&gt; Let’s not make things harder for the programmers who come after us. Remember, this is just as likely to be ourselves in a few months. Let’s avoid using a name like &lt;code&gt;prj&lt;/code&gt; when &lt;code&gt;project&lt;/code&gt; is only four characters more typing. Anything that reduces reading friction in our code is a good thing.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How often do you rename your methods, objects, and classes? How does naming help you understand your code?&lt;/p&gt;
</content></entry><entry><title>A fresh take on DCI with C++ (with example)</title><category term='coding'/><category term='c++'/><category term='craftsmanship'/><category term='dci'/><category term='sol trader'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2012/04/a-fresh-take-on-dci-with-c-plus-plus'/><updated>2012-04-16T12:20:48+01:00</updated><id>http://chrismdp.com/2012/04/a-fresh-take-on-dci-with-c-plus-plus</id><content type='html'>&lt;div class=&quot;notice&quot;&gt;
  If you'd like to purchase Sol Trader you can now do so at &lt;a href=&quot;http://soltrader.net&quot;&gt;soltrader.net&lt;/a&gt;!
&lt;/div&gt;

&lt;p&gt;I’ve been reading quite a lot about &lt;a href=&quot;http://en.wikipedia.org/wiki/Data,_Context,_and_Interaction&quot;&gt;DCI&lt;/a&gt; recently, both from the point of view of the &lt;a href=&quot;http://heim.ifi.uio.no/~trygver/2009/commonsense.pdf&quot;&gt;original paper&lt;/a&gt; published in 2009 and various other sources on the Internet. There’s been a discussion around beginning to use it with Ruby on Rails, but at the moment I’m more interested in how to apply the principles to &lt;a href=&quot;http://soltrader.net&quot;&gt;Sol Trader&lt;/a&gt; in C++.&lt;/p&gt;

&lt;h2 id=&quot;what-is-dci&quot;&gt;What is DCI?&lt;/h2&gt;

&lt;p&gt;DCI stands for Data, Context and Interaction. It places behaviour at the forefront of your design by setting the stage for a particular use-case through Context objects, and having all the behaviour exist in Role objects seperate to your basic persisted Data objects.  For example, you might have an &lt;code&gt;Account&lt;/code&gt; “Data” class, which just contains the data representation and basic methods such as &lt;code&gt;IncrementBalance&lt;/code&gt; and &lt;code&gt;DecrementBalance&lt;/code&gt;. You’d then have a use-case &lt;code&gt;TransferMoney&lt;/code&gt; with two roles: &lt;code&gt;SourceAccount&lt;/code&gt; and &lt;code&gt;DestinationAccount&lt;/code&gt;. These roles would be played by &lt;code&gt;Account&lt;/code&gt; objects, but the behaviour of the objects would depend on the roles they play in the use case. The behaviour of the system is therefore captured in one place: it’s in the interaction between the roles within a particular use case context, rather than being spread all over different data classes.&lt;/p&gt;

&lt;p&gt;This design paradigm is very interesting. We’ve known for a while that if you mix persistence and behaviour you’ll get into somewhat of a mess with your code design after a while. What’s new is that whilst we avoid mixing persistence and behaviour, we still often mix &lt;em&gt;data&lt;/em&gt; and behaviour: that is, we put code describing what the object &lt;em&gt;does&lt;/em&gt; in the same class as the code which describes what it &lt;em&gt;is&lt;/em&gt;. This is a subtle violation of the &lt;a href=&quot;http://en.wikipedia.org/wiki/Single_responsibility_principle&quot;&gt;Single Responsibility Principle&lt;/a&gt;; I hadn’t noticed this violation before reading about DCI.&lt;/p&gt;

&lt;p&gt;The  proponents of DCI advocate injecting methods describing the Role in any given use case directly into the data object when setting the use case up. This is easy in a language like Smalltalk or Ruby, but is considerably harder in C++. What approach should we take in C++ with Roles? Is this the right approach at all?&lt;/p&gt;

&lt;h2 id=&quot;the-templating-method-for-injection-of-role-behaviour&quot;&gt;The templating method for injection of role behaviour&lt;/h2&gt;

&lt;p&gt;One way around this it to use templates: subclass your Data objects with a templated class which includes the roles you want the object to play. For example, to take our account example earlier, we could have:&lt;/p&gt;

&lt;p&gt;{% highlight cpp %}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class DestinationAccount {
public:
  virtual ~DestinationAccount() {}

  virtual void DepositMoney(int amount) = 0;
};

template &amp;lt;class DataClass&amp;gt; class DestinationAccountCollaborator :
  public DataClass, public DestinationAccount
{
  DestinationAccountCollaborator(int id) : DataClass(id) {}
  virtual void DepositMoney(int amount) {
    DataClass::IncrementBalance(amount);
  };
}; {% endhighlight %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We would also have a similar set up for &lt;code&gt;SourceAccount&lt;/code&gt;. This way we can pass a pointer to the &lt;code&gt;DestinationAccount&lt;/code&gt; interface to our Context to set up the use case:&lt;/p&gt;

&lt;p&gt;{% highlight cpp %}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class TransferMoneyContext {
  DestinationAccount&amp;amp; _dest;
  SourceAccount&amp;amp; _source;
public:
  TransferMoneyContext(DestinationAccount&amp;amp; dest,
    SourceAccount&amp;amp; source) : _dest(dest), _source(source) {}
};

...

DestinationAccountCollaborator&amp;lt;Account&amp;gt; dest(accountNumberId);
SourceAccountCollaborator&amp;lt;Account&amp;gt; source(sourceAccountId);
TransferMoneyContext context(dest, source);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;{% endhighlight %}&lt;/p&gt;

&lt;p&gt;The DataClass would then instantiate itself from the account id and the role contains the description of the behaviour.&lt;/p&gt;

&lt;p&gt;In practice however, I found this extremely unwieldy. My data classes all had slightly different interfaces, especially as many of them served as API endpoints. The templates ended up being ‘clever’ code - they saved very little space at the expense of a good amount of readability. The whole point of DCI is to try and capture behaviour in the Role classes to improve readability and create a cleaner design, and this approach wasn’t serving that purpose. There might be better ways of doing it, and I’d be grateful if you’d let me know if you know of a better approach.&lt;/p&gt;

&lt;h2 id=&quot;the-composition-method-for-roles&quot;&gt;The composition method for roles&lt;/h2&gt;

&lt;p&gt;The DCI literature teaches us to inject behaviour into the Data objects, to prevent &lt;a href=&quot;http://en.wikipedia.org/wiki/Schizophrenia_(object-oriented_programming)&quot;&gt;self schizophrenia&lt;/a&gt;. For complex use cases, I can see that it would be useful for roles to have access to the methods defined on data objects: but perhaps it would be better to have simpler use cases and have roles only be defined in terms of other roles? In that instance, the roles can simply compose the data objects and expose whichever methods seem appropriate to the other roles in the use case.&lt;/p&gt;

&lt;h2 id=&quot;a-worked-example&quot;&gt;A worked example&lt;/h2&gt;

&lt;p&gt;As an example, consider this use case that came up recently in Sol Trader: I have a &lt;code&gt;MarketListing&lt;/code&gt; object which contains a particlar &lt;code&gt;Good&lt;/code&gt; (such as Grain, or Water) available at a certain price. The GUI displays a list of these &lt;code&gt;MarketListing&lt;/code&gt; objects in a table format. Whenever a change was detected to any of the listings I would clear the table and reconstruct the gui elements, rather than updating the original elements.&lt;/p&gt;

&lt;p&gt;This worked fine, until I realised that the GUI library I’m using did not expect GUI elements to be deleted and recreated under the mouse cursor, and wouldn’t fire “click” events correctly at the newly created elements.&lt;/p&gt;

&lt;p&gt;Therefore I needed a way to synchronise the GUI table with the &lt;code&gt;MarketListings&lt;/code&gt; somehow, add new listings that have appeared, update the text of any existing listings, and remove old elements that refer to listings that no longer exist in the set. I decided to try to implement this using DCI, using the composition approach to roles I’ve discussed.&lt;/p&gt;

&lt;p&gt;The use case is quite simple:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;For each source data structure:&lt;/li&gt;
  &lt;li&gt;Does it already exist? If so, update the elements&lt;/li&gt;
  &lt;li&gt;If not, create new elements&lt;/li&gt;
  &lt;li&gt;Remove any elements that weren’t checked this run&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After writing some tests, I started with the following context object:&lt;/p&gt;

&lt;p&gt;{% highlight cpp %}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class RowUpdater {
  role::TableSource&amp;amp; _source;
  role::TableRepresentation&amp;amp; _table;
  int _timestamp;
public:
  RowUpdater(role::TableSource&amp;amp; source, role::TableRepresentation&amp;amp; table) : _source(source), _table(table), _timestamp(0) {}

  void execute();
  void checkRow(void const* rowIdentifier);
}; {% endhighlight %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note the two role objects, &lt;code&gt;TableSource&lt;/code&gt; and &lt;code&gt;TableRepresentation&lt;/code&gt;. I’ll come back to those later.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;execute()&lt;/code&gt; and &lt;code&gt;checkRow()&lt;/code&gt; were defined like this:&lt;/p&gt;

&lt;p&gt;{% highlight cpp %}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;void RowUpdater::execute() {
  _timestamp = SDL_GetTicks(); // Could be any unique number
  _source.enumerateRows(boost::bind(&amp;amp;RowUpdater::checkRow, this, _1));
  _table.removeUncheckedRows(_timestamp);
}

void RowUpdater::checkRow(void const* rowIdentifier) {
  if (_table.rowExists(rowIdentifier))
    _table.updateRowFor(rowIdentifier, _source, _timestamp);
  else
    _table.addRowFor(rowIdentifier, _source, _timestamp);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;{% endhighlight %}&lt;/p&gt;

&lt;p&gt;(In C++ you can’t easily enumerate, so I used boost::bind to call &lt;code&gt;checkRow()&lt;/code&gt; on each row in the &lt;code&gt;_source&lt;/code&gt; object.)&lt;/p&gt;

&lt;p&gt;This code is beautifully simple, and very close to the pseudo code I wrote earlier.&lt;/p&gt;

&lt;h3 id=&quot;implementing-tablerepresentation&quot;&gt;Implementing TableRepresentation&lt;/h3&gt;

&lt;p&gt;What does this context require of the roles? Here are the methods needed for &lt;code&gt;TableRepresentation&lt;/code&gt;, taken directly from the context above:&lt;/p&gt;

&lt;p&gt;{% highlight cpp %}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bool rowExists(void const* id);
void updateRowFor(void const* id, TableSource const&amp;amp; source, int timestamp);
void addRowFor(void const* id, TableSource const&amp;amp; source, int timestamp);
void removeUncheckedRows(int timestamp);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;{% endhighlight %}&lt;/p&gt;

&lt;p&gt;This object is created with the data it needs to manipulate: in this case a &lt;code&gt;Rocket::Core::Element&lt;/code&gt; object. When it needs to update elements, it is passed a &lt;code&gt;TableSource&lt;/code&gt; role to give it the relevent data. Here’s some of the code for the &lt;code&gt;addRowFor()&lt;/code&gt; method:&lt;/p&gt;

&lt;p&gt;{% highlight cpp %}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;void TableRepresentation::addRowFor(void const* id, TableSource const&amp;amp; source, int timestamp) {
  Rocket::Core::Element* entry = _element-&amp;gt;GetOwnerDocument()-&amp;gt;CreateElement(&quot;li&quot;);
  entry-&amp;gt;SetAttribute(&quot;good&quot;, (void*)id);
  std::vector&amp;lt;std::string&amp;gt; columnList;
  source.fetchColumnList(columnList);
  std::vector&amp;lt;std::string&amp;gt;::iterator it = columnList.begin();
  for(; it != columnList.end(); it++) {
    ChildContentTag(entry, &quot;div&quot;, it-&amp;gt;c_str(), source.rowFor(it-&amp;gt;c_str(), id).c_str());
  }
  _element-&amp;gt;AppendChild(entry);
  entry-&amp;gt;RemoveReference();
  entry-&amp;gt;SetAttribute(&quot;updated_at&quot;, timestamp);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;{% endhighlight %}&lt;/p&gt;

&lt;p&gt;There’s a lot of noise here, but note the use of &lt;code&gt;source&lt;/code&gt;. The code creates a new &lt;code&gt;li&lt;/code&gt; element, gets the column list from the source and then asks the source for the string data for a particular row using &lt;code&gt;rowFor()&lt;/code&gt;. The roles are interacting to provide the behaviour of the use case.&lt;/p&gt;

&lt;h3 id=&quot;implementing-tablesource&quot;&gt;Implementing TableSource&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;TableSource&lt;/code&gt; needed to be an interface in the end to manage both viewing a series of &lt;code&gt;MarketListings&lt;/code&gt; and also a player &lt;code&gt;Inventory&lt;/code&gt;. Here are the methods:&lt;/p&gt;

&lt;p&gt;{% highlight cpp %}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;virtual void enumerateRows(boost::function&amp;lt;void(const void*)&amp;gt; action) = 0;
virtual std::string rowFor(std::string const&amp;amp; key, void const* id) const = 0;
virtual void fetchColumnList(std::vector&amp;lt;std::string&amp;gt;&amp;amp; list) const = 0;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;{% endhighlight %}&lt;/p&gt;

&lt;p&gt;For a &lt;code&gt;MarketListing&lt;/code&gt;, here’s the implementation of the key methods that the &lt;code&gt;TableRepresentation&lt;/code&gt; needs:&lt;/p&gt;

&lt;p&gt;{% highlight cpp %}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;void CommodityMarketTableSource::fetchColumnList(std::vector&amp;lt;std::string&amp;gt;&amp;amp; list) const {
  list.push_back(&quot;name&quot;);
  list.push_back(&quot;price&quot;);
  list.push_back(&quot;quantity&quot;);
}

std::string CommodityMarketTableSource::rowFor(std::string const&amp;amp; key, void const* id) const {
  MarketListing const* listing = _market.listings()[(Good const*)id];
  std::stringstream stream;
  if (key == &quot;name&quot;)
    return listing-&amp;gt;name();
  if (key == &quot;price&quot;) {
    stream &amp;lt;&amp;lt; &quot;$&quot;;
    stream &amp;lt;&amp;lt; listing-&amp;gt;price().amount();
    return stream.str();
  }
  if (key == &quot;quantity&quot;) {
    stream &amp;lt;&amp;lt; listing-&amp;gt;amountAtThisPrice();
    return stream.str();
  }
} {% endhighlight %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The player &lt;code&gt;Inventory&lt;/code&gt; table source code is very similar.&lt;/p&gt;

&lt;h3 id=&quot;tying-it-together&quot;&gt;Tying it together&lt;/h3&gt;

&lt;p&gt;How do I use this thing? Inside my controller for updating the GUI window, I do the following:&lt;/p&gt;

&lt;p&gt;{% highlight cpp %}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;void MarketController::syncInventory() {
  Rocket::Core::Element* entries = _planetWindow-&amp;gt;GetElementById(&quot;inventory&quot;)-&amp;gt;GetLastChild();

  gui::role::TableRepresentation tableRole(entries);
  gui::role::InventoryTableSource sourceRole(_inventory);
  gui::RowUpdater(sourceRole, tableRole).execute();
}

void MarketController::syncMarketListings() {
  Rocket::Core::Element* entries = _planetWindow-&amp;gt;GetElementById(&quot;market&quot;)-&amp;gt;GetLastChild();

  role::TableRepresentation tableRole(entries);
  role::CommodityMarketTableSource sourceRole(_market);
  gui::RowUpdater(sourceRole, tableRole).execute();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;{% endhighlight %}&lt;/p&gt;

&lt;p&gt;In each case the &lt;code&gt;TableRepresentation&lt;/code&gt; is the same, with a different target element, and the source is different depending on what I want to show for that table.&lt;/p&gt;

&lt;h2 id=&quot;in-conclusion&quot;&gt;In conclusion&lt;/h2&gt;

&lt;p&gt;I could have simply used a list of &lt;code&gt;MarketListing&lt;/code&gt; objects instead of my &lt;code&gt;TableSource&lt;/code&gt;, and manipulated the &lt;code&gt;Element&lt;/code&gt; objects in the GUI directly. That’s what I did at first, but this approach gives me a number of advantages:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The code for enumerating rows, and exposing certain data to to the GUI is kept out of &lt;code&gt;MarketListing&lt;/code&gt;, which is great: it only makes sense in this Context which is exactly what a role is for.&lt;/li&gt;
  &lt;li&gt;The actual guts of the synchronisation code is kept in the Context. I’m not sure this is the best place, but it’s great to have it in one place.&lt;/li&gt;
  &lt;li&gt;It was trivial to add a &lt;code&gt;role::InventoryDataSource&lt;/code&gt; object: in another 30 minutes or so I had TDDed out the display of inventories of goods using the same Context and slightly different roles.&lt;/li&gt;
  &lt;li&gt;I could potentially replace the &lt;code&gt;TableRepresentation&lt;/code&gt; with anything which we need to sync lists of tabular data with.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I tested this using some real &lt;code&gt;CommodityMarket&lt;/code&gt; objects, which contain &lt;code&gt;MarketListing&lt;/code&gt; objects: I poked new goods into them and checked the elements were being created and removed successfully.&lt;/p&gt;

&lt;p&gt;Here’s a screenshot of the market at work:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/sol-trader-market-1.png&quot; alt=&quot;Sol markets&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In summary, I’m very pleased with how this turned out. There is a bit more code than just hard wiring it, but all my behaviour is in one place, and I’ve not loaded my market and goods classes with yet more functionality. I’m now looking for other use cases to implement using a similar method, as I move on to building a realistic (as opposed to random) economy.&lt;/p&gt;

&lt;p&gt;How do you like my approach to DCI? Have I missed something profound, or how could I improve my approach?&lt;/p&gt;
</content></entry><entry><title>On coding defensively</title><category term='code'/><category term='ruby'/><category term='craftsmanship'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2012/02/on-coding-defensively'/><updated>2012-02-17T18:57:25+00:00</updated><id>http://chrismdp.com/2012/02/on-coding-defensively</id><content type='html'>&lt;p&gt;When writing code that will be used by others (and we do that 100% of the time, even if the other user is ourselves in a few weeks time), there’s a tricky balance to strike between being generous to the users of our code, and ensuring that they get the information they want to ensure they’re calling our code correctly. There are two coding maxims: “Be generous on input, and strict on output”, and “fail fast”, which we need to hold in tension. This post explores the trade-offs between the two.&lt;/p&gt;

&lt;h2 id=&quot;be-generous-on-input-and-strict-on-output&quot;&gt;“Be generous on input, and strict on output”&lt;/h2&gt;

&lt;p&gt;This is another way of saying &lt;em&gt;code defensively:&lt;/em&gt; we should allow the user to use our code a number of different ways, yet be careful about what we return to them to ensure they can’t be easily confused.&lt;/p&gt;

&lt;p&gt;For example, consider this method:&lt;/p&gt;

&lt;p&gt;{% highlight ruby %}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def calculate_total(products)
  total = 0
  products.each do |product|
    total += product.price
  end
  return total
end

calculate_total([product1, product2])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;{% endhighlight %}&lt;/p&gt;

&lt;p&gt;If we accept an array as an argument, we could code defensively and allow a single product to be passed as well:&lt;/p&gt;

&lt;p&gt;{% highlight ruby %}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def calculate_total(products)
  products = [products] unless.products.respond_to?(:each)
  total = 0
  products.each do |product|
    total += product.price
  end
  return total
end

calculate_total(product) # also works now
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;{% endhighlight %}&lt;/p&gt;

&lt;p&gt;This is a nice feature and potentially allows our code to be used more flexibly.&lt;/p&gt;

&lt;p&gt;Let’s take this further. What happens when our user decides to pass in an invalid value, such as a string? Should we code defensively for that situation?&lt;/p&gt;

&lt;p&gt;{% highlight ruby %}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def calculate_total(products)
  return 0 if product.is_a?(String)
  products = [products] unless.products.respond_to?(:each)
  total = 0
  products.each do |product|
    total += product.price
  end
  return total
end

calculate_total(&quot;product&quot;) # return 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;{% endhighlight %}&lt;/p&gt;

&lt;p&gt;In this case, we could argue our code is being defensive: it avoided the crash that would have happened when we tried to call the non-existent &lt;code&gt;price&lt;/code&gt; method on the passed in string. Is this desirable?&lt;/p&gt;

&lt;h2 id=&quot;if-were-going-to-fail-we-should-fail-quickly&quot;&gt;“If we’re going to fail, we should fail quickly.”&lt;/h2&gt;

&lt;p&gt;The programmer using our code probably made a mistake here. If we fail immediately, it’s very easy for them to see where the error is. If we accept pretty much anything, and return ‘0’ (or much worse, ‘-999’ or some other abomination) we’re just going to get incorrect prices: we’re going to hide and propagate the error down the call stack and make it much harder to debug.&lt;/p&gt;

&lt;p&gt;This is a tricky balance and it depends on the situation, but in general I think these principles are helpful to deciding what to do:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Fail if we cannot be strict with our output.&lt;/em&gt; Coding defensively has two sides: generous with input, but also strict with output. If the output is changed by the way we recieve our argument, we’re not being specific enough. In the above example, we’re effectively giving a string a price of zero, which is extra behaviour we probably don’t want. Likewise, make sure that if there’s no way we can return a sensible result, then we should not accept the argument passed and fail instead.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Is our method doing too much?&lt;/em&gt; In the case of the above method our user might be wanting to pass the name of the product as a string, and look up the product to work out the price. We could support that, but this will encourage duplication: if we persist with keeping methods that do “A and B”, we’ll find over time we code will spring up additional methods which do “A” and “B” separately. Our method is now too complex and needs to be split into two.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Be generous with types.&lt;/em&gt; We have some advantages working in a dynamically typed language such as Ruby. Use the power of Duck Typing: don’t check if objects are certain types: check if they respond to the methods that we need to call on them.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Be generous at the edges of our code.&lt;/em&gt; Being generous with private APIs and methods only used by ourselves in constrained circumstances is a waste of time: we should just ensure we’re calling our own code correctly.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;When we fail, we should fail hard. Really hard.&lt;/em&gt; In its laudable determination to follow the &lt;a href=&quot;http://en.wikipedia.org/wiki/Principle_of_least_astonishment&quot;&gt;Principle of Least Astonishment&lt;/a&gt;, Ruby has a weakness for over-generosity. It tends to return nil when it encounters an error in cases where in my opinion it should throw an exception. Programmers don’t always check for the nils they receive correctly, which means they get passed around our codebase, eventually causing a crash when we least expect it. We should not return nil: that’s not being specific enough with our outputs. We should throw an exception or terminate the program if we really need to get their attention.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What do you think? Do you tend to learn more towards coding defensively, or failing early?&lt;/p&gt;

&lt;p&gt;(Thanks to &lt;a href=&quot;http://www.unboxedconsulting.com/people/alex-tomlins&quot;&gt;Alex Tomlins&lt;/a&gt; at Unboxed for the conversation that led to this post.)&lt;/p&gt;
</content></entry><entry><title>Your tests are lying to you</title><category term='code'/><category term='cucumber'/><category term='craftsmanship'/><category term='bdd'/><category term='rspec'/><category term='rails'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2011/10/your-tests-are-lying-to-you'/><updated>2011-10-17T19:10:29+01:00</updated><id>http://chrismdp.com/2011/10/your-tests-are-lying-to-you</id><content type='html'>&lt;p&gt;Using mocks within your test suite has gone rather out of fashion. Programmers everywhere have been lamenting the fact that mock-based tests are becoming more and more brittle: they’re having to change the test code in multiple places each time there’s the slightest code change. In fact, they seem to be changing the test code much much more often than the production code.&lt;/p&gt;

&lt;p&gt;Using mocks appear to require a lot of set up code for the object under test. Why not just fire up Factory Girl, create a bunch of objects we need to test this code, and just check the outputs?&lt;/p&gt;

&lt;p&gt;This works, and appears to work nicely. For a while.&lt;/p&gt;

&lt;p&gt;Eventually your tests will get to the point where they’re lying to you: they’re telling you your code works whereas actually it only works by coincidence. This post will examine the different techniques we can use to test code, and why some work better than others in the long term.&lt;/p&gt;

&lt;h2 id=&quot;the-problem&quot;&gt;The problem&lt;/h2&gt;

&lt;p&gt;To look at this further, let’s try to write a conference simulator for a new website that tries to predict how many people might attend an upcoming event: &lt;/p&gt;

&lt;p&gt;{% highlight ruby %}
describe Conference do
  it “calculates total rating” do
    conference = Conference.new(:total_rating =&amp;gt; 9)
    conference.total_rating.should == 9
  end
end
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;A simple start, with equally simple production code. Next, we decide to extract our code for calculating the rating into &lt;code&gt;Speaker&lt;/code&gt; classes. We decide not to change the test suite much, and make the code work behind the scenes:&lt;/p&gt;

&lt;p&gt;{% highlight ruby %}
describe Conference do
  it “calculates total rating” do
    conference = Conference.new(:speakers =&amp;gt; [:chris, :paul])
    conference.total_rating.should == 9
  end
end
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;A nice simple, easy change? You’ll pay for this later. Where is the Speaker coming from? Your Conference class is creating it somewhere, or retrieving it from a factory. You’ve increased the number of collaborators for this class by at least one (possibly three), yet your test isn’t showing the additional complexity. It’s deceitfully hiding it, whilst you continue on in blissful ignorance.&lt;/p&gt;

&lt;p&gt;Your tests are now sitting around the outside of your system. There are no tests for the Speaker class at all, except that we co-incidentally check the rating it emits. Another developer is likely to miss the connection and remove the implied test whilst changing the code for a different reason later.&lt;/p&gt;

&lt;p&gt;This gets worse over time:&lt;/p&gt;

&lt;p&gt;{% highlight ruby %}
describe Conference do
  it “calculates total rating” do
    conference = Conference.new(
      :schedule =&amp;gt; :nine_to_five,
      :talks =&amp;gt; [talk_for(:chris), talk_for(:paul)]
    )
    conference.total_rating.should == 9
  end
end
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Can you see what’s going on here? We’ve created some nice helper methods to make it easy to create the required talk objects we need. This test is fairly easy to read, but it’s dressing up the problem. The test code is relying on far too many collaborators to function correctly to return the correct result.&lt;/p&gt;

&lt;p&gt;When you extract a class, your purely state based tests don’t always require change. If you’re not stubbing out or mocking systems, you can end up in a situation where you’re relying on the code to work without realising it.&lt;/p&gt;

&lt;p&gt;How could it be improved?&lt;/p&gt;

&lt;p&gt;{% highlight ruby %}
describe Conference do
  let(:talk1) { double(:talk, :rating =&amp;gt; 10) }
  let(:talk2) { double(:talk, :rating =&amp;gt; 6) }
  let(:schedule) { double(:schedule, :rating =&amp;gt; 10) }
  before(:each) { Schedule.stub(:new =&amp;gt; schedule) }
  it “calculates total rating” do
    conference = Conference.new(
      :schedule =&amp;gt; :nine_to_five,
      :talks =&amp;gt; [talk1, talk2]
    )
    conference.total_rating.should == 9
  end
end&lt;/p&gt;

&lt;p&gt;describe Speaker do
end
describe Schedule do
end
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Now we’ve isolated the method nicely from its collaborators, and ensured that its behaviour is correct: that it aggregates the ratings of the talks and the schedule. We also make sure that we’re testing Conference correctly, also in isolation.&lt;/p&gt;

&lt;p&gt;The more you use refactoring methods such as Extract Class without cleaning up your tests, the more likely your tests will be lying to you. Little by little, those tests that you trusted are slowly testing more and more code. You add a multitude of edge cases at the edges, never thinking about the complexity within. You’ve resorted to using end-to-end tests to test basic correctness.&lt;/p&gt;

&lt;p&gt;This is a bad thing on many levels: for example, what happens to interface discovery? How will you know how the interface of your lower-level classes needs to behave if you’re not mocking or stubbing it? You are resorting to guessing, rather than exercising the interface ahead of time in your tests. If you have tests around the edges, but not in the middle, you’re not gaining the design input that tests give you in each layer of your system.&lt;/p&gt;

&lt;h2 id=&quot;your-code-stinks&quot;&gt;Your code stinks&lt;/h2&gt;

&lt;p&gt;If you go the whole hog with testing in isolation, then you might end up here with something like this:&lt;/p&gt;

&lt;p&gt;{% highlight ruby %}
describe Conference do
  let(:talk1) { double(:talk, :rating =&amp;gt; 10) }
  let(:talk2) { double(:talk, :rating =&amp;gt; 6) }
  let(:talk3) { double(:talk, :rating =&amp;gt; 2) }
  let(:talk4) { double(:talk, :rating =&amp;gt; 8) }
  let(:track1) { double(:track, :talks =&amp;gt; [talk1, talk3] }
  let(:track2) { double(:track, :talks =&amp;gt; [talk2, talk4] }&lt;/p&gt;

&lt;p&gt;let(:venue1) { double(:venue, :nice_coffee_places =&amp;gt; 3) }&lt;/p&gt;

&lt;p&gt;let(:joe) { double(:announcer, :experience =&amp;gt; 5) }&lt;/p&gt;

&lt;p&gt;let(:schedule) { double(:schedule, :rating =&amp;gt; 10, :accouncer =&amp;gt; joe) }
  before(:each) { Schedule.stub(:new =&amp;gt; schedule) }&lt;/p&gt;

&lt;p&gt;it “calculates total rating” do
    conference = Conference.new(
      :schedule =&amp;gt; :nine_to_five,
      :tracks =&amp;gt; [track1, track2],
      :organiser =&amp;gt; joe,
      :venues =&amp;gt; [venue1, venue1]
    )
    conference.total_rating.should == 6.3945820
  end
end&lt;/p&gt;

&lt;p&gt;{% endhighlight %}&lt;/p&gt;

&lt;p&gt;I’m not surprised people moan about maintaining this: if any aspect of the Conference class changes, this test will break and need to be fixed. We can see that this test code is hard to write and difficult to read. It would be so much easier just to hide this setup in a few factory methods with some sensible defaults, right?&lt;/p&gt;

&lt;p&gt;Maybe it’s not the test code that’s the problem. Perhaps the code stinks. Perhaps the class simply has way too many collaborators, which is why your test code contains a large amount of set up.&lt;/p&gt;

&lt;p&gt;For this test code, we can see there are several objects leaking all over the conference code: to refactor this I’d probably get through a Scheduler, Caterer and perhaps a TrackAggregator before I was done. I’d ensure all these objects were tested in isolation, and ensure that there are acceptance tests all the way through to make sure the customer has what they need.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Well designed code is easy to test.&lt;/em&gt; As a rule of thumb, anytime I get over about two or three lines of setup code for testing a method, I normally take a step back and ask myself if this method is doing too much.&lt;/p&gt;

&lt;h2 id=&quot;test-speed&quot;&gt;Test speed&lt;/h2&gt;

&lt;p&gt;The other advantage of running tests purely in isolation is that they’re fast. Very fast. When I’m coding Rails apps these days, thanks to advice from &lt;a href=&quot;http://twitter.com/coreyhaines&quot;&gt;Corey Haines&lt;/a&gt; I’m running a &lt;code&gt;spec_no_rails&lt;/code&gt; folder which runs independently from the rest of my Rails app. Rails apps by default epitomise this problem: default model tests exercise the whole system from the database up. By running your tests independently you’re not having to clean the database or start Rails each time you run your tests, which means that much of your interesting code can be tested in under a second. &lt;a href=&quot;http://twitter.com/garybernhardt&quot;&gt;Gary Bernhardt&lt;/a&gt; has more information on how to set this up in his excellent &lt;a href=&quot;http://destroyallsoftware.com&quot;&gt;Destroy All Software&lt;/a&gt; screencast series.&lt;/p&gt;

&lt;h2 id=&quot;what-im-not-saying&quot;&gt;What I’m not saying&lt;/h2&gt;

&lt;p&gt;This isn’t an argument for or against Mocks or Stubs. Either technique can be used successfully to generate clean code. It’s an argument about only exercising the code under test, and leave the rest of the system to take care of itself. The important thing is that you &lt;em&gt;don’t exercise your collaborators:&lt;/em&gt; whether you check they’ve received messages or simply stub them to return input doesn’t matter.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Don’t forget end-to-end tests.&lt;/em&gt; These are very important for business acceptance and for ensuring basic functionality. The important thing is to ensure that you’re being intentional about your end-to-end tests and ensure your unit tests are not end-to-end tests by accident.&lt;/p&gt;

&lt;p&gt;Take a good look at the test code for a project you recently worked on. You don’t need to look at the production code yet: notice that I’ve not included any production code in these examples. You shouldn’t need to see it to know whether it’s of good quality or not: you can tell that by reading the tests.&lt;/p&gt;

&lt;p&gt;Which is the most annoying or bulky part of your test code? Are your tests deceiving you about what they’re testing? How could you improve the code to make this test code easier to maintain?&lt;/p&gt;
</content></entry><entry><title>Certification: recommendation mass produced</title><category term='business'/><category term='certification'/><category term='craftsmanship'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2011/04/on-certification'/><updated>2011-04-05T16:14:49+01:00</updated><id>http://chrismdp.com/2011/04/on-certification</id><content type='html'>&lt;p&gt;&lt;i&gt;&quot;Who knows a fool, must know his brother; For one will recommend another.&quot;&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;– &lt;a href=&quot;http://en.wikipedia.org/wiki/Benjamin_Franklin&quot;&gt;Benjamin Franklin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is often argued that certification is a bad thing. I would say that certification is not good or bad: it is rather the certifier and the manner of the certification that can be good or bad.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Certification is just recommendation mass produced.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Recommendation is very valuable, but only if I trust the recommender. If a trusted friend recommends the work of another, I will listen hard. If that recommender is a faceless corporation, then I won’t pay so much attention. If that corporation has been paid to recommend someone to me, then I will pay even less attention.&lt;/p&gt;

&lt;p&gt;I suggest we seek to win the recommendations of trusted people through a good track record, rather than paying a corporation to recommend (read: certify) us. Those who have mass produced their recommendations through a paid certification scheme are not likely to carry weight with anyone after a while.&lt;/p&gt;
</content></entry><entry><title>Pomodoros help you refactor</title><category term='code'/><category term='pomodoros'/><category term='tdd'/><category term='craftsmanship'/><category term='pairing'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2011/04/pomodoros-help-you-refactor'/><updated>2011-04-01T20:21:15+01:00</updated><id>http://chrismdp.com/2011/04/pomodoros-help-you-refactor</id><content type='html'>&lt;p&gt;&lt;i&gt;&quot;If you finish a task while the Pomodoro is still ticking, the following rule applies: If a Pomodoro Begins, It Has to Ring. It’s a good idea to take advantage of the opportunity for overlearning, using the remaining portion of the Pomodoro to review or repeat what you’ve done, make small improvements, and note down what you’ve learned until the Pomodoro rings.&quot;&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;– Francesco Cirillo, &lt;a href=&quot;http://www.pomodorotechnique.com/&quot;&gt;The Pomodoro Technique&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What’s the single most important part of Test Driven Development not to miss? Refactoring. What’s the part of TDD that’s most often missed? Refactoring.&lt;/p&gt;

&lt;p&gt;With refactoring, we work our way toward a great design, clean code, and flexible organic tests. Without refactoring, we have ugly brittle test suites and uglier code. We know this. What I don’t always do is take advantage of the moments I have when I can effectively refactor for free.&lt;/p&gt;

&lt;p&gt;At the end of a task, when the build is running, I’ve previously let my mind wander to the next thing, or check email, surf the net, and generally &lt;a href=&quot;http://www.computus.org/journal/?p=982&quot;&gt;get out of the zone&lt;/a&gt;. This bad habit has been highlighted to me in &lt;a href=&quot;/2011/03/pomodoros-done-hopefully-right&quot;&gt;my use of the pomodoro technique recently&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I was doing the same for the shorter pauses during normal TDD. My pomodoros statistics were telling me that I’m very bad at concentrating whilst coding: the average time spent before I let my mind wander was 11.67 minutes. I was allowing my mind to drift whilst Rails started up to run whatever test I was working on. Not good.&lt;/p&gt;

&lt;h2 id=&quot;time-to-improve&quot;&gt;Time to improve&lt;/h2&gt;

&lt;p&gt;This week, I’ve been trying to take the time to look at my code critically for areas of improvement. A pomodoro is indivisible, which means I’m not &lt;em&gt;allowed&lt;/em&gt; to think about anything else.&lt;/p&gt;

&lt;p&gt;And guess what? I always find something to improve, and I feel that little bit better about my code.&lt;/p&gt;

&lt;p&gt;The also helps with the thing I’ve missed most about not pairing: that other person’s critical eye on what you’re doing, always thinking about the code being written. During the natural pauses, you can be that other person and ensure the code you write is great. Being two people is &lt;a href=&quot;http://www.pixar.com/shorts/gg/index.html&quot;&gt;more fun, too&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>Five things I learnt from Corey Haines</title><category term='craftsmanship'/><category term='pairing'/><category term='code'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2010/03/pairing-with-corey-haines'/><updated>2010-03-17T10:18:00+00:00</updated><id>http://chrismdp.com/2010/03/pairing-with-corey-haines</id><content type='html'>&lt;p&gt;Recently I attended &lt;a href=&quot;http://qconlondon.com&quot;&gt;QCon&lt;/a&gt; and got a chance on the last day to pair with &lt;a href=&quot;http://coreyhaines.com&quot;&gt;Corey Haines&lt;/a&gt;. We worked on a new rails project we’re building with a few friends (that’s the subject of another post). We’d spent a fair amount of time hanging out, but I hadn’t had a chance to sit down and actually code with him. We paired for a couple of hours in the QCon expo area just as everyone was packing up.&lt;/p&gt;

&lt;p&gt;Here are a few lessons and some things I picked up.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;REALLY learn vim.&lt;/em&gt; Watching Corey fire around &lt;a href=&quot;http://vim.org&quot;&gt;vim&lt;/a&gt; was something else: my brain could barely keep up with where the cursor was sometimes. Sometimes it felt like he’d just moved the cursor to where he wanted it to be through Sheer Power of Thought. I’m no slouch in vim, but was impressed by just how much faster I’ll be able to go someday, as I continue to practice.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;resource_controller. formtastic. That is all.&lt;/em&gt; These gems take out the legwork of building a thin restful resource-based rails app. You end up with a lot of tests and very little code to worry about. As webapps become more about &lt;a href=&quot;/2009/12/rip-web-1-0/&quot;&gt;javascript and the front-end&lt;/a&gt;, rails apps are becoming thinner and thinner, and these gems make them really fast to write.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Alias everything.&lt;/em&gt; Corey has a few really useful little bash tricks, like:&lt;/p&gt;

&lt;p&gt;{% highlight bash %}
alias c=’script/console’
alias r=’rake routes | grep’
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;..and some others I didn’t catch. They save so much time and are so obvious that later I found myself banging ‘c’ into a console and wondering why it doesn’t work. &lt;/p&gt;

&lt;p&gt;The summary of these lessons is another more general one:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Work to remove whatever constrains you from getting the computer to do what you want.&lt;/em&gt; We need to ensure that there is as little as possible in the way of getting stuff done. Everything else is &lt;a href=&quot;http://en.wikpedia.org/wiki/Yak_Shaving&quot;&gt;yak shaving&lt;/a&gt;: slow typing, tool-illiteracy, whatever. Anytime we’re not thinking about the problem, we’re wasting time.&lt;/p&gt;

&lt;p&gt;And finally, a meta-lesson:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Extend your pairing gene pool.&lt;/em&gt; It’s amazing how much you learn when you pair with someone outside your immediate sphere. Rather like when I first paired with &lt;a href=&quot;http://blog.nexwerk.com&quot;&gt;Enrique&lt;/a&gt;, I learnt about stuff I would never have heard of otherwise. &lt;/p&gt;

&lt;p&gt;I spent two hours working with Corey and it was a pleasure. Sadly we live a few thousand miles apart, but I’m looking forward to remote pairing sessions in the future.&lt;/p&gt;
</content></entry><entry><title>BBC Talk on A Philosophy of Software</title><category term='craftsmanship'/><category term='apprenticeship'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2010/02/bbc-talk-a-philosophy-of-software'/><updated>2010-02-21T08:35:00+00:00</updated><id>http://chrismdp.com/2010/02/bbc-talk-a-philosophy-of-software</id><content type='html'>&lt;p&gt;Video of a talk I gave recently at the BBC about the nature of software development. We discuss craftsmanship, apprenticeship and the limitations of university education, amongst other topics. &lt;/p&gt;

&lt;p&gt;Watch the video here:&lt;/p&gt;

&lt;object width=&quot;499&quot; height=&quot;283&quot;&gt;&lt;param name=&quot;allowfullscreen&quot; value=&quot;true&quot; /&gt;&lt;param name=&quot;allowscriptaccess&quot; value=&quot;always&quot; /&gt;&lt;param name=&quot;movie&quot; value=&quot;http://vimeo.com/moogaloop.swf?clip_id=9607007&amp;amp;server=vimeo.com&amp;amp;show_title=1&amp;amp;show_byline=1&amp;amp;show_portrait=0&amp;amp;color=c9ff23&amp;amp;fullscreen=1&quot; /&gt;&lt;embed src=&quot;http://vimeo.com/moogaloop.swf?clip_id=9607007&amp;amp;server=vimeo.com&amp;amp;show_title=1&amp;amp;show_byline=1&amp;amp;show_portrait=0&amp;amp;color=c9ff23&amp;amp;fullscreen=1&quot; type=&quot;application/x-shockwave-flash&quot; allowfullscreen=&quot;true&quot; allowscriptaccess=&quot;always&quot; width=&quot;499&quot; height=&quot;283&quot; /&gt;&lt;/object&gt;
</content></entry><entry><title>Driving out feature ambiguity</title><category term='cucumber'/><category term='apprenticeship'/><category term='craftsmanship'/><category term='ambiguity'/><category term='katas'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2010/01/driving-out-feature-ambiguity'/><updated>2010-01-15T06:19:00+00:00</updated><id>http://chrismdp.com/2010/01/driving-out-feature-ambiguity</id><content type='html'>&lt;p&gt;&lt;a href=&quot;http://cukes.info&quot;&gt;Cucumber&lt;/a&gt; features are very useful. The ability to spec out what the customer wants in detail in a format they can read and understand really helps to communicatate what needs to be done. This combined with the ability to execute the feature to ensure that it is completed correctly catches many bugs and incorrect assumptions.&lt;/p&gt;

&lt;p&gt;However there is one area of bugs that features don’t catch so well, and even cause to some extent. These bugs are built right into the text in the form of ambiguity, sometimes through the constraint of features being executable.&lt;/p&gt;

&lt;p&gt;This came up recently in a conversation with &lt;a href=&quot;http://ohthatjames.github.com&quot;&gt;James&lt;/a&gt; and &lt;a href=&quot;http://ecomba.github.com/&quot;&gt;Enrique&lt;/a&gt; at &lt;a href=&quot;http://edendevelopment.co.uk&quot;&gt;Eden Development&lt;/a&gt; about James’ apprentice task, the &lt;a href=&quot;/2009/12/snakes-and-ladders-kata&quot;&gt;Snakes and Ladders Kata&lt;/a&gt;. It turns out that the text of one of the features runs against the commonly understood way that Snakes and Ladders works:&lt;/p&gt;

&lt;p&gt;{% highlight text %}
Scenario: Win the game
    Given player 1 is on position 97
    And player 1 rolls 3
    Then player 1 has won the game
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Question: is that a valid scenario? Given the commonly understand rules of Snakes and Ladders, you cannot just start on position 97. Implementing it as written complicates the domain model. &lt;/p&gt;

&lt;p&gt;How do you implement the first step? Do you go for a simple:&lt;/p&gt;

&lt;p&gt;{% highlight ruby %}
Given /^player (.&lt;em&gt;?) is on position (.&lt;/em&gt;?)$/ do |player, position|
  @game.set_player_position(player, position)
end
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;The potential issue with this is that you are exposing a method that in real life won’t get called, just to set up a test. It’s also tying your model down to a particular structure, by implying that the game stores an arbitraty position variable for a player. This might not be the best way to model the problem.&lt;/p&gt;

&lt;p&gt;The other option is to change the scenario such that the “Win the game” is tested in a similar way to the following:&lt;/p&gt;

&lt;p&gt;{% highlight text %}
Scenario: Win the game
    Given a game is started with two players
    And the following dice are rolled:
      |3|
      |4|
      |5|
      |5|
      (etc.)
    Then player 1 has won the game
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;That satisfies our understand of Snakes and Ladders, and gives us more freedom in our domain model. In this case, we simply modify the agreed scenario in the code and sidestep the problem.&lt;/p&gt;

&lt;p&gt;Right? &lt;em&gt;Wrong.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The important thing to remember is that the customer is always right about how the software should behave, even when it violates our commonly understood assumptions about the world. The software they want you to build might require a different implementation of Snakes and Ladders. They might have a 3 year-old daughter they’re planning to play the game with, who always wants to be given a headstart. In this case, we’ve not delivered what they want, simply because it makes life easier for us. We’ve let our assumptions and our concerns for good design drive out the features, rather than letting the features drive our design.&lt;/p&gt;

&lt;p&gt;There’s another possibility: when the customer wrote this scenario, they simply used “starts on position X” as a shortcut and don’t really care if it’s possible to do this in real life. In this case, we can work with them to write the scenario so as not to cheapen our design for the sake of easier feature writing.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The key insight: there’s no way that we can know which it is from reading the scenario. We have to ask the customer and drive out the ambiguity in the feature.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We mustn’t let the necessary constraints of executable features build ambiguity into your conversations about what the customer really wants. And we must be constantly talking to the customer all the way through the iteration, especially if they’re not on site.&lt;/p&gt;

&lt;p&gt;You might think “It’s only Snakes and Ladders, what does it matter?” It matters a great deal: situations like this come up regularly in real life projects. Practising how to deal with these issues and the conversations that result is one of the many powerful things you gain by doing katas.&lt;/p&gt;

&lt;p&gt;What’s your take on the above problem? Have you come across it in real life?&lt;/p&gt;
</content></entry><entry><title>Craftsmanship vs. Apprenticeship</title><category term='craftsmanship'/><category term='apprenticeship'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2009/12/craftsmanship-vs-apprenticeship'/><updated>2009-12-15T20:48:00+00:00</updated><id>http://chrismdp.com/2009/12/craftsmanship-vs-apprenticeship</id><content type='html'>&lt;p&gt;There’s been a &lt;a href=&quot;http://groups.google.com/group/software_craftsmanship/browse_thread/thread/417bec17184ccfc2&quot;&gt;lengthy discussion&lt;/a&gt; on the &lt;a href=&quot;http://groups.google.com/group/software_craftsmanship&quot;&gt;software craftsmanship mailing list&lt;/a&gt; over the last couple of days regarding the dangers of the Apprentice - Journeyman - Master metaphor, and how this potentially threatens to put people off the idea of software craftmanship. The responses were thoughtful and well reasoned, which showed off the general level of maturity and professionalism on the list excellently.&lt;/p&gt;

&lt;p&gt;We’ve recently started our own apprenticeship system at Eden, and I shared a few lessons learned so far on the thread. I’ve repeated a few below, and expanded to reflect my own current thinking:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Craftsmanship is not the same as Apprenticeship.&lt;/em&gt; To use a computer science term, they are orthogonal: you can have one without the other. Craftsmanship is difficult to argue against and is rapidly becoming a consensus amongst a large section of our industry. Apprenticeship is a little more nascent and untested, and potentially carries more dangers. You don’t need formal apprenticeship to embrace craftsmanship.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Everyone gets to be a craftsman.&lt;/em&gt; Following on from this, all who want to can be craftsmen/crafters/codesmiths/whatever the most apt term is: there should be no pecking order. Indeed, the more senior among us should be taking the lower place of serving those who would learn from us. Being a craftsman is more a state of mind than a level of ability or experience.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Use verbs, not nouns.&lt;/em&gt;  We are wherever possible using the terms as verbs not nouns in everyday use: “Richard is apprenticing to Chris”, “Chris is mentoring James”, for example. This prevent anyone “being” anything: it’s rather what you do than who you are. Those who might have a job title of “apprentice” (or not) also “mentor” others (including seniors) in specific areas they are particularly strong in. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;We don’t need masters, we need mentors.&lt;/em&gt; We’re not taking the metaphor as far as the “master” at Eden: I just don’t think that’s helpful to anyone at the moment. All of us know people who are more experienced than us, who can “mentor” us. I say let’s just leave it at that. Rather than seeking actively seeking “apprentices” (which indirectly sets ourselves up on a pedestal), let’s be actively seeking “mentors” and passively open to “apprenticing” others who ask us. That way we’ll be helpful and inclusive, taking the lowest place at the table.&lt;/p&gt;

&lt;p&gt;Hopefully that gives some insight in to how this language might in a professional environment. Waving loaded language around is like a waving a loaded weapon: it has powerful influence, but people can get hurt :) &lt;/p&gt;

&lt;p&gt;We’ve purposely treaded very carefully at Eden to try and bring in the best of the “apprenticeship” metaphor without all the trappings.&lt;/p&gt;

&lt;p&gt;What are your thoughts on the debate? Is apprenticeship useful, or are there better metaphors?&lt;/p&gt;
</content></entry></feed>
