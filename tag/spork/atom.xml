---
layout: nil
---
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title>Chris Parsons: posts tagged spork</title>

  <link href="http://chrismdp.com/"/>
  <updated>2010-11-16T21:41:57+00:00</updated>
  <id>http://chrismdp.com/tag/spork</id>
  <author>
    <name>Chris Parsons</name>
    <email>chrismdp@gmail.com</email>
  </author>
<entry><title>How to get Spork working NOW on Rails 3, Rspec 2 and Cucumber</title><category term='rails'/><category term='ruby'/><category term='rspec'/><category term='spork'/><category term='cucumber'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2010/11/getting-spork-working-now-on-rails-3-rspec-2-and-cucumber'/><updated>2010-11-16T21:41:57+00:00</updated><id>http://chrismdp.com/2010/11/getting-spork-working-now-on-rails-3-rspec-2-and-cucumber</id><content type='html'>&lt;p&gt;I’ve spent the evening trying to get &lt;a href=&quot;https://github.com/timcharper/spork&quot;&gt;Spork&lt;/a&gt; to work with Rails 3 and RSpec 2. I’ve never felt the need for it before, but the Rails 3 start up time is fairly hefty and I’m crying out for the extra seconds more than ever.&lt;/p&gt;

&lt;p&gt;It’s not that tricky, thankfully, and the following steps should see you running faster specs and features in no time.&lt;/p&gt;

&lt;h2 id=&quot;rspec-2&quot;&gt;RSpec 2&lt;/h2&gt;

&lt;p&gt;Follow these instructions to get RSpec 2 working:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Install Spork into your Gemfile, and update rspec to 2.1:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;{% highlight ruby %}
gem “spork”, :git =&amp;gt; “git://github.com/chrismdp/spork.git”
gem “rspec-rails”, ‘&amp;gt;= 2.1.0’
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;You’ll need &lt;a href=&quot;http://github.com/chrismdp/spork&quot;&gt;my fork of Spork&lt;/a&gt; for a quick patch to the latest release candidate of Spork.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Add &lt;code&gt;--drb&lt;/code&gt; on a new line in your .rspec file:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you don’t have the .rspec file, create it.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Modify your spec_helper.rb:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You could follow the installation instructions, but not everything is relevant to Rails 3 and Rspec 2. It’s pretty simple anyway: add “require ‘spork’” to the top of your spec_helper.rb file, and put everything else inside spec_helper.rb inside a Spork.pre_fork do … end block:&lt;/p&gt;

&lt;p&gt;{% highlight ruby %}
require ‘spork’&lt;/p&gt;

&lt;p&gt;Spork.prefork do
  ENV[“RAILS_ENV”] ||= ‘test’
  require File.expand_path(“../../config/environment”, &lt;strong&gt;FILE&lt;/strong&gt;)
  require ‘rspec/rails’
  …
end
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;That should be it. To start up the server, run:&lt;/p&gt;

&lt;p&gt;{% highlight bash %}
$ bundle exec spork
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;…and then try running a spec or two. The following command takes about a second on my machine now, whereas it used to take about ten seconds!&lt;/p&gt;

&lt;p&gt;{% highlight bash %}
$ bundle exec rspec spec/controllers/sessions_controller_spec.rb
{% endhighlight %}&lt;/p&gt;

&lt;h2 id=&quot;cucumber&quot;&gt;Cucumber&lt;/h2&gt;

&lt;p&gt;It’s important to note that for more than about 10-20 scenarios, Spork is &lt;em&gt;slower&lt;/em&gt; than running cucumber normally. Therefore only turn it on for a few profiles, such as autotest (but not autotest-all), wip, etc.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Modify your cucumber.yml file:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;{% highlight yaml %}
wip: –drb -tags @wip:3 –wip features
autotest: –drb –color –format progress –strict
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Leave ‘autotest-all’ and ‘default’ alone.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Modify your features/support/env.rb:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is just the same process as with the spec_helper.rb file for RSpec:&lt;/p&gt;

&lt;p&gt;{% highlight ruby %}
require ‘spork’&lt;/p&gt;

&lt;p&gt;Spork.prefork do
  ENV[“RAILS_ENV”] ||= “test”
  require File.expand_path(File.dirname(&lt;strong&gt;FILE&lt;/strong&gt;) + ‘/../../config/environment’)
  require ‘cucumber/formatter/unicode’ # Remove this line if you don’t want Cucumber Unicode support
  require ‘cucumber/rails/rspec’
  …
end
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Again, that should be it. Run the follow to try it out:&lt;/p&gt;

&lt;p&gt;{% highlight bash %}
$ bundle exec spork cucumber
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Now try running a single feature in rerun or autotest mode. I’m getting 20% speedups for about 10 scenarios.&lt;/p&gt;

&lt;h2 id=&quot;using-them-together&quot;&gt;Using them together&lt;/h2&gt;

&lt;p&gt;The RSpec and Cucumber versions of spork use different ports, so there’s no problem running them together. Normally I run both in the same terminal window, one as a background process:&lt;/p&gt;

&lt;p&gt;{% highlight bash %}
$ bundle exec spork cucumber &amp;amp; bundle exec spork
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Then I run autotest in another window.&lt;/p&gt;

&lt;h2 id=&quot;how-do-i-use-this&quot;&gt;How do I use this?&lt;/h2&gt;

&lt;p&gt;I’m really liking this setup. It makes rapid TDD possible again, even when dealing with fairly slow tests. &lt;/p&gt;

&lt;p&gt;Of course, we should be doing all we can to get the speed of our tests as high as possible: slow tests are a type of code smell. However, infrastructure load time is unavoidable and cutting it out is full of all kinds of win.&lt;/p&gt;

&lt;p&gt;Use this setup with &lt;a href=&quot;https://github.com/grosser/autotest&quot;&gt;autotest&lt;/a&gt; and &lt;a href=&quot;https://github.com/svoop/autotest-growl&quot;&gt;autotest-growl&lt;/a&gt; for maximum win. Autotest has come a long way recently: there’s a lightweight alternative to ZenTest now, and easy growl support. Cutting out even the ‘Oh, I should run my tests now step’ totally nails your debug cycle: not sure it gets much tighter than that.&lt;/p&gt;

&lt;h2 id=&quot;update-even-more-speed&quot;&gt;UPDATE: Even more speed!&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://opinionatedprogrammer.com/&quot;&gt;Jo Liss&lt;/a&gt; got in touch: she’s made some performance gains by skipping the “bundle exec” and requiring a few extra files in the prefork block. Read about what she has to say &lt;a href=&quot;http://opinionatedprogrammer.com/2011/02/profiling-spork-for-faster-start-up-time/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</content></entry></feed>
