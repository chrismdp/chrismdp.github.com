---
layout: nil
---
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title>Chris Parsons: posts tagged game development</title>

  <link href="http://chrismdp.com/"/>
  <updated>2012-02-14T22:56:43+00:00</updated>
  <id>http://chrismdp.com/tag/game development</id>
  <author>
    <name>Chris Parsons</name>
    <email>chrismdp@gmail.com</email>
  </author>
<entry><title>Sol Trader: on lighting</title><category term='products'/><category term='c++'/><category term='code'/><category term='opengl'/><category term='sol trader'/><category term='game development'/><category term='lighting'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2012/02/sol-trading-lighting'/><updated>2012-02-14T22:56:43+00:00</updated><id>http://chrismdp.com/2012/02/sol-trading-lighting</id><content type='html'>&lt;p&gt;A quick update on the lighting code I’ve been working on. Now that I have normal maps and per-pixel bump mapping working, I can turn these:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/sol-trader-lighting-1.png&quot; alt=&quot;ship-texture-1&quot; /&gt;
&lt;img src=&quot;/files/sol-trader-lighting-2.png&quot; alt=&quot;ship-texture-2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Into this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/sol-trader-lighting-3.png&quot; alt=&quot;ship-texture-3&quot; /&gt;
&lt;img src=&quot;/files/sol-trader-lighting-4.png&quot; alt=&quot;ship-texture-4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Check out how the ship appears lit from each side. It looks even better as you see it moving. Hey presto: a realistic 3D effect with only two triangles rendered.&lt;/p&gt;

&lt;p&gt;All I’m using is this simple GLSL fragment shader:&lt;/p&gt;

&lt;p&gt;{% highlight c %}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;void main() {
  vec4 color = texture(baseTexture, uv);
  vFragColor = vertColor * color;
  float alpha = vFragColor.a;

  if (alpha &amp;gt; 0.0 &amp;amp;&amp;amp; useNormal) {
    vec3 lightDirection = normalize(vec3(0.2, 0.2, 0.0));
    vec4 normal = normalize(texture(normalTexture, uv) * 2.0 - 1.0);
    vec4 vEyeNormal = normalMatrix * normal;

    float diffuse = max(0.0, dot(vEyeNormal.xyz, lightDirection));
    vFragColor *= (diffuse * 3);
    vFragColor.a = alpha;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;{% endhighlight %}&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/GLSL&quot;&gt;GLSL&lt;/a&gt; is great.&lt;/p&gt;
</content></entry><entry><title>Effective bloom in OpenGL for Sol Trader</title><category term='products'/><category term='c++'/><category term='code'/><category term='opengl'/><category term='bloom'/><category term='sol trader'/><category term='game development'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2012/02/effective-bloom-in-open-gl-for-sol-trader'/><updated>2012-02-02T16:28:30+00:00</updated><id>http://chrismdp.com/2012/02/effective-bloom-in-open-gl-for-sol-trader</id><content type='html'>&lt;div class=&quot;notice&quot;&gt;
  &lt;h2&gt;TL;DR&lt;/h2&gt;

  &lt;p&gt;Skip to the &lt;a href=&quot;#pictures&quot;&gt;pictures&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;I’ve been working on and off on &lt;a href=&quot;http://soltrader.net&quot;&gt;Sol Trader&lt;/a&gt; (&lt;a href=&quot;/2012/01/why-i-switched-from-ruby-back-to-c-plus-plus/&quot;&gt;C++ version&lt;/a&gt;) for about a month now. At the beginning of this week, I’ve been coded up an effective type formatting system using freetype2 natively with OpenGL, which is now in and showing even rather esoteric fonts nicely.&lt;/p&gt;

&lt;p&gt;The second half of this week was spent adding on a bloom filter to the graphics engine.&lt;/p&gt;

&lt;h2 id=&quot;bloom-filtering-making-your-world-stand-out&quot;&gt;Bloom filtering: making your world stand out&lt;/h2&gt;

&lt;p&gt;A bloom filter causes bright areas of the image to ‘take over’ their surrounding area, simulating the high dynamic range of real light. It stops your game world from looking dull and flat and really makes it stand out. See &lt;a href=&quot;http://www.gamasutra.com/view/feature/2107/realtime_glow.php&quot;&gt;this article&lt;/a&gt; for some nice screenshots from Tron 2.0 - it can also be used for all sorts of glow and blur effects.&lt;/p&gt;

&lt;p&gt;So how’s it done? The trick is to render your scene to a texture, rather than to the screen. Once you’ve done that, you blur and downsample that texture a few times, and then display the results combined with the original texture.&lt;/p&gt;

&lt;p&gt;Specifically, this is the process my bloom filter follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Render to a texture&lt;/li&gt;
  &lt;li&gt;Copy that texture to two more textures, one a quarter of the screen size, and one an eighth of the screen size.&lt;/li&gt;
  &lt;li&gt;Blur the two smaller textures using gaussian blur. There are &lt;a href=&quot;http://prideout.net/archive/bloom/&quot;&gt;clever techniques&lt;/a&gt; which mean you only need six texture lookups to perform a 5x5 gaussian blur. Texture lookups are expensive, so it’s worth doing as few as possible.&lt;/li&gt;
  &lt;li&gt;Add all these textures together and add an exposure function to cause the white to saturate for strong color values.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Writing the initial bloom filter was fairly easy. Making it fast was &lt;em&gt;hard:&lt;/em&gt; you have to work at combining the different aspects of the effect to get what you want, with the absolute minimum of effort for your graphics card. My first attempt ran at a paltry 27 frames a seconds, although it looked very nice: I eventually managed to get it to the point where it runs in roughly 150 frames per second and still looks 80% as good.&lt;/p&gt;

&lt;div name=&quot;pictures&quot;&gt;
  &lt;h2&gt;What's the result?&lt;/h2&gt;
&lt;/div&gt;

&lt;p&gt;A picture is worth a thousand words, so here are three:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/sol-trader-bloom-1.png&quot; alt=&quot;bloom-1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/sol-trader-bloom-2.png&quot; alt=&quot;bloom-2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/sol-trader-bloom-3.png&quot; alt=&quot;bloom-3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I’ve deliberately upped the bloom exposure to show off the effect: it is much more obvious when it’s moving. Hopefully you can see the volcanic eruptions on Venus are making the outline of the players’ ship that much more hazy. The label of the planet also currently has the bloom effect applied: I’ll be able to turn that off when I have a more functional GUI in place.&lt;/p&gt;

&lt;p&gt;I plan to use this effect for all sorts of things: laser fire, explosions, you name it.&lt;/p&gt;

&lt;h2 id=&quot;next&quot;&gt;Next…&lt;/h2&gt;

&lt;p&gt;I’m going to tackle the gui. I now have AI characters with names trading on Earth’s main commodity market: it’s time the player joins them in making trades.&lt;/p&gt;

&lt;div class=&quot;notice&quot;&gt;
  If you'd like to purchase Sol Trader you can now do so at &lt;a href=&quot;http://soltrader.net&quot;&gt;soltrader.net&lt;/a&gt;!
&lt;/div&gt;
</content></entry><entry><title>Switching Sol Trader from Ruby to C++: one week on</title><category term='products'/><category term='ruby'/><category term='c++'/><category term='code'/><category term='sol trader'/><category term='game development'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2012/01/switching-sol-trader-from-ruby-to-c-plus-plus-one-week-on'/><updated>2012-01-16T09:38:25+00:00</updated><id>http://chrismdp.com/2012/01/switching-sol-trader-from-ruby-to-c-plus-plus-one-week-on</id><content type='html'>&lt;p&gt;Well, I didn’t quite expect that. My &lt;a href=&quot;/2012/01/why-i-switched-from-ruby-back-to-c-plus-plus/&quot;&gt;previous post&lt;/a&gt; about switching &lt;a href=&quot;http://soltrader.net&quot;&gt;Sol Trader&lt;/a&gt; development from Ruby back to C++ caused &lt;a href=&quot;http://news.ycombinator.com/item?id=3440596&quot;&gt;quite a storm&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Not being used to making waves on the mainstream Internet, I naively attempted to dive in and read and respond to every comment. It appears that feedback from the Internet at large tends towards the negative, so after a few hours I was feeling pretty discouraged, and only continued replying to some of the constructive feedback. Sorry if you didn’t get a response.&lt;/p&gt;

&lt;p&gt;I have a few more comparisons between Ruby and C++ which I’d like to share.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;I’m finding myself reinventing the wheel more.&lt;/em&gt; In Ruby-land I found third-party code easier to read, easier to install and easier to use. Trying to use someone else’s library is C++ is harder. Often people don’t seem to write automated tests, which strongly recommends me against using them. I’m also concerned that new libraries might introduce hidden memory leaks which will waste me time massively when I come to hunt them down. I appreciate people don’t release their code just for me, so I’m not complaining: I’ve just found it more difficult to trust third-party code. I hope to try and fix this tendency by releasing large extractions from my project as libraries in the future.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Boost is awesome.&lt;/em&gt; One notable exception to the above concern is the wonderful &lt;a href=&quot;http://boost.org&quot;&gt;Boost&lt;/a&gt; library suite. There is a library for almost everything you might need there, and the quality is very high. I’m already using the &lt;a href=&quot;http://www.boost.org/libs/signals2&quot;&gt;Signals2&lt;/a&gt; library for notifications (following the &lt;a href=&quot;http://en.wikipedia.org/wiki/Observer_pattern&quot;&gt;Observer pattern&lt;/a&gt;) and I plan to use the &lt;a href=&quot;http://www.boost.org/libs/serialization&quot;&gt;Serialization&lt;/a&gt; library for saving and loading games.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;What to test?&lt;/em&gt; The testing profile of my C++ code is different to my Ruby code. Thanks to strong typing, my tests fail for longer during the ‘red’ stage, so I find I have to write fewer edge cases. There are only so many ways C++ types can fit together, whereas Ruby objects can be combined in any way you like. I’m not sure I’ve hit on the right level of coverage yet: I’m not writing any tests for the more visual parts of Sol Trader yet and I’d like to consider how to.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;I’m using a classist approach to testing.&lt;/em&gt; In C++ I’ve tended to favour a &lt;a href=&quot;http://martinfowler.com/articles/mocksArentStubs.html&quot;&gt;classical approach to TDD&lt;/a&gt;: that of testing a few small classes together from the outside using the public interface. Where I’m &lt;a href=&quot;http://stackoverflow.com/a/384067/1073735&quot;&gt;coding to interfaces&lt;/a&gt; I’m able to stub out that interface by inheriting from it in my test, but I’m not doing that often. Mostly I’m following my nose and attempting to keep my classes small and my collaborations few. I don’t get all the design signals from my tests that I would like, but in my view that’s better than exposing the internals of my class to the tests: that just complicates it unnecessarily. C++ is already difficult to read.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Prototyping complex class structures in Ruby first is really useful.&lt;/em&gt; I’ve often benefited from having an existing Ruby class structure to take as my lead when writing C++. Those subsystems that I’d already written in Ruby were at least twice as fast to write. Rather than typing, or getting past the syntax, I’ve found &lt;a href=&quot;http://dannorth.net/2010/08/30/introducing-deliberate-discovery/&quot;&gt;learning to be the constraint&lt;/a&gt; in a number of coding situations. I’m not sure I’d always write in Ruby first, but in a case where I was really stuck and wanted to explore possible options, I might consider a rapid Ruby prototype over &lt;a href=&quot;http://en.wikipedia.org/wiki/Class-responsibility-collaboration_card&quot;&gt;CRC card design&lt;/a&gt;, for example.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’ll continue to post my learnings as I collect them.&lt;/p&gt;

&lt;div class=&quot;notice&quot;&gt;
  If you'd like to purchase Sol Trader you can now do so at &lt;a href=&quot;http://soltrader.net&quot;&gt;soltrader.net&lt;/a&gt;!
&lt;/div&gt;
</content></entry><entry><title>Why I switched from Ruby back to C++</title><category term='products'/><category term='ruby'/><category term='c++'/><category term='code'/><category term='sol trader'/><category term='game development'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2012/01/why-i-switched-from-ruby-back-to-c-plus-plus'/><updated>2012-01-08T20:21:41+00:00</updated><id>http://chrismdp.com/2012/01/why-i-switched-from-ruby-back-to-c-plus-plus</id><content type='html'>&lt;div class=&quot;notice&quot;&gt;
  &lt;b&gt;UPDATE:&lt;/b&gt; This post was pretty popular. I've posted a followup &lt;a href=&quot;/2012/01/switching-sol-trader-from-ruby-to-c-plus-plus-one-week-on/&quot;&gt;here&lt;/a&gt;.
&lt;/div&gt;

&lt;p&gt;After two months of Sol Trader development in Ruby, I took a difficult decision last Wednesday morning: I’ve decided to rewrite the game code from scratch in C++. Let me explain my reasons.&lt;/p&gt;

&lt;div class=&quot;notice&quot;&gt;
  If you'd like to purchase Sol Trader you can now do so at &lt;a href=&quot;http://soltrader.net&quot;&gt;soltrader.net&lt;/a&gt;!
&lt;/div&gt;

&lt;h2 id=&quot;why-i-did-it&quot;&gt;Why I did it&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Slow frames:&lt;/em&gt; When working with Ruby, I use the excellent &lt;a href=&quot;https://github.com/jlnr/gosu&quot;&gt;Gosu&lt;/a&gt; library to do all my game specific coding. This initially worked great, but occasionally I’d just get slow frames coming up. My game is timed to run at 60 frames per second, which means that each frame should take no more than 16.67ms to run. Yet every so often my profiling would come up with a frame that would take 25ms or 45ms for no discernible reason. I just couldn’t find the issue here: I turned every sub system in the game off. I disabled garbage collection. I hacked my slow frame detection code into the simplest gosu sample I could find, and they still existed. I didn’t feel like I could quite trust the stack to deliver the framerate I needed, and I hadn’t yet put in half the features I wanted to.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Object explosion when bridging to C:&lt;/em&gt; A lot of the libraries I was using were written in C, and therefore there was several thousand objects (mostly floats) being created each frame to act as a bridge between Ruby and C code. It feels like that that CPU time should be better spent in the AI improving the quality of the simulation, or on better effects, rather than loading the garbage collection with an unnecessary burden.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Ease of packaging and distribution:&lt;/em&gt; I feel like packaging is going to be a lot easier. I’m not too bothered about hiding the source code: I may well do that anyway to purchasers of the game. It’s the running on Windows I’m worried about: from my research it feels like it’s going to take some effort to push the game out on a non-Unix platform. And with a video game, releasing on Windows is a must.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Manual memory management for performance:&lt;/em&gt; The garbage collection is still too stuttery under MRI (even with Ruby 1.9.3, which is a huge improvement on what’s gone before) - it still stops the world each time. I looked at other implementations, and even considered learning all about garbage collection to help improve Ruby myself, but then realised that getting royally distracted wouldn’t help me ship a working game.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-do-i-miss-about-ruby&quot;&gt;What do I miss about Ruby?&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;I miss using RSpec hugely:&lt;/em&gt; There are ways of doing &lt;a href=&quot;http://benmabey.com/2007/09/09/bdd-your-c.html&quot;&gt;testing of C programs using RSpec&lt;/a&gt; but it doesn’t feel like I want to wrap each of my C++ classes with a SWIG interface just to check they’re working. I may still do this for some form of Cucumber testing, I’m not sure. I’m using &lt;a href=&quot;http://unittest-cpp.sourceforge.net/&quot;&gt;UnitTest++&lt;/a&gt; for my testing at the moment, which is very lightweight and good enough for my purposes.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Duck-typing:&lt;/em&gt; defining interfaces for everything is a pain in the backside, although it does force you to think more clearly about the roles of your classes.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Easy mockist testing:&lt;/em&gt; There’s no built in reflection in C++ so it also makes you have to code to interfaces if you want to do any mockist testing. I’m mostly returning to a classist style of testing with small well defined groups of classes being tested at once. It’s not a perfect system and I still have much learning to do here.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Terseness of syntax:&lt;/em&gt; There’s just a lot more characters to type, and a lot more ceremony for each class. This tempts you to larger classes and methods, which I’m resisting at the moment. I need to take the time to set up &lt;a href=&quot;http://www.vim.org/scripts/script.php?script_id=213&quot;&gt;c.vim&lt;/a&gt; exactly how I want it.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Funnily enough, I don’t miss the automatic memory management: I like having that level of control. Old habits die hard.&lt;/p&gt;

&lt;h2 id=&quot;so-how-far-have-i-got&quot;&gt;So how far have I got?&lt;/h2&gt;

&lt;p&gt;Thankfully, it’s not a complete rewrite as I’d already done a lot of thinking about the architecture and a lot of the basic classes translate directly over.  I worked really hard at the end of last week and got a lot done:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I put in &lt;a href=&quot;http://www.libsdl.org&quot;&gt;SDL&lt;/a&gt; to build the basic game framework: hopefully building on Windows will be a snap. I plan to have a working Windows build as soon as I can lay my hands on a cheap Windows 7 PC.&lt;/li&gt;
  &lt;li&gt;Basic testing using UnitTest++, with tests that are compiled and run as part of the build process.&lt;/li&gt;
  &lt;li&gt;Decoupled gameplay/physics updates from the graphical framerate using the techniques &lt;a href=&quot;http://gafferongames.com/game-physics/fix-your-timestep/&quot;&gt;here&lt;/a&gt;. I have zero &lt;a href=&quot;http://en.wikipedia.org/wiki/Temporal_anti-aliasing&quot;&gt;temporal aliasing&lt;/a&gt; bugs right now, which makes for a super smooth 300+ FPS graphic loop with a fixed 60FPS physics loop.&lt;/li&gt;
  &lt;li&gt;Re-implemented physics using &lt;a href=&quot;http://chipmunk-physics.net/&quot;&gt;Chipmunk&lt;/a&gt;, the same library I used in Ruby, which made it very easy to switch over.&lt;/li&gt;
  &lt;li&gt;Put in a brand new and much improved parallax-scrolled starfield.&lt;/li&gt;
  &lt;li&gt;Added a basic controllable spacecraft, planets and jumpgates back in: the player can fly around as before and collide successfully with other objects.&lt;/li&gt;
  &lt;li&gt;A simple particle system so the spacecraft give off exhaust smoke, and the jumpgates emit spooky purple mist.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Even with using OpenGL &lt;a href=&quot;http://en.wikibooks.org/wiki/OpenGL_Programming/GLStart/Tut3#Immediate_Mode&quot;&gt;immediate mode&lt;/a&gt; (this is a bad thing) and rendering 10000 stars each frame (very inefficient), and a throwing bunch of particles onscreen, I’m still getting 300+ FPS on my 2009 MacbookPro and only using 30MB of memory. That’s satisfying.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;UPDATE:&lt;/em&gt; By (very) popular demand, here’s a screenshot. Be aware this is &lt;em&gt;three days work only&lt;/em&gt;, and obviously not final artwork:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/files/sol-trader-1.png&quot;&gt;&lt;img src=&quot;/files/sol-trader-1.png&quot; width=&quot;500&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next I plan to add back in jumping between different planetary orbits, and then work on a very basic ‘person-level view’, so that you can get out of your ship and walk around.&lt;/p&gt;

&lt;h2 id=&quot;was-it-the-right-decision&quot;&gt;Was it the right decision?&lt;/h2&gt;

&lt;p&gt;I’ll know at the end of the project :) My feeling is though that it was the correct thing to do. Being really close to the metal will make it much easier to implement some of the really complex AI stuff I’d like to do later on. I already know C++ very well, and estimate it’ll only delay me a week or two if I work hard. If I like, I can always bundle my project as a C++ library and control it from Ruby later on, but it’s harder to go in the other direction.&lt;/p&gt;

&lt;p&gt;What do you think? Did I make the right call?&lt;/p&gt;

&lt;div class=&quot;notice&quot;&gt;
  If you'd like to purchase Sol Trader you can now do so at &lt;a href=&quot;http://soltrader.net&quot;&gt;soltrader.net&lt;/a&gt;!
&lt;/div&gt;
</content></entry><entry><title>Introducing Sol Trader</title><category term='products'/><category term='code'/><category term='life'/><category term='sol trader'/><category term='game development'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2012/01/introducing-sol-trader'/><updated>2012-01-03T14:53:53+00:00</updated><id>http://chrismdp.com/2012/01/introducing-sol-trader</id><content type='html'>&lt;p&gt;Happy new year, everybody! It’s been a little while in coming, but I’ve finally got to the point where I want to announce the project I’ve been working on privately for the last few months. I’m heading after a dream, and I want to share it with you.&lt;/p&gt;

&lt;p&gt;But first some background.&lt;/p&gt;

&lt;h2 id=&quot;i-love-designing-games&quot;&gt;I love designing games&lt;/h2&gt;

&lt;p&gt;I started my career in software development working on PC games back at the turn of the millennium. I worked for a fantastic little company called &lt;a href=&quot;http://en.wikipedia.org/wiki/Elixir_Studios&quot;&gt;Elixir Studios&lt;/a&gt;, which sadly closed in 2005. I’ll never forget them: they gave me my first break into software development and I studied my craft under some fantastic mentors, notably &lt;a href=&quot;http://www.linkedin.com/in/achimstremplat&quot;&gt;Achim Stremplat&lt;/a&gt; and &lt;a href=&quot;http://www.linkedin.com/profile/view?id=3207719&amp;amp;locale=en_US&amp;amp;trk=tyah&quot;&gt;Jamie Doornbos&lt;/a&gt;. These guys taught me a love of good code, and a love of doing things right.&lt;/p&gt;

&lt;p&gt;On leaving Elixir, I moved away from the games industry and into web programming, leaving C++ and Microsoft Visual Studio far behind me. I spent a few years shifting through a number of languages (Perl, PHP, Java, Python) before settling on Ruby as my interpreted language of choice. I’ve never lost that love for building and designing games, though, and I’ve kept my hand in over the years. I’ve always been more interested in designing games, rather than playing them: as a kid I was always the Dungeon Master, or the guy &lt;a href=&quot;http://en.wikipedia.org/wiki/HeroQuest&quot;&gt;designing the adventure&lt;/a&gt;. As an 11 year old I used to write games in BASIC on BBC Micros and sell them to my friends for 10p each. I guess you could say it’s built in to my psyche.&lt;/p&gt;

&lt;h2 id=&quot;sol-trader&quot;&gt;Sol Trader&lt;/h2&gt;

&lt;p&gt;Another realisation: one of the things that I’ve learnt in the last year is that I’d love to spend more time working on my own products. I have done this in a half-hearted fashion over the years, but my motivation tends to die off when the initial rush of enthusiasm fades. To help myself see it through to the end, I’ve decided to try to realise a long held dream. Alongside working with clients this year, I’m going to spend some of my remaining time building and releasing my first commercial game.&lt;/p&gt;

&lt;p&gt;I’m therefore very pleased to announce &lt;a href=&quot;http://soltrader.net&quot;&gt;Sol Trader&lt;/a&gt; - an open-ended space trading and exploration game set in our solar system in the near future.&lt;/p&gt;

&lt;p&gt;The game itself has been in development since the end of October last year: it started as a side project with my kids (we originally named it Spacestuff) but has blossomed and grown into something much more. There’s some info &lt;a href=&quot;http://soltrader.net&quot;&gt;on the website&lt;/a&gt; I’ve been putting together, but more will be forthcoming shortly. I’m aware that I’ve not got any screenshots yet, but once the first artwork goes in I’ll put some up. It’s already playable: my kids are already having great fun travelling between Earth and Venus via jump gates and landing on the planets.&lt;/p&gt;

&lt;p&gt;When I’m ready for beta testers, I’ll put an announcement out on the mailing list: &lt;a href=&quot;http://soltrader.net&quot;&gt;sign up at soltrader.net&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;motivate-me&quot;&gt;Motivate me!&lt;/h2&gt;

&lt;p&gt;One of the things I need to work on is the ability to complete my own projects. Working on a game is a great motivator, but I need help to keep my motivation up! I’d be very grateful if you’d drop me a note asking me how I’m getting on if you don’t hear from me for a while. Write a comment on a blog post, retweet something, sign up to get emails, ping me &lt;a href=&quot;http://twitter.com/chrismdp&quot;&gt;on twitter&lt;/a&gt;: every little bit of feedback I get (even if critical) helps to motivate me to work on it.&lt;/p&gt;

&lt;p&gt;More on the game in future posts, including some thoughts on architecture, language choice and whether or how to release the source code. Crafting this codebase has already proved a treasure trove of interesting thoughts on code quality and testing, which I plan to share on this blog over time. I’m also aware that I’m breaking a few “indy game developer” rules: I’ll share my opinions about that, too.&lt;/p&gt;

&lt;p&gt;Will I finish? Will it be a success? I’ve no idea, but I plan to learn as much as possible from doing it. At the very least, I’m shooting after a dream, and I’ll be pleased to finish 2012 having attempted it, whatever the outcome.&lt;/p&gt;

&lt;p&gt;Have you got a &lt;a href=&quot;http://www.youtube.com/watch?v=_Klf8uWkvaw&quot;&gt;half-baked dream&lt;/a&gt; you’re going to turn into reality this year? If not, why not?&lt;/p&gt;

</content></entry></feed>
