---
layout: nil
---
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title>Chris Parsons: posts tagged team</title>

  <link href="http://chrismdp.com/"/>
  <updated>2012-10-04T07:49:57+01:00</updated>
  <id>http://chrismdp.com/tag/team</id>
  <author>
    <name>Chris Parsons</name>
    <email>chrismdp@gmail.com</email>
  </author>
<entry><title>Delegated tasks are a team anti-pattern</title><category term='team'/><category term='anti-pattern'/><category term='process'/><category term='management'/><category term='leadership'/><category term='productivity'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2012/10/delegated-tasks-are-a-team-anti-pattern'/><updated>2012-10-04T07:49:57+01:00</updated><id>http://chrismdp.com/2012/10/delegated-tasks-are-a-team-anti-pattern</id><content type='html'>&lt;p&gt;“Jane, I’d like you to phone up the recruiter, and tell them we need a new agency person. Don’t use Jim from Acme Recruitment again, you didn’t get very far with him last time. Make sure you book whoever it is in for a week to work with us as a trial, like last time. That worked well.”&lt;/p&gt;

&lt;p&gt;“Jane, can you find us a great developer for the new website we mentioned in standup last week? Let me know if you need help.”&lt;/p&gt;

&lt;p&gt;Which is better?&lt;/p&gt;

&lt;h2 id=&quot;goals-not-tasks&quot;&gt;Goals, not tasks&lt;/h2&gt;

&lt;p&gt;How about we give our team goals, not tasks? Let them shoot for something, and work out their own tasks, rather than giving them a simple list of things to do. Goals allow people to apply their own creativity and their own flair to a solution, and the end result will be stamped with their individuality.&lt;/p&gt;

&lt;p&gt;When learning a new skill, people need direction and tasks to follow. &lt;a href=&quot;http://blog.mattwynne.net&quot;&gt;Matt Wynne&lt;/a&gt; recently &lt;a href=&quot;http://blog.mattwynne.net/2012/09/25/breaking-out-of-the-shu/&quot;&gt;re-iterated&lt;/a&gt; the classic Su-Ha-Ri model of learning, where we start with very clear forms to follow, then break those forms as we try new things, then advanced to a place where we no longer need the forms at all. At first, we need to work closely with people, and &lt;em&gt;show them the tasks we perform to get something done.&lt;/em&gt; Note that this is quite different to giving people a long list of tasks to complete to ‘learn something.’&lt;/p&gt;

&lt;p&gt;Whenever we give something away, there’s a risk that it won’t be done in quite the way that we would like. The simple fact is: no, it won’t. But assuming we’ve not overstretched someone, there’s a good chance they’ll get the job done at least 80% as well as we could have. And good people will cope with being stretched much further than we think.&lt;/p&gt;

&lt;h2 id=&quot;theres-delegation-then-theres-abdication&quot;&gt;There’s delegation, then there’s abdication&lt;/h2&gt;

&lt;p&gt;When we take goal setting too far, we just tend to stop giving people goals altogether and let them figure out their own jobs. This is dangerous: the best people don’t need managing, but they do need leading. Our role as a leader is to paint an exciting vision of the future, and then let our team figure out how to get there.&lt;/p&gt;

&lt;h2 id=&quot;micromanagement-has-many-levels&quot;&gt;Micromanagement has many levels&lt;/h2&gt;

&lt;p&gt;It’s quite possible to micro-manage without realising it. We might think we’re not micro-managing because we’re not telling people &lt;em&gt;exactly&lt;/em&gt; how to do something. However if we’re leaving little room for doubt in our own minds, and creativity in theirs, then our team will feel less able to apply their own skills and talents to the problem. They’ll get up feeling discouraged and insignificant.&lt;/p&gt;

&lt;p&gt;Ultimately it comes down to trust, and fear. How much do we trust our people to get the job done? How much do we fear losing control?&lt;/p&gt;

&lt;p&gt;The first step to fighting a task-oriented tendency is to realise it’s probably not a problem with our team members, but with us.&lt;/p&gt;
</content></entry><entry><title>Job titles are a team anti-pattern</title><category term='lean'/><category term='agile'/><category term='team'/><category term='anti-pattern'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2012/09/job-titles-team-anti-pattern'/><updated>2012-09-25T20:48:24+01:00</updated><id>http://chrismdp.com/2012/09/job-titles-team-anti-pattern</id><content type='html'>&lt;p&gt;“We have two designers, two front-end developers, 2 back-end developers, and a tester.”&lt;/p&gt;

&lt;p&gt;“Allie and Jim tend to lay out most of the pages, with help from the others. Joe, Alice, Bob and Alan tend to write most of the code, with Bob and Alan working mainly on the server side of things. Darren makes sure our work matches up to what’s expected.”&lt;/p&gt;

&lt;p&gt;Which is better?&lt;/p&gt;

&lt;h2 id=&quot;job-titles-are-labels&quot;&gt;Job titles are labels&lt;/h2&gt;

&lt;p&gt;Labelling people with job titles as shorthand is one thing, but if we’re not careful our use of them can be dysfunctional:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Labels limit people’s potential.&lt;/em&gt; Our labels will limit what people will work on: they’ll subconciously start to stick to what their title says. This will happen even if they’re good people: it’s human nature to react to the culture which our team creates.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;People hide behind the label.&lt;/em&gt; “That’s designer work, that’s not what I’m good at.” This gets worse when we get more specific: “I’m a front end developer: I don’t write Ruby.” This stops techniques like Kanban working effectively as people are less likely to help each other, and creates silos of knowledge in the team.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Labels reduce people to resources.&lt;/em&gt; “We need 4.2 developer days for this project, with 2.4 designer days per developer day.” Labels are interchangeable: people aren’t. Some developers are orders of magnitude more productive than others, for example. By homogenising the team, we’re extracting the soul from the company: we might as well be selling crude oil, not people’s expertise.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’ve recently tried to stop using labels to describe myself: see &lt;a href=&quot;http://twitter.com/chrismdp&quot;&gt;my twitter bio&lt;/a&gt; for example. It’s been an interesting exercise, and I’d recommend it.&lt;/p&gt;

&lt;h2 id=&quot;selling-services-by-team-not-label&quot;&gt;Selling services by team, not label&lt;/h2&gt;

&lt;p&gt;One problem we run into is when we run companies which sell client services by the hour. It’s easy to put together a rate card for different job titles, but this exacerbates the label problem and embeds it into the economics. I prefer the method of selling whole team-weeks to the client, rather than individual developers: “This crack team of people will set you back £10,000 per week”, for example.&lt;/p&gt;

&lt;p&gt;Remember: the team environment is perfectly designed to achieve the result we’re currently getting. How are our job titles and labels affecting the way our team works today?&lt;/p&gt;

&lt;div class=&quot;notice&quot; style=&quot;display: inline-block&quot;&gt;
  &lt;b&gt;UPDATE:&lt;/b&gt; Thanks to &lt;a href=&quot;http://twitter.com/adrianh&quot;&gt;Adrian Howard&lt;/a&gt; and &lt;a href=&quot;https://agilarium.wikispaces.com/Fabrice+Aimetti&quot;&gt;Fabrice Aimetti&lt;/a&gt;, this post has been &lt;a href=&quot;https://agilarium.wikispaces.com/Les+intitul%C3%A9s+de+poste+sont+des+antipatterns+de+l%27%C3%A9quipe&quot;&gt;translated into French here.&lt;/a&gt;
&lt;/div&gt;

</content></entry><entry><title>Your code is a liability</title><category term='code'/><category term='craftsmanship'/><category term='lean'/><category term='agile'/><category term='team'/><category term='liability'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2012/09/code-is-a-liability'/><updated>2012-09-24T20:48:13+01:00</updated><id>http://chrismdp.com/2012/09/code-is-a-liability</id><content type='html'>&lt;p&gt;Your code is a liability.&lt;/p&gt;

&lt;p&gt;Every line you write means more for someone else to read, digest and understand. Each complex ‘clever’ regular expression represents another few minutes per team member trying to interpret what you wrote and why you wrote it. Every line you add limits your project’s responsiveness to change.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Only the feature that your code provides is an asset.&lt;/em&gt; The more that we reduce the amount of code we write, the lighter weight and more agile our software. The easier it is to understand, the less of a intellectual drag it is on the team.&lt;/p&gt;

&lt;p&gt;There used to be a lot of talk about getting into the “programmer zone”: that place of heightened focus where time rushes by as if a blur, and the number of lines of output a programmer produces per hour skyrockets… except that lines per hour was never the best measure of coder output to begin with. All that coder is doing is dragging down the project faster. Let’s hope they’re adding useful features during that process!&lt;/p&gt;

&lt;p&gt;It’s my belief that the best code is written in conversation, not in the “zone.” A team discussion about the architecture and the arrangement of the different concepts into the simplest and lightest code structure we can fathom will always improve on our own ideas, when we implement them in isolation at a ridiculous rate.&lt;/p&gt;

&lt;p&gt;Lightweight, lean coding like this sets our features free from the drag of the code and allows them to soar: responsive to change requests, and easily debugged as the code isn’t difficult to understand.&lt;/p&gt;
</content></entry><entry><title>Cucumber isn't a testing tool</title><category term='cucumber'/><category term='business'/><category term='bdd'/><category term='team'/><category term='testing'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2012/09/cucumber-isnt-a-testing-tool'/><updated>2012-09-19T17:41:22+01:00</updated><id>http://chrismdp.com/2012/09/cucumber-isnt-a-testing-tool</id><content type='html'>&lt;p&gt;This is your periodic reminder that &lt;a href=&quot;/tag/cucumber&quot;&gt;Cucumber&lt;/a&gt; isn’t a testing tool.&lt;/p&gt;

&lt;p&gt;Here’s what it actually is:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Cucumber is a great communication tool.&lt;/em&gt; The great thing about collaborating on a cucumber feature is that the whole team get to stand in the same room and take part in the discussion. Everyone gets to argue about what should go in, what to keep out, and to help capture all the edge cases. The forming of the feature file facilitates that communication, with a great side effect of being able to check the finished feature still works at a later time. Cucumber excels as a communication tool, first and foremost: it’s only incidentally a testing tool.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Cucumber captures conversations.&lt;/em&gt; A feature file is a &lt;a href=&quot;/2010/02/the-story-card-is-not-the-story&quot;&gt;bookmark&lt;/a&gt; for the real feature: &lt;em&gt;the shared understanding of what needs to be done&lt;/em&gt; that exists in the minds of the team. When the arm-waving and the arguments are done, a well written feature will expertly capture the essence of the conversation - the &lt;a href=&quot;http://dannorth.net/whats-in-a-story&quot;&gt;semi-formal nature&lt;/a&gt; of a feature acts as a checklist to ensure that we’ve talked about everything we need to.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Cucumber is for the team, not the developers.&lt;/em&gt; Developers are often the gate-keepers of the feature files: if we’re not careful we tend to write them, update them and run them without anyone else ever seeing them. We moan about how much more difficult features are to maintain than regular tests, whilst all the time we’re missing the point: the features aren’t for us, they’re for those who can’t read code!&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more on this, &lt;a href=&quot;http://video2012.scotlandonrails.com/D1_LB_03-Ruby1280_b.mp4&quot;&gt;watch this video&lt;/a&gt; (&lt;a href=&quot;https://speakerdeck.com/u/chrismdp/p/cucumber-its-about-talking-not-testing&quot;&gt;slides&lt;/a&gt;) from Scottish Ruby Conference where I explore these points in more depth. Remember that at its heart, Cucumber simply translates plain language into executing code. Its power lies in its ability to express code in plain language. Let’s not reduce it to a mere testing tool, without letting the stakeholders see the features. If you’re doing that, you’re better off using RSpec.&lt;/p&gt;
</content></entry><entry><title>Task assignment is a team anti-pattern</title><category term='process'/><category term='productivity'/><category term='pairing'/><category term='team'/><category term='anti-pattern'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2012/09/task-assignment-is-a-team-anti-pattern'/><updated>2012-09-14T14:06:40+01:00</updated><id>http://chrismdp.com/2012/09/task-assignment-is-a-team-anti-pattern</id><content type='html'>&lt;p&gt;&lt;i&gt;&quot;The way a team plays as a whole determines its success. You may have the greatest bunch of individual stars in the world, but if they don't play together, the club won't be worth a dime.&quot;&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;– &lt;a href=&quot;http://en.wikipedia.org/wiki/Babe_Ruth&quot;&gt;Babe Ruth&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Assigning tasks to individuals might feel like the most natural thing in the world, but in reality, when you are trying to create a highly functioning &lt;a href=&quot;/tag/team&quot;&gt;team&lt;/a&gt;, it might be doing more harm than good. This is true even when tasks are self-assigned by team members, and certainly true when tasks are imposed upon individuals by managers. Here’s why.&lt;/p&gt;

&lt;p&gt;Having one individual responsible for a task &lt;em&gt;takes responsibility away from the team&lt;/em&gt; and instead focuses on the individual. This can be damaging in a number of ways, not least that the individual is under more pressure to deliver. Short termist management might think this encourages productivity, but the internal pressure this generates can be a short cut to burnout.  The focus needs to be on collective responsibility: it’s the responsibility of the &lt;i&gt;team&lt;/i&gt; to release something, not the responsibility of the individual.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This issue is compounded if the team’s work in progress limit is too high.&lt;/em&gt; If there are nine team members, and nine things currently in progress, then in the best case each person will have nine things to do, and in the worst case one person will have all nine things to do and the other eight people will be sitting around waiting for them to finish, putting enormous pressure on those who are the bottleneck. The more items of work that are currently in progress, the more than a focus on assignment will bite you.&lt;/p&gt;

&lt;p&gt;Assignment &lt;em&gt;promotes a command and control attitude.&lt;/em&gt; Sometimes, each member of a “team” is actually being managed individually and has their own stream of work. This can produce output in certain cases, but the individuals being managed are not a team: they’re a collection of individuals who might happen to sit together.&lt;/p&gt;

&lt;p&gt;Individual assignment can &lt;em&gt;create silos of information.&lt;/em&gt; If one person is responsible for a task, and everyone has their own tasks or types of work, then it’s harder to work as a team: the knowledge is held only with a few people, rather than across everyone. &lt;a href=&quot;/tag/pairing&quot;&gt;Pairing&lt;/a&gt; dramatically helps break these silos down.&lt;/p&gt;

&lt;p&gt;Assignment can also give rise to the &lt;em&gt;hero anti-pattern:&lt;/em&gt; where a few people are responsibility for the success of the entire team, and they end up pulling an all-nighter just to get the release out the door. The hero culture might seem appealing to short-sighted managers, but when eventually the hero inevitably fails to deliver, hero culture quickly turns to &lt;em&gt;blame culture.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-to-shift-this-culture&quot;&gt;How to shift this culture?&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Reduce your team’s work in progress limit.&lt;/em&gt; Insist they don’t start anything else until the team finishes what’s in progress, and that they go to pair with those who are still working on tasks, even if it’s &lt;a href=&quot;/2010/01/pairing-works-for-everything&quot;&gt;not their normal discipline&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Stop giving people things to do.&lt;/em&gt; At the very least, ensure that the team are choosing their own tasks from a list rather than being managed individually.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Stop tracking assignment.&lt;/em&gt; Don’t record on the task who is working on it. Simply track what’s being worked on by talking about it each standup meeting.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Avoid the trap of buck-passing.&lt;/em&gt; If you’re not careful, giving a weaker team collective responsibility means that they pass the buck. The thinking goes: &lt;i&gt;“if I’m not individually responsible then I’m not responsible at all.”&lt;/i&gt; The antidote is &lt;em&gt;team accountability:&lt;/em&gt; &lt;a href=&quot;/2011/04/the-team-is-the-atomic-unit&quot;&gt;praise the entire team for their successes&lt;/a&gt; and ensure they all investigate the reasons for failure together. This includes the product owner and the user experience people - they are all part of the team.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Does task assignment cause problems for you? What silos could be broken down by having more of a team assignment focus?&lt;/p&gt;
</content></entry><entry><title>On Office Politics</title><category term='team'/><category term='business'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2011/05/on-office-politics'/><updated>2011-05-04T14:32:00+01:00</updated><id>http://chrismdp.com/2011/05/on-office-politics</id><content type='html'>&lt;p&gt;&lt;i&gt;&quot;In politics, as on the sickbed, people toss from side to side, thinking they will be more comfortable.&quot;&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;– &lt;a href=&quot;http://en.wikipedia.org/wiki/Johann_Wolfgang_von_Goethe&quot;&gt;Johann Wolfgang von Goethe&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Office Politics starts to grow when people are not sure they are going to get what they want.&lt;/p&gt;

&lt;p&gt;In other words: &lt;em&gt;the amount of Office Politics in your team is in inverse proportion to how much you let them reveal their own greatness.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you frustrate your team, they will find another way of achieving their own ends. They’ll start discussing ways to “make you think it was your idea” (shudder) just to get things done. They will align themselves with the people they think have the greatest chance of making what they want happen. Factions start forming, with people flitting between them as things appear to change. Perception begins to rule people’s decisions: (not “is this the best thing to do?” but “how will this look?”)&lt;/p&gt;

&lt;p&gt;If however you spend your time ensuring that everyone is aligned around a common vision, communicating clearly and uniformly, and promoting great discussion and debate, the details will fall into place. Peter Drucker calls this “setting your team up to win”: providing them with everything they need to fulfil the high level tasks you set them.&lt;/p&gt;

&lt;p&gt;For example, you ask your team to always have a build with passing tests, with well factored code. If you then load them with an unreasonable amount of work, or try and dictate the tools and processes they might use, they will feel frustrated and stop telling you what’s going on. You’ll lose trust and Politics, like weeds, will grow from the cracks that start appearing.&lt;/p&gt;

&lt;p&gt;Instead, ask them what they need, and how much time they need to do it. Set them up to win by protecting them from stakeholders and allow them to work out the details. They’ll respond in kind by working with you, not against you.&lt;/p&gt;

&lt;p&gt;It’s hard to eradicate Politics completely, but it’s easy to start making it less necessary. Remember: your team is designed perfectly to produce the result you’re currently getting.&lt;/p&gt;
</content></entry><entry><title>The team is the atomic unit of success</title><category term='business'/><category term='team'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2011/04/the-team-is-the-atomic-unit'/><updated>2011-04-05T16:14:49+01:00</updated><id>http://chrismdp.com/2011/04/the-team-is-the-atomic-unit</id><content type='html'>&lt;p&gt;When something goes wrong, it’s not “his fault”, it’s “our fault”.&lt;/p&gt;

&lt;p&gt;Unless we’re in the unenviable position of hiring or firing team members, then we don’t have to worry about individual team performance. When I asked how many people at the &lt;a href=&quot;http://lanyrd.com/2011/how-can-craftsmanship-move-the-industry-forwards/&quot;&gt;recent software craftsmanship gathering&lt;/a&gt; were in this position, less than 10% of the people there put their hands up. Chances are it isn’t our job to worry about any individual’s performance except our own.&lt;/p&gt;

&lt;p&gt;The team is the atomic unit of success or failure. When individuals screwed up at Eden, I used to say that I wasn’t interested in whether they’d made a mistake, as mistakes are guaranteed to happen. What I’m more interested in is what caused the mistake to occur, and that they used the experience to improve the process or their own practice.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Your team or business is perfectly designed to achieve the result you are currently getting.&lt;/em&gt; I’ve heard of people being fired on the spot for making mistakes. What a waste of all the learning they’ve just experienced.&lt;/p&gt;

&lt;p&gt;So next time Bob breaks the build (again), let’s have a look at &lt;em&gt;why.&lt;/em&gt; Is it because he’s new to the team and no-one has told him how important a passing build is? Is it because the clients put him under a lot of pressure and he didn’t feel that he had time to run the tests? If it’s because he’s forgetful and careless, how do we mitigate for that weakness? For example, would encouraging Bob to pair program help?&lt;/p&gt;

&lt;p&gt;Even if it does appear to come down to an individual issue, there are still process improvements to consider. Are we hiring slowly enough? Are we checking properly for a culture fit? Are we involving the team enough in pre-hire decisions?&lt;/p&gt;

&lt;p&gt;Each of these questions facilitates a team culture change: Bob didn’t screw up, the team screwed up by not having quite the right culture or process, and the team will fix it.&lt;/p&gt;

&lt;p&gt;Clearly there are some cases where individuals need to be dealt with personally by those responsible, but it’s less often than we think and normally not our problem. Let’s not make it our problem and further destabilise our teams through a damaging witch hunt.&lt;/p&gt;
</content></entry><entry><title>Truly indispensable people</title><category term='productivity'/><category term='team'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2011/03/truly-indispensable-people'/><updated>2011-03-29T11:42:03+01:00</updated><id>http://chrismdp.com/2011/03/truly-indispensable-people</id><content type='html'>&lt;p&gt;&lt;i&gt;&quot;Being a part of success is more important than being personally indispensable.&quot;&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;– &lt;a href=&quot;http://en.wikipedia.org/wiki/Pat_Riley&quot;&gt;Pat Riley&lt;/a&gt;, NBA Coach&lt;/p&gt;

&lt;p&gt;There’s this old adage that the best people make themselves indispensable to a team. Whilst I can understand the sentiment, it could do with some clarification.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://twitter.com/jasongorman&quot;&gt;Jason Gorman&lt;/a&gt; talks a lot about &lt;a href=&quot;http://parlezuml.com/blog/?postid=147&quot;&gt;mortgage-driven development&lt;/a&gt;: the idea that the best career move you can make on a software project is to make your self as “indispensable” as possible by making your code as complicated as possible. That way you’ll hang around longer, and be more likely to pay off your mortgage.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;In contrast, those who are truly indispensable are those that are able to make themselves dispensable.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;They’re the ones who don’t just catalyse change within an organisation, they see it through and make sure the change will continue without them. They train up new leaders to lead their teams, and then hand their teams on to them. They do themselves out of a job at every opportunity.&lt;/p&gt;

&lt;p&gt;If you lost one of these people from your organisation, your company would not immediately fall apart, but you’ll have lost a little piece of its soul: part of its ability to grow and change over time. That quality is an essential part of what makes an organisation alive.&lt;/p&gt;

&lt;p&gt;Identify the truly indispensable, encourage them, and hang on to them: they will replicate everything that’s good in your organisation.&lt;/p&gt;
</content></entry></feed>
