---
layout: nil
---
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title>Chris Parsons: posts tagged products</title>

  <link href="http://chrismdp.com/"/>
  <updated>2012-09-21T13:25:13+01:00</updated>
  <id>http://chrismdp.com/tag/products</id>
  <author>
    <name>Chris Parsons</name>
    <email>chrismdp@gmail.com</email>
  </author>
<entry><title>Introducing Morning Pages</title><category term='life'/><category term='writing'/><category term='personal'/><category term='products'/><category term='productivity'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2012/09/introducing-morning-pages'/><updated>2012-09-21T13:25:13+01:00</updated><id>http://chrismdp.com/2012/09/introducing-morning-pages</id><content type='html'>&lt;p&gt;I’ve &lt;a href=&quot;/2010/07/seven-hundred-and-fifty-words&quot;&gt;written before&lt;/a&gt; about the value of Morning Pages - a way of clearing your head in the mornings by writing down three pages on everything you’re thinking and feeling.&lt;/p&gt;

&lt;p&gt;In order to write my words, I used &lt;a href=&quot;http://750words.com&quot;&gt;750words.com&lt;/a&gt; for a number of years, but I’ve become a little disenfranchised with having private writings stored permanently in the cloud. I also write fastest in vim, which means writing into a website slows me down. What I really wanted was to store my words privately on my laptop, and yet also include a public incentive system: this is what made 750words.com so effective at keeping me motivated.&lt;/p&gt;

&lt;h2 id=&quot;gem-install-morning-pages&quot;&gt;gem install morning-pages&lt;/h2&gt;

&lt;p&gt;The result is the morning-pages gem. The gem has been available for a while, but starting today it’ll record your progress on a central website. It only ever uploads aggregate statistics: the code is &lt;a href=&quot;http://github.com/chrismdp/morning-pages&quot;&gt;open source&lt;/a&gt; so you can check it out for yourself to make sure.&lt;/p&gt;

&lt;p&gt;For instructions, see the &lt;a href=&quot;http://morning-pages.me&quot;&gt;accompanying website&lt;/a&gt;. There aren’t any aggregate stats yet, but in future you’ll be able to see any word streaks, what times of day you are most likely to write, etc. I’ve got some nice ideas for visualisation which I’ll add as time permits: if you’re impatient you can always &lt;a href=&quot;http://github.com/chrismdp/morning-pages.me&quot;&gt;fork the website code&lt;/a&gt; and create whatever stats you want!&lt;/p&gt;

&lt;h2 id=&quot;what-do-i-use-my-words-for&quot;&gt;What do I use my words for?&lt;/h2&gt;

&lt;p&gt;Writing three pages is still something I try and do each day: I had a 170 day streak going at one point. I use my words to plan and order my day, to negotiate with myself about what I can realistically achieve, and &lt;a href=&quot;http://en.wikipedia.org/wiki/Christian_meditation&quot;&gt;for prayer and meditation&lt;/a&gt; - I’ve found I pray best at the point of a metaphorical pen.&lt;/p&gt;

&lt;p&gt;Do you try to write each day? What do you use your words for?&lt;/p&gt;
</content></entry><entry><title>Showroom software</title><category term='products'/><category term='business'/><category term='lean'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2012/09/showroom-software'/><updated>2012-09-17T20:34:12+01:00</updated><id>http://chrismdp.com/2012/09/showroom-software</id><content type='html'>&lt;p&gt;I went to IKEA recently to buy some more furniture for my office. Whilst wandering around trying to find the desk I wanted, I happened across a one-bedroom showroom apartment. The designers of this apartment had spent a lot of time and effort getting the most out of very limited space: so much so that they had fitted this entire home, including shower room, kitchenette, dining table, lounge with sofa bed and wardrobe storage into only &lt;i&gt;25 square metres.&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;Think about that for a second. That’s five metres by five metres. It’s an extroadinarily small space to fit in a whole home, but they had managed it. What’s more, it looked great! Everything was set up perfectly: you felt as if you could just move in there and then.&lt;/p&gt;

&lt;h2 id=&quot;the-problem&quot;&gt;The problem&lt;/h2&gt;

&lt;p&gt;There’s a problem with this kind of apartment though: &lt;em&gt;what would happen if you actually tried to recreate that exact layout in your own 25 square metre apartment?&lt;/em&gt; If you went around the IKEA version and painstakingly wrote down all of the different pieces of furniture you’d need, loaded them into a van and took them home, you’d invariably find they wouldn’t fit. You’d want to make some small changes here and there, which would unavoidably have knock-on effects in such a small space. You’d end up taking half of the furniture back as you couldn’t use it. Uneven walls, annoyingly placed sockets and irksome light fittings would make a mess of the finely crafted design.&lt;/p&gt;

&lt;p&gt;So what’s the best way to fill a real apartment of this size? &lt;em&gt;Plan the furniture based around the exact contours of the apartment,&lt;/em&gt; rather than trying to fit the apartment round the furniture. Better still, get in someone who knows what they’re doing to help you. Buy as little furniture as possible and work with the space you have.&lt;/p&gt;

&lt;h2 id=&quot;off-the-shelf-software-is-a-showroom&quot;&gt;“Off the shelf” software is a showroom&lt;/h2&gt;

&lt;p&gt;Buying software is a little like this. Whether you’re a startup or an existing business, it’s tempting to buy an off the shelf solution to solve all your problems. It seems so easy, and the vendors often promise so much. It’s like the beautiful showroom apartment: it’s affordable, it all fits together so beautifully, and you can start using it straight away.&lt;/p&gt;

&lt;p&gt;This can work when the problem is well defined, you have a truly blank slate, or the software is just one piece of the puzzle, but most businesses are rougher round the edges that off the shelf software would like. The solution you’ve just purchased is never a solution to your specific problem: it’s a general solution to the problem the vendor thought you would have a few months or years ago when they thought up the product. Inevitably the solution is for a slightly different problem to the one you have now. In the case of startups, which don’t even know what the problem they’re trying to solve is yet, they can be constrained by off the shelf software extremely quickly.&lt;/p&gt;

&lt;p&gt;What can end up happening is one of two things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;You fit your business around the software.&lt;/em&gt; Your business processes become trapped in the workings of the software you’re using, making your business less able to respond to change in the market. This is a dangerous situation for any business to be in.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;You shoehorn the software into your business.&lt;/em&gt; You hire the vendor to customise the software for you, or you attempt to do it yourself. With a well written off the shelf system this may have some mileage. However, the danger is that the total cost ends up being a lot higher than you bargained for, and the system becomes a grostesque elephantine mess which only just hangs together.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;a-potential-alternative&quot;&gt;A potential alternative&lt;/h2&gt;

&lt;p&gt;What’s the alternative? You could investigate building something that fits your business exactly. Bespoke software isn’t always the best solution: it’s always a trade off. However, I’d suggest always getting advice from a bespoke software developer before spending large amounts on any off the shelf system. A great developer should always help you spend as little as possible to get what you want, so your total cost might be less than you think.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The same is true for startups.&lt;/em&gt; If your budget is really constrained, how about building something really small from scratch, pulling together as much existing code as possible? Don’t reinvent the wheel - to extend the showroom analogy, that would be like building your own furniture from raw materials - but don’t assume an off the shelf piece of software will run 90% of your business for you just the way you want it to.&lt;/p&gt;

&lt;p&gt;So for any moderately complex business problem, be careful of off-the-shelf one-size-fits-all “it’ll do everything you want for a fraction of the price!” software products. Next time you make a decision like this, get some advice, and ask yourself whether you’re purchasing the beautiful showroom apartment, and then trying to shoehorn it in to a place that it’s never going to fit.&lt;/p&gt;
</content></entry><entry><title>Attempting validated learning with Sol Trader</title><category term='sol trader'/><category term='lean startup'/><category term='learning'/><category term='products'/><category term='agile'/><category term='lean'/><category term='business'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2012/05/attempting-validated-learning-with-sol-trader'/><updated>2012-05-14T10:18:47+01:00</updated><id>http://chrismdp.com/2012/05/attempting-validated-learning-with-sol-trader</id><content type='html'>&lt;div class=&quot;notice&quot;&gt;
  If you'd like to purchase Sol Trader you can do so at &lt;a href=&quot;http://soltrader.net&quot;&gt;soltrader.net&lt;/a&gt;.
&lt;/div&gt;

&lt;p&gt;Sol Trader has been out just about two weeks now. It’s been great fun to actually launch the product and gain real feedback from people.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I’ve sold about forty copies.&lt;/em&gt; It’s a start, and a really good one. Thank you to those of you who have already purchased the game, and for all the feedback and encouraging emails I’ve received. I’ve learnt a huge amount already and it’s really helped me guide the way ahead.&lt;/p&gt;

&lt;p&gt;The big question is: what’s next? How do I go from these humble yet encouraging beginnings to turning this game into something truly wonderful?&lt;/p&gt;

&lt;h2 id=&quot;validated-learning&quot;&gt;Validated learning&lt;/h2&gt;

&lt;p&gt;I’ve read Eric Ries’ excellent book &lt;a href=&quot;http://lean.st/&quot;&gt;The Lean Startup&lt;/a&gt; recently. In it he introduces a concept called &lt;a href=&quot;http://lean.st/principles/validated-learning&quot;&gt;Validated learning&lt;/a&gt; and goes on to define learning as the one important progress metric of startups: much more important than ‘customer numbers’ or ‘features’. Rather than define startups purely by ‘profit’ or ‘growth figures’, how can we ensure that we’re learning about how our business as fast as possible?&lt;/p&gt;

&lt;p&gt;For Sol Trader, there are two main things that I need to find out.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How can I ensure that I’m creating a game that people want to play, want to come back to, and want to tell their friends about?&lt;/li&gt;
  &lt;li&gt;How can I ensure a steady stream of new players for the game?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-sol-trader-hypothesis-board&quot;&gt;The Sol Trader Hypothesis board&lt;/h2&gt;

&lt;p&gt;In order to support this learning, I’ve created the Sol Trader hypothesis progress chart:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/sol-trader-hypotheses-chart.png&quot; alt=&quot;Sol Trader hypotheses chart&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is what I’m using to track my theories. A good week would be one where I’ve managed to prove or disprove a theory or two, rather than simply adding in more and more ‘stuff’.&lt;/p&gt;

&lt;p&gt;Note the &lt;a href=&quot;http://leanca.mp/2011/12/better-learning-through-velocity-how-to-use-kanban-to-learn-better/&quot;&gt;Kanban limits to work in progress&lt;/a&gt;. In order to get theories tested as fast as possible, it’s important to get them through the process as fast as possible.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You can view and interact with the board for yourself:&lt;/em&gt; it’s &lt;a href=&quot;https://trello.com/board/sol-hypotheses/4fb0cbe79c2ff2de54036903&quot;&gt;on Trello here&lt;/a&gt;. I’m determined to do as much of this learning in the open as possible. I’d love your input into the hypotheses that I’m testing: you can vote and comment on particular theories and tell me why you think they’re a true (or completely wrong). Any input you give here will have an effect on what I work on next, so if you want to influence the development, then get involved!&lt;/p&gt;

&lt;h2 id=&quot;freed-from-featuritis&quot;&gt;Freed from featuritis&lt;/h2&gt;

&lt;p&gt;I’ve really enjoyed freeing myself from the continual focus on “features features features”. Features by themselves mean nothing: they are actually a drag on your product, as you have to spend time and effort maintaining them. It’s only the value that your customers gain from them that’s important. Focusing on theories has meant that I’m always making progress, even if I’m simply learning what doesn’t work.&lt;/p&gt;

&lt;h2 id=&quot;hang-on-where-is-creativity-in-all-this&quot;&gt;Hang on: where is creativity in all this?&lt;/h2&gt;

&lt;p&gt;There’s a delicate balance here between listening to your customers and leading them in the direction you think they should go. I’m not going to sacrifice design flair and narrative to satisfy the baying (buying?) masses. This will likely always be a little bit of a niche game: there is a limit to the number of people interested in the genre. I plan to ultimately build the game I want to play, as opposed to the selling of something rubbish to satisfy everyone. Where’s the fun in that?&lt;/p&gt;

&lt;p&gt;The important thing is to learn about your customer base, &lt;em&gt;within the context of your original vision.&lt;/em&gt; If you cannot build a product within those constraints, time to look for a new business. Luckily, one of the earliest things I learnt through mailing list signups and a couple of &lt;a href=&quot;/2012/01/why-i-switched-from-ruby-back-to-c-plus-plus/&quot;&gt;hacker news&lt;/a&gt; &lt;a href=&quot;/2012/01/switching-sol-trader-from-ruby-to-c-plus-plus-one-week-on/&quot;&gt;appearances&lt;/a&gt; is that there’s a fair amount of latent demand for the vision I’ve got for the game, which is what spurred me on to &lt;a href=&quot;/2012/05/sol-trader-now-in-alpha&quot;&gt;get the alpha out&lt;/a&gt; in the first place.&lt;/p&gt;

&lt;p&gt;What do you think of learning in public like this, and what do you think of my development approach?&lt;/p&gt;

&lt;div class=&quot;notice&quot;&gt;
  If you'd like to purchase Sol Trader you can do so at &lt;a href=&quot;http://soltrader.net&quot;&gt;soltrader.net&lt;/a&gt;.
&lt;/div&gt;

</content></entry><entry><title>Sol Trader now in Alpha</title><category term='sol trader'/><category term='products'/><category term='agile'/><category term='lean'/><category term='lean startup'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2012/05/sol-trader-now-in-alpha'/><updated>2012-05-02T15:37:44+01:00</updated><id>http://chrismdp.com/2012/05/sol-trader-now-in-alpha</id><content type='html'>&lt;h2 id=&quot;its-released&quot;&gt;It’s released!&lt;/h2&gt;

&lt;p&gt;After a hectic four months of early development &lt;a href=&quot;http://soltrader.net&quot;&gt;Sol Trader has gone into Alpha&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://soltrader.net&quot;&gt;&lt;img src=&quot;http://soltrader.net/files/sol-trader-hero.png&quot; style=&quot;width: 48em&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With this release, you can explore the known Solar System and make money through trading on the stock markets. There isn’t much else there yet, but I’m planning a slew of improvements over the coming months.&lt;/p&gt;

&lt;p&gt;I’ve decided to charge right off the bat: you can buy the Alpha for £5 (about $8). This price will go up as I put more work into the game, and future game updates will be free until it’s finished.&lt;/p&gt;

&lt;h2 id=&quot;exciting-yet-terrifying&quot;&gt;Exciting yet terrifying&lt;/h2&gt;

&lt;p&gt;This is both a wonderfully exciting and deeply terrifying moment for me. The game isn’t near finished, yet I’ve released it on an unsuspecting set of game players. I’ve been reading the &lt;a href=&quot;http://theleanstartup.com/&quot;&gt;Lean Startup&lt;/a&gt; and I think it’s ready for feedback. This is my &lt;a href=&quot;http://www.startuplessonslearned.com/2009/08/minimum-viable-product-guide.html&quot;&gt;Minimum Viable Product&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The exciting bit: I finally get a sense of whether I’m going in the right direction and whether people might enjoy the fairly simple mechanics that are on offer in this version. Seeing Paypal emails letting me know that people have bought the game is very gratifying, even if I have to manually activate every purchase with a knocked-together ruby script.&lt;/p&gt;

&lt;p&gt;The terrifying bit is: I finally get a sense of whether people actually might play this game. After all, if nobody likes it at all, there’s not much point continuing.&lt;/p&gt;

&lt;h2 id=&quot;how-im-going-to-improve-the-game&quot;&gt;How I’m going to improve the game&lt;/h2&gt;

&lt;p&gt;I’m using &lt;a href=&quot;http://kissmetrics.com&quot;&gt;KISSMetrics&lt;/a&gt; to track both website activity and gameplay. So far it’s working out well: I can see how people go through the site, make purchases, and then sign in and play the game.&lt;/p&gt;

&lt;p&gt;I’ve deliberately not worked on the code behind the game for a couple of days, to let the metrics filter through and inform me about what’s next.  So far the reaction has been generally positive - my metrics have had good framerates and people are playing for an average of 15 minutes and making about a dozen visits to planets each.&lt;/p&gt;

&lt;p&gt;My first impressions based on early metrics and feedback: &lt;em&gt;I need to make the economy more realistic&lt;/em&gt; as I think this will cause people to play the game for longer, and &lt;em&gt;I need to add a video of gameplay&lt;/em&gt; to the front page to improve my sign up/purchase rates.&lt;/p&gt;

&lt;p&gt;More on how I’m following the Lean Startup approach over the next few weeks and months.&lt;/p&gt;

&lt;h2 id=&quot;the-long-road&quot;&gt;The long road&lt;/h2&gt;

&lt;p&gt;This is where I need self-discipline more than ever. My weakness is that when I feel like I’ve achieved something (like launching an alpha), my tendency is straight away to look for the next thing. I’m determined not to let that happen here. &lt;em&gt;I feel like I’ve delivered on perhaps 5% of the vision for the game.&lt;/em&gt; I’m passionate about seeing the rest of the vision fulfilled.&lt;/p&gt;

&lt;p&gt;The more of you who buy the game now and play it, the clearer the way forward becomes. I’m grateful for every purchase: thank you to the brave early adopters!&lt;/p&gt;

&lt;p&gt;If you’ve purchased the game, what can I do to improve it? If you haven’t purchased it yet, what can I put on the website to better inform your decision? &lt;a href=&quot;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#116;&amp;#111;:&amp;#099;&amp;#104;&amp;#114;&amp;#105;&amp;#115;&amp;#064;&amp;#115;&amp;#111;&amp;#108;&amp;#116;&amp;#114;&amp;#097;&amp;#100;&amp;#101;&amp;#114;&amp;#046;&amp;#110;&amp;#101;&amp;#116;&quot;&gt;Let me know&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;notice&quot;&gt;
  If you'd like to purchase Sol Trader you can do so at &lt;a href=&quot;http://soltrader.net&quot;&gt;soltrader.net&lt;/a&gt;.
&lt;/div&gt;

</content></entry><entry><title>Sol Trader: a continuous deployment story</title><category term='sol trader'/><category term='windows'/><category term='jenkins'/><category term='products'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2012/03/sol-trader-continuous-deployment'/><updated>2012-03-23T12:13:27+00:00</updated><id>http://chrismdp.com/2012/03/sol-trader-continuous-deployment</id><content type='html'>&lt;div class=&quot;notice&quot;&gt;
  If you'd like to purchase Sol Trader you can now do so at &lt;a href=&quot;http://soltrader.net&quot;&gt;soltrader.net&lt;/a&gt;!
&lt;/div&gt;

&lt;p&gt;Continous Deployment is difficult, time consuming to set up and tends to require a high level of buy in from your stakeholders in order to trust the work that you’re doing.&lt;/p&gt;

&lt;p&gt;It’s also one of the best things that could ever happen to your project. It prevents bugs, keeps the whole team on their toes, increases buy in and saves masses of time in the long run.&lt;/p&gt;

&lt;h2 id=&quot;sol-trader-on-windows&quot;&gt;Sol Trader on windows&lt;/h2&gt;

&lt;p&gt;For the last few weeks I’ve been working hard on getting Sol Trader building and running on Windows. I bought a brand new &lt;a href=&quot;http://www.amazon.co.uk/Zotac-ZBOX-ID41-B-ZBOX-ID41-Mini/dp/B004SLVXYE/ref=sr_1_2?ie=UTF8&amp;amp;qid=1332504948&amp;amp;sr=8-2&quot;&gt;low-spec Windows 7 PC&lt;/a&gt; for this very purpose, and installed &lt;a href=&quot;http://www.mingw.org&quot;&gt;MinGW&lt;/a&gt; on it in a blaze of optimism.&lt;/p&gt;

&lt;p&gt;Why prioritise Windows? Well, apart from the fact that my artist, Aamar, runs Windows, most of the game playing world out there still seem to be stuck on Windows as a platform, so I decided I had to ensure that it should work earlier rather than later. I figured that the longer I left it, the worse it would be to port over.&lt;/p&gt;

&lt;p&gt;Turns out I was &lt;em&gt;so right&lt;/em&gt;. Getting the game running on Windows was extremely hard and fiddly to do, even after only a few weeks development. I’ll post my specific experiences writing a cross-platform Rakefile and dealing with all the path issues another time.&lt;/p&gt;

&lt;p&gt;After the game finally ran, my first thought was: “I’m never doing that again.” If I leave the codebase to diverge again, who knows how hard it will be when it’s three times the size with twice as many library dependencies.&lt;/p&gt;

&lt;p&gt;What I really want to happen is whenever I push new code it’s all checked on Windows to make sure that it compiles and runs without warnings or errors, and runs all the tests to ensure that my code never diverges again…&lt;/p&gt;

&lt;h2 id=&quot;jenkins&quot;&gt;Jenkins&lt;/h2&gt;

&lt;p&gt;Enter &lt;a href=&quot;http://jenkins-ci.org&quot;&gt;Jenkins&lt;/a&gt;. Jenkins is the world’s most fabulous build system. There are many out there, but I keep returning to Jenkins as the most powerful and flexible. Plus, it’s Java, so it easily runs on Windows, so I can simply install it on the same Windows machine for now.&lt;/p&gt;

&lt;p&gt;Most importantly for me, it can build using slave computers, so I installed it and set up my Windows machine as a headless slave using Java Web Start. That was thankfully pretty easy to do, once I’d figured out how to set up the build command so it called the right command. It’s extremely easy to set Jenkins up to check for the latest pushed code and run a new build for me.&lt;/p&gt;

&lt;h2 id=&quot;packaging&quot;&gt;Packaging&lt;/h2&gt;

&lt;p&gt;I have a fairly simple rake task which packages up my app in a windows ZIP:&lt;/p&gt;

&lt;p&gt;{% highlight ruby %}
task :dist =&amp;gt; [exe] do
  rev = “sol-#{VERSION}-#{fetch(‘git rev-parse HEAD’)[0, 7]}”
  if windows?
    sh “cp /mingw/msys/1.0/local/bin/SDL2.dll .”
    sh “cp /mingw/msys/1.0/local/bin/libfreetype-6.dll .”
    sh “cp /mingw/msys/1.0/local/bin/libRocketCore&lt;em&gt;.dll .”
    sh “cp /mingw/msys/1.0/local/bin/libRocketControl&lt;/em&gt;.dll .”
    sh “cp /mingw/bin/SDL2_image.dll .”
    sh “cp /mingw/bin/libz-1.dll .”
    sh “cp /mingw/bin/libgcc_s_dw2-1.dll .”
    sh “cp /mingw/bin/libstdc++-6.dll .”
    sh “zip -or #{rev}.zip data shaders media #{exe}.exe *.dll”
    sh “mv #{rev}.zip /c/dropbox/sol/builds/”
  end
end
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;This dumps a ZIP file containing all the different DLLs plus the executable and assets into Dropbox for Aamar to pick up. They’re helpfully named after the latest commit (the latest one is &lt;code&gt;sol-0.1-0ead098.zip&lt;/code&gt;) so Aamar and I can refer to them easily.&lt;/p&gt;

&lt;p&gt;Now when I push the code, I only have to wait a few minutes and Dropbox informs me of a new build available. Bliss.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/sol-jenkins-build.png&quot; alt=&quot;Jenkins running&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next steps&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;I’ve an iMac at home which we use as a family PC, but they have SSH, right? There’s nothing to stop me utilising that as my slave machine for building OSX builds automatically. Jenkins allows you to build multiple configurations at the same time, so soon there will be an OSX application appearing alongside the Windows ZIP. Just don’t tell my son when he’s playing Minecraft…&lt;/li&gt;
  &lt;li&gt;I’d like to run the game for 100 frames or so just to ensure that it’s starting, allocating all its memory and exiting cleanly without memory leaks.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://valgrind.org&quot;&gt;Valgrind&lt;/a&gt; support would be fantastic to check for leaks.&lt;/li&gt;
  &lt;li&gt;A screenshot showing the running game to double triple check it would be a great addition. There’s a Jenkins plugin for this, which I’ve not tried yet.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is all important infrastructure getting ready for a beta release. Putting in the effort now makes the job of releasing new builds so much easier when the pressure is on and I’m trying to get bugfixes out to multiple platforms.&lt;/p&gt;

&lt;p&gt;What do you think of the system so far? Any improvements I could make?&lt;/p&gt;

&lt;div class=&quot;notice&quot;&gt;
  If you'd like to purchase Sol Trader you can now do so at &lt;a href=&quot;http://soltrader.net&quot;&gt;soltrader.net&lt;/a&gt;!
&lt;/div&gt;
</content></entry><entry><title>Sol Trader: on lighting</title><category term='products'/><category term='c++'/><category term='code'/><category term='opengl'/><category term='sol trader'/><category term='game development'/><category term='lighting'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2012/02/sol-trading-lighting'/><updated>2012-02-14T22:56:43+00:00</updated><id>http://chrismdp.com/2012/02/sol-trading-lighting</id><content type='html'>&lt;p&gt;A quick update on the lighting code I’ve been working on. Now that I have normal maps and per-pixel bump mapping working, I can turn these:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/sol-trader-lighting-1.png&quot; alt=&quot;ship-texture-1&quot; /&gt;
&lt;img src=&quot;/files/sol-trader-lighting-2.png&quot; alt=&quot;ship-texture-2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Into this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/sol-trader-lighting-3.png&quot; alt=&quot;ship-texture-3&quot; /&gt;
&lt;img src=&quot;/files/sol-trader-lighting-4.png&quot; alt=&quot;ship-texture-4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Check out how the ship appears lit from each side. It looks even better as you see it moving. Hey presto: a realistic 3D effect with only two triangles rendered.&lt;/p&gt;

&lt;p&gt;All I’m using is this simple GLSL fragment shader:&lt;/p&gt;

&lt;p&gt;{% highlight c %}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;void main() {
  vec4 color = texture(baseTexture, uv);
  vFragColor = vertColor * color;
  float alpha = vFragColor.a;

  if (alpha &amp;gt; 0.0 &amp;amp;&amp;amp; useNormal) {
    vec3 lightDirection = normalize(vec3(0.2, 0.2, 0.0));
    vec4 normal = normalize(texture(normalTexture, uv) * 2.0 - 1.0);
    vec4 vEyeNormal = normalMatrix * normal;

    float diffuse = max(0.0, dot(vEyeNormal.xyz, lightDirection));
    vFragColor *= (diffuse * 3);
    vFragColor.a = alpha;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;{% endhighlight %}&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/GLSL&quot;&gt;GLSL&lt;/a&gt; is great.&lt;/p&gt;
</content></entry><entry><title>Effective bloom in OpenGL for Sol Trader</title><category term='products'/><category term='c++'/><category term='code'/><category term='opengl'/><category term='bloom'/><category term='sol trader'/><category term='game development'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2012/02/effective-bloom-in-open-gl-for-sol-trader'/><updated>2012-02-02T16:28:30+00:00</updated><id>http://chrismdp.com/2012/02/effective-bloom-in-open-gl-for-sol-trader</id><content type='html'>&lt;div class=&quot;notice&quot;&gt;
  &lt;h2&gt;TL;DR&lt;/h2&gt;

  &lt;p&gt;Skip to the &lt;a href=&quot;#pictures&quot;&gt;pictures&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;I’ve been working on and off on &lt;a href=&quot;http://soltrader.net&quot;&gt;Sol Trader&lt;/a&gt; (&lt;a href=&quot;/2012/01/why-i-switched-from-ruby-back-to-c-plus-plus/&quot;&gt;C++ version&lt;/a&gt;) for about a month now. At the beginning of this week, I’ve been coded up an effective type formatting system using freetype2 natively with OpenGL, which is now in and showing even rather esoteric fonts nicely.&lt;/p&gt;

&lt;p&gt;The second half of this week was spent adding on a bloom filter to the graphics engine.&lt;/p&gt;

&lt;h2 id=&quot;bloom-filtering-making-your-world-stand-out&quot;&gt;Bloom filtering: making your world stand out&lt;/h2&gt;

&lt;p&gt;A bloom filter causes bright areas of the image to ‘take over’ their surrounding area, simulating the high dynamic range of real light. It stops your game world from looking dull and flat and really makes it stand out. See &lt;a href=&quot;http://www.gamasutra.com/view/feature/2107/realtime_glow.php&quot;&gt;this article&lt;/a&gt; for some nice screenshots from Tron 2.0 - it can also be used for all sorts of glow and blur effects.&lt;/p&gt;

&lt;p&gt;So how’s it done? The trick is to render your scene to a texture, rather than to the screen. Once you’ve done that, you blur and downsample that texture a few times, and then display the results combined with the original texture.&lt;/p&gt;

&lt;p&gt;Specifically, this is the process my bloom filter follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Render to a texture&lt;/li&gt;
  &lt;li&gt;Copy that texture to two more textures, one a quarter of the screen size, and one an eighth of the screen size.&lt;/li&gt;
  &lt;li&gt;Blur the two smaller textures using gaussian blur. There are &lt;a href=&quot;http://prideout.net/archive/bloom/&quot;&gt;clever techniques&lt;/a&gt; which mean you only need six texture lookups to perform a 5x5 gaussian blur. Texture lookups are expensive, so it’s worth doing as few as possible.&lt;/li&gt;
  &lt;li&gt;Add all these textures together and add an exposure function to cause the white to saturate for strong color values.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Writing the initial bloom filter was fairly easy. Making it fast was &lt;em&gt;hard:&lt;/em&gt; you have to work at combining the different aspects of the effect to get what you want, with the absolute minimum of effort for your graphics card. My first attempt ran at a paltry 27 frames a seconds, although it looked very nice: I eventually managed to get it to the point where it runs in roughly 150 frames per second and still looks 80% as good.&lt;/p&gt;

&lt;div name=&quot;pictures&quot;&gt;
  &lt;h2&gt;What's the result?&lt;/h2&gt;
&lt;/div&gt;

&lt;p&gt;A picture is worth a thousand words, so here are three:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/sol-trader-bloom-1.png&quot; alt=&quot;bloom-1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/sol-trader-bloom-2.png&quot; alt=&quot;bloom-2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/sol-trader-bloom-3.png&quot; alt=&quot;bloom-3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I’ve deliberately upped the bloom exposure to show off the effect: it is much more obvious when it’s moving. Hopefully you can see the volcanic eruptions on Venus are making the outline of the players’ ship that much more hazy. The label of the planet also currently has the bloom effect applied: I’ll be able to turn that off when I have a more functional GUI in place.&lt;/p&gt;

&lt;p&gt;I plan to use this effect for all sorts of things: laser fire, explosions, you name it.&lt;/p&gt;

&lt;h2 id=&quot;next&quot;&gt;Next…&lt;/h2&gt;

&lt;p&gt;I’m going to tackle the gui. I now have AI characters with names trading on Earth’s main commodity market: it’s time the player joins them in making trades.&lt;/p&gt;

&lt;div class=&quot;notice&quot;&gt;
  If you'd like to purchase Sol Trader you can now do so at &lt;a href=&quot;http://soltrader.net&quot;&gt;soltrader.net&lt;/a&gt;!
&lt;/div&gt;
</content></entry><entry><title>Switching Sol Trader from Ruby to C++: one week on</title><category term='products'/><category term='ruby'/><category term='c++'/><category term='code'/><category term='sol trader'/><category term='game development'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2012/01/switching-sol-trader-from-ruby-to-c-plus-plus-one-week-on'/><updated>2012-01-16T09:38:25+00:00</updated><id>http://chrismdp.com/2012/01/switching-sol-trader-from-ruby-to-c-plus-plus-one-week-on</id><content type='html'>&lt;p&gt;Well, I didn’t quite expect that. My &lt;a href=&quot;/2012/01/why-i-switched-from-ruby-back-to-c-plus-plus/&quot;&gt;previous post&lt;/a&gt; about switching &lt;a href=&quot;http://soltrader.net&quot;&gt;Sol Trader&lt;/a&gt; development from Ruby back to C++ caused &lt;a href=&quot;http://news.ycombinator.com/item?id=3440596&quot;&gt;quite a storm&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Not being used to making waves on the mainstream Internet, I naively attempted to dive in and read and respond to every comment. It appears that feedback from the Internet at large tends towards the negative, so after a few hours I was feeling pretty discouraged, and only continued replying to some of the constructive feedback. Sorry if you didn’t get a response.&lt;/p&gt;

&lt;p&gt;I have a few more comparisons between Ruby and C++ which I’d like to share.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;I’m finding myself reinventing the wheel more.&lt;/em&gt; In Ruby-land I found third-party code easier to read, easier to install and easier to use. Trying to use someone else’s library is C++ is harder. Often people don’t seem to write automated tests, which strongly recommends me against using them. I’m also concerned that new libraries might introduce hidden memory leaks which will waste me time massively when I come to hunt them down. I appreciate people don’t release their code just for me, so I’m not complaining: I’ve just found it more difficult to trust third-party code. I hope to try and fix this tendency by releasing large extractions from my project as libraries in the future.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Boost is awesome.&lt;/em&gt; One notable exception to the above concern is the wonderful &lt;a href=&quot;http://boost.org&quot;&gt;Boost&lt;/a&gt; library suite. There is a library for almost everything you might need there, and the quality is very high. I’m already using the &lt;a href=&quot;http://www.boost.org/libs/signals2&quot;&gt;Signals2&lt;/a&gt; library for notifications (following the &lt;a href=&quot;http://en.wikipedia.org/wiki/Observer_pattern&quot;&gt;Observer pattern&lt;/a&gt;) and I plan to use the &lt;a href=&quot;http://www.boost.org/libs/serialization&quot;&gt;Serialization&lt;/a&gt; library for saving and loading games.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;What to test?&lt;/em&gt; The testing profile of my C++ code is different to my Ruby code. Thanks to strong typing, my tests fail for longer during the ‘red’ stage, so I find I have to write fewer edge cases. There are only so many ways C++ types can fit together, whereas Ruby objects can be combined in any way you like. I’m not sure I’ve hit on the right level of coverage yet: I’m not writing any tests for the more visual parts of Sol Trader yet and I’d like to consider how to.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;I’m using a classist approach to testing.&lt;/em&gt; In C++ I’ve tended to favour a &lt;a href=&quot;http://martinfowler.com/articles/mocksArentStubs.html&quot;&gt;classical approach to TDD&lt;/a&gt;: that of testing a few small classes together from the outside using the public interface. Where I’m &lt;a href=&quot;http://stackoverflow.com/a/384067/1073735&quot;&gt;coding to interfaces&lt;/a&gt; I’m able to stub out that interface by inheriting from it in my test, but I’m not doing that often. Mostly I’m following my nose and attempting to keep my classes small and my collaborations few. I don’t get all the design signals from my tests that I would like, but in my view that’s better than exposing the internals of my class to the tests: that just complicates it unnecessarily. C++ is already difficult to read.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Prototyping complex class structures in Ruby first is really useful.&lt;/em&gt; I’ve often benefited from having an existing Ruby class structure to take as my lead when writing C++. Those subsystems that I’d already written in Ruby were at least twice as fast to write. Rather than typing, or getting past the syntax, I’ve found &lt;a href=&quot;http://dannorth.net/2010/08/30/introducing-deliberate-discovery/&quot;&gt;learning to be the constraint&lt;/a&gt; in a number of coding situations. I’m not sure I’d always write in Ruby first, but in a case where I was really stuck and wanted to explore possible options, I might consider a rapid Ruby prototype over &lt;a href=&quot;http://en.wikipedia.org/wiki/Class-responsibility-collaboration_card&quot;&gt;CRC card design&lt;/a&gt;, for example.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’ll continue to post my learnings as I collect them.&lt;/p&gt;

&lt;div class=&quot;notice&quot;&gt;
  If you'd like to purchase Sol Trader you can now do so at &lt;a href=&quot;http://soltrader.net&quot;&gt;soltrader.net&lt;/a&gt;!
&lt;/div&gt;
</content></entry><entry><title>Why I switched from Ruby back to C++</title><category term='products'/><category term='ruby'/><category term='c++'/><category term='code'/><category term='sol trader'/><category term='game development'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2012/01/why-i-switched-from-ruby-back-to-c-plus-plus'/><updated>2012-01-08T20:21:41+00:00</updated><id>http://chrismdp.com/2012/01/why-i-switched-from-ruby-back-to-c-plus-plus</id><content type='html'>&lt;div class=&quot;notice&quot;&gt;
  &lt;b&gt;UPDATE:&lt;/b&gt; This post was pretty popular. I've posted a followup &lt;a href=&quot;/2012/01/switching-sol-trader-from-ruby-to-c-plus-plus-one-week-on/&quot;&gt;here&lt;/a&gt;.
&lt;/div&gt;

&lt;p&gt;After two months of Sol Trader development in Ruby, I took a difficult decision last Wednesday morning: I’ve decided to rewrite the game code from scratch in C++. Let me explain my reasons.&lt;/p&gt;

&lt;div class=&quot;notice&quot;&gt;
  If you'd like to purchase Sol Trader you can now do so at &lt;a href=&quot;http://soltrader.net&quot;&gt;soltrader.net&lt;/a&gt;!
&lt;/div&gt;

&lt;h2 id=&quot;why-i-did-it&quot;&gt;Why I did it&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Slow frames:&lt;/em&gt; When working with Ruby, I use the excellent &lt;a href=&quot;https://github.com/jlnr/gosu&quot;&gt;Gosu&lt;/a&gt; library to do all my game specific coding. This initially worked great, but occasionally I’d just get slow frames coming up. My game is timed to run at 60 frames per second, which means that each frame should take no more than 16.67ms to run. Yet every so often my profiling would come up with a frame that would take 25ms or 45ms for no discernible reason. I just couldn’t find the issue here: I turned every sub system in the game off. I disabled garbage collection. I hacked my slow frame detection code into the simplest gosu sample I could find, and they still existed. I didn’t feel like I could quite trust the stack to deliver the framerate I needed, and I hadn’t yet put in half the features I wanted to.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Object explosion when bridging to C:&lt;/em&gt; A lot of the libraries I was using were written in C, and therefore there was several thousand objects (mostly floats) being created each frame to act as a bridge between Ruby and C code. It feels like that that CPU time should be better spent in the AI improving the quality of the simulation, or on better effects, rather than loading the garbage collection with an unnecessary burden.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Ease of packaging and distribution:&lt;/em&gt; I feel like packaging is going to be a lot easier. I’m not too bothered about hiding the source code: I may well do that anyway to purchasers of the game. It’s the running on Windows I’m worried about: from my research it feels like it’s going to take some effort to push the game out on a non-Unix platform. And with a video game, releasing on Windows is a must.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Manual memory management for performance:&lt;/em&gt; The garbage collection is still too stuttery under MRI (even with Ruby 1.9.3, which is a huge improvement on what’s gone before) - it still stops the world each time. I looked at other implementations, and even considered learning all about garbage collection to help improve Ruby myself, but then realised that getting royally distracted wouldn’t help me ship a working game.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-do-i-miss-about-ruby&quot;&gt;What do I miss about Ruby?&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;I miss using RSpec hugely:&lt;/em&gt; There are ways of doing &lt;a href=&quot;http://benmabey.com/2007/09/09/bdd-your-c.html&quot;&gt;testing of C programs using RSpec&lt;/a&gt; but it doesn’t feel like I want to wrap each of my C++ classes with a SWIG interface just to check they’re working. I may still do this for some form of Cucumber testing, I’m not sure. I’m using &lt;a href=&quot;http://unittest-cpp.sourceforge.net/&quot;&gt;UnitTest++&lt;/a&gt; for my testing at the moment, which is very lightweight and good enough for my purposes.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Duck-typing:&lt;/em&gt; defining interfaces for everything is a pain in the backside, although it does force you to think more clearly about the roles of your classes.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Easy mockist testing:&lt;/em&gt; There’s no built in reflection in C++ so it also makes you have to code to interfaces if you want to do any mockist testing. I’m mostly returning to a classist style of testing with small well defined groups of classes being tested at once. It’s not a perfect system and I still have much learning to do here.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Terseness of syntax:&lt;/em&gt; There’s just a lot more characters to type, and a lot more ceremony for each class. This tempts you to larger classes and methods, which I’m resisting at the moment. I need to take the time to set up &lt;a href=&quot;http://www.vim.org/scripts/script.php?script_id=213&quot;&gt;c.vim&lt;/a&gt; exactly how I want it.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Funnily enough, I don’t miss the automatic memory management: I like having that level of control. Old habits die hard.&lt;/p&gt;

&lt;h2 id=&quot;so-how-far-have-i-got&quot;&gt;So how far have I got?&lt;/h2&gt;

&lt;p&gt;Thankfully, it’s not a complete rewrite as I’d already done a lot of thinking about the architecture and a lot of the basic classes translate directly over.  I worked really hard at the end of last week and got a lot done:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I put in &lt;a href=&quot;http://www.libsdl.org&quot;&gt;SDL&lt;/a&gt; to build the basic game framework: hopefully building on Windows will be a snap. I plan to have a working Windows build as soon as I can lay my hands on a cheap Windows 7 PC.&lt;/li&gt;
  &lt;li&gt;Basic testing using UnitTest++, with tests that are compiled and run as part of the build process.&lt;/li&gt;
  &lt;li&gt;Decoupled gameplay/physics updates from the graphical framerate using the techniques &lt;a href=&quot;http://gafferongames.com/game-physics/fix-your-timestep/&quot;&gt;here&lt;/a&gt;. I have zero &lt;a href=&quot;http://en.wikipedia.org/wiki/Temporal_anti-aliasing&quot;&gt;temporal aliasing&lt;/a&gt; bugs right now, which makes for a super smooth 300+ FPS graphic loop with a fixed 60FPS physics loop.&lt;/li&gt;
  &lt;li&gt;Re-implemented physics using &lt;a href=&quot;http://chipmunk-physics.net/&quot;&gt;Chipmunk&lt;/a&gt;, the same library I used in Ruby, which made it very easy to switch over.&lt;/li&gt;
  &lt;li&gt;Put in a brand new and much improved parallax-scrolled starfield.&lt;/li&gt;
  &lt;li&gt;Added a basic controllable spacecraft, planets and jumpgates back in: the player can fly around as before and collide successfully with other objects.&lt;/li&gt;
  &lt;li&gt;A simple particle system so the spacecraft give off exhaust smoke, and the jumpgates emit spooky purple mist.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Even with using OpenGL &lt;a href=&quot;http://en.wikibooks.org/wiki/OpenGL_Programming/GLStart/Tut3#Immediate_Mode&quot;&gt;immediate mode&lt;/a&gt; (this is a bad thing) and rendering 10000 stars each frame (very inefficient), and a throwing bunch of particles onscreen, I’m still getting 300+ FPS on my 2009 MacbookPro and only using 30MB of memory. That’s satisfying.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;UPDATE:&lt;/em&gt; By (very) popular demand, here’s a screenshot. Be aware this is &lt;em&gt;three days work only&lt;/em&gt;, and obviously not final artwork:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/files/sol-trader-1.png&quot;&gt;&lt;img src=&quot;/files/sol-trader-1.png&quot; width=&quot;500&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next I plan to add back in jumping between different planetary orbits, and then work on a very basic ‘person-level view’, so that you can get out of your ship and walk around.&lt;/p&gt;

&lt;h2 id=&quot;was-it-the-right-decision&quot;&gt;Was it the right decision?&lt;/h2&gt;

&lt;p&gt;I’ll know at the end of the project :) My feeling is though that it was the correct thing to do. Being really close to the metal will make it much easier to implement some of the really complex AI stuff I’d like to do later on. I already know C++ very well, and estimate it’ll only delay me a week or two if I work hard. If I like, I can always bundle my project as a C++ library and control it from Ruby later on, but it’s harder to go in the other direction.&lt;/p&gt;

&lt;p&gt;What do you think? Did I make the right call?&lt;/p&gt;

&lt;div class=&quot;notice&quot;&gt;
  If you'd like to purchase Sol Trader you can now do so at &lt;a href=&quot;http://soltrader.net&quot;&gt;soltrader.net&lt;/a&gt;!
&lt;/div&gt;
</content></entry><entry><title>Introducing Sol Trader</title><category term='products'/><category term='code'/><category term='life'/><category term='sol trader'/><category term='game development'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2012/01/introducing-sol-trader'/><updated>2012-01-03T14:53:53+00:00</updated><id>http://chrismdp.com/2012/01/introducing-sol-trader</id><content type='html'>&lt;p&gt;Happy new year, everybody! It’s been a little while in coming, but I’ve finally got to the point where I want to announce the project I’ve been working on privately for the last few months. I’m heading after a dream, and I want to share it with you.&lt;/p&gt;

&lt;p&gt;But first some background.&lt;/p&gt;

&lt;h2 id=&quot;i-love-designing-games&quot;&gt;I love designing games&lt;/h2&gt;

&lt;p&gt;I started my career in software development working on PC games back at the turn of the millennium. I worked for a fantastic little company called &lt;a href=&quot;http://en.wikipedia.org/wiki/Elixir_Studios&quot;&gt;Elixir Studios&lt;/a&gt;, which sadly closed in 2005. I’ll never forget them: they gave me my first break into software development and I studied my craft under some fantastic mentors, notably &lt;a href=&quot;http://www.linkedin.com/in/achimstremplat&quot;&gt;Achim Stremplat&lt;/a&gt; and &lt;a href=&quot;http://www.linkedin.com/profile/view?id=3207719&amp;amp;locale=en_US&amp;amp;trk=tyah&quot;&gt;Jamie Doornbos&lt;/a&gt;. These guys taught me a love of good code, and a love of doing things right.&lt;/p&gt;

&lt;p&gt;On leaving Elixir, I moved away from the games industry and into web programming, leaving C++ and Microsoft Visual Studio far behind me. I spent a few years shifting through a number of languages (Perl, PHP, Java, Python) before settling on Ruby as my interpreted language of choice. I’ve never lost that love for building and designing games, though, and I’ve kept my hand in over the years. I’ve always been more interested in designing games, rather than playing them: as a kid I was always the Dungeon Master, or the guy &lt;a href=&quot;http://en.wikipedia.org/wiki/HeroQuest&quot;&gt;designing the adventure&lt;/a&gt;. As an 11 year old I used to write games in BASIC on BBC Micros and sell them to my friends for 10p each. I guess you could say it’s built in to my psyche.&lt;/p&gt;

&lt;h2 id=&quot;sol-trader&quot;&gt;Sol Trader&lt;/h2&gt;

&lt;p&gt;Another realisation: one of the things that I’ve learnt in the last year is that I’d love to spend more time working on my own products. I have done this in a half-hearted fashion over the years, but my motivation tends to die off when the initial rush of enthusiasm fades. To help myself see it through to the end, I’ve decided to try to realise a long held dream. Alongside working with clients this year, I’m going to spend some of my remaining time building and releasing my first commercial game.&lt;/p&gt;

&lt;p&gt;I’m therefore very pleased to announce &lt;a href=&quot;http://soltrader.net&quot;&gt;Sol Trader&lt;/a&gt; - an open-ended space trading and exploration game set in our solar system in the near future.&lt;/p&gt;

&lt;p&gt;The game itself has been in development since the end of October last year: it started as a side project with my kids (we originally named it Spacestuff) but has blossomed and grown into something much more. There’s some info &lt;a href=&quot;http://soltrader.net&quot;&gt;on the website&lt;/a&gt; I’ve been putting together, but more will be forthcoming shortly. I’m aware that I’ve not got any screenshots yet, but once the first artwork goes in I’ll put some up. It’s already playable: my kids are already having great fun travelling between Earth and Venus via jump gates and landing on the planets.&lt;/p&gt;

&lt;p&gt;When I’m ready for beta testers, I’ll put an announcement out on the mailing list: &lt;a href=&quot;http://soltrader.net&quot;&gt;sign up at soltrader.net&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;motivate-me&quot;&gt;Motivate me!&lt;/h2&gt;

&lt;p&gt;One of the things I need to work on is the ability to complete my own projects. Working on a game is a great motivator, but I need help to keep my motivation up! I’d be very grateful if you’d drop me a note asking me how I’m getting on if you don’t hear from me for a while. Write a comment on a blog post, retweet something, sign up to get emails, ping me &lt;a href=&quot;http://twitter.com/chrismdp&quot;&gt;on twitter&lt;/a&gt;: every little bit of feedback I get (even if critical) helps to motivate me to work on it.&lt;/p&gt;

&lt;p&gt;More on the game in future posts, including some thoughts on architecture, language choice and whether or how to release the source code. Crafting this codebase has already proved a treasure trove of interesting thoughts on code quality and testing, which I plan to share on this blog over time. I’m also aware that I’m breaking a few “indy game developer” rules: I’ll share my opinions about that, too.&lt;/p&gt;

&lt;p&gt;Will I finish? Will it be a success? I’ve no idea, but I plan to learn as much as possible from doing it. At the very least, I’m shooting after a dream, and I’ll be pleased to finish 2012 having attempted it, whatever the outcome.&lt;/p&gt;

&lt;p&gt;Have you got a &lt;a href=&quot;http://www.youtube.com/watch?v=_Klf8uWkvaw&quot;&gt;half-baked dream&lt;/a&gt; you’re going to turn into reality this year? If not, why not?&lt;/p&gt;

</content></entry><entry><title>Kanogo: vapourware to beta in 24 hours</title><category term='code'/><category term='products'/><category term='business'/><category term='kano analysis'/><category term='rails'/><category term='heroku'/><category term='ruby'/><category term='kanogo'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2011/09/kanogo-vapourware-to-beta-in-24-hours'/><updated>2011-09-12T11:30:37+01:00</updated><id>http://chrismdp.com/2011/09/kanogo-vapourware-to-beta-in-24-hours</id><content type='html'>&lt;div class=&quot;notice&quot;&gt;
  &lt;h2&gt;TL;DR&lt;/h2&gt;

  &lt;p&gt;Last week I built the first beta of a new web product called &lt;a href=&quot;http://kanogo.com&quot;&gt;Kanogo&lt;/a&gt;. It’s designed to gather feedback and perform &lt;a href=&quot;http://en.wikipedia.org/wiki/Kano_model&quot;&gt;Kano analysis&lt;/a&gt; to determine which direction you should take with your website.&lt;/p&gt;

  &lt;p&gt;Here's an example, designed specifically for this blog. Thanks for your feedback!&lt;/p&gt;

  &lt;iframe allowtransparency=&quot;true&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot; src=&quot;http://kanogo.com/surveys/13/embed?&quot; style=&quot;width: 100%; height: 120px&quot;&gt;
  &lt;/iframe&gt;

  &lt;p&gt;Sign up for the beta &lt;a href=&quot;http://kanogo.com&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;/div&gt;

&lt;h2 id=&quot;the-backstory&quot;&gt;The backstory&lt;/h2&gt;

&lt;p&gt;A while back I agonising over which should be the next greatest feature for one of my products. I thought the best thing to do would be to conduct some Kano analysis on the product in question, and realised there wasn’t an easy way of doing this. I’ve used &lt;a href=&quot;http://kanosurvey.com&quot;&gt;kanosurvey.com&lt;/a&gt; in the past, but it didn’t really feel like the right tool. How was I to get users to answer my survey?&lt;/p&gt;

&lt;p&gt;“Wouldn’t it be great,” I thought, “if I could embed a little survey box on the site that asked customers what they thought and provided me with Kano analysis stats?” The concept behind &lt;a href=&quot;http://kanogo.com&quot;&gt;Kanogo&lt;/a&gt; was born.&lt;/p&gt;

&lt;p&gt;Fast forward several months to last week. I found myself with a few days spare and decided that the best use of them would be to build a beta of this product. Always up for a challenge, I decided to give myself 24 hours to build and launch.&lt;/p&gt;

&lt;p&gt;That’s not very long, so I had to hustle.&lt;/p&gt;

&lt;h2 id=&quot;timeline&quot;&gt;Timeline&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;7 Sep: 12:10am:&lt;/em&gt; &lt;a href=&quot;https://twitter.com/#!/chrismdp/status/111214768651636736&quot;&gt;I announced my intentions&lt;/a&gt;, mostly to motivate myself through fear of failing in public. I finally decided on a name, and registered the domain and the twitter account. I announced the product &lt;a href=&quot;https://twitter.com/#!/chrismdp/status/111240345341263872&quot;&gt;to the world&lt;/a&gt; (well, a &lt;a href=&quot;https://twitter.com/#!/chrismdp/followers&quot;&gt;subset&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;7 Sep: 01:55am:&lt;/em&gt; Got a new Rails 3.1 app running on Heroku cedar. It’s a one page app using a Campaign Monitor signup form. Got my first beta signup. Finished for the night.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;7 Sep: 07:40am:&lt;/em&gt; Announced Kanogo again, just in case anyone had been sleeping at 2am :) Got another 3 beta signups and a bunch of feedback on spelling errors.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;7 Sep: 10:13am:&lt;/em&gt; Simple twitter sign in done using &lt;a href=&quot;https://github.com/intridea/omniauth&quot;&gt;Omniauth&lt;/a&gt; and this really useful &lt;a href=&quot;https://github.com/RailsApps/rails3-mongoid-omniauth/wiki/Tutorial&quot;&gt;tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;7 Sep: 02:45pm:&lt;/em&gt; The USA woke up and I got more beta signups: now up to 5. Got the basic data entry for surveys and features done. Started work on the embed. Was feeling fairly pessimistic about a beta launch for that night, but didn’t want to let myself down.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;7 Sep: 05:53pm:&lt;/em&gt; Embed done, quicker than expected. Took a break. Now feeling &lt;a href=&quot;https://twitter.com/#!/chrismdp/status/111482135218626560&quot;&gt;cautiously optimistic&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;7 Sep: 09:12pm:&lt;/em&gt; Basic response mechanism in: now needed to apply the Kano analysis magic! Adrenalin took over from caffiene as primary stimulant.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;7 Sep: 11:20pm:&lt;/em&gt; Turned on twitter sign in as basic method of getting registered on the site. Removed redundant Campaign Monitor signup: emailed subscribers manually to ask them to sign in via twitter. Beta &lt;a href=&quot;https://twitter.com/#!/kanogoapp/status/111564545708929024&quot;&gt;went live!&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-result&quot;&gt;The result&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/files/kanogo-1.png&quot; alt=&quot;Embed&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/kanogo-2.png&quot; alt=&quot;Results&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After 24 hours, I had a beta running, which worked. Granted, it wasn’t great, but it was something that had some value.&lt;/p&gt;

&lt;p&gt;I spent the rest of the evening and following morning promoting the beta on mailing lists and on twitter. By the end of the following day I had 30 or so beta signups.&lt;/p&gt;

&lt;p&gt;It’s already adding value to beta users. Two sites using the beta already on their own products. One beta user has now decied to implement a feature as he’s realised his customers consider it a “must have”. There’s no substitute for real feedback.&lt;/p&gt;

&lt;h2 id=&quot;learnings&quot;&gt;Learnings&lt;/h2&gt;

&lt;p&gt;Some of the things I’ve learned so far:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Cloud tools are the business.&lt;/em&gt; It was so easy to register the domain with &lt;a href=&quot;http://dnsimple.com&quot;&gt;dnsimple.com&lt;/a&gt;, start up a &lt;a href=&quot;http://twitter.com/kanagoapp&quot;&gt;twitter account&lt;/a&gt; for marketing and customer interaction, deploy to &lt;a href=&quot;http://heroku.com&quot;&gt;Heroku&lt;/a&gt;, get initial beta signups with &lt;a href=&quot;http://campaignmonitor.com&quot;&gt;Campaign Monitor&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Modern development tools rock.&lt;/em&gt; I used Rails 3.1 for this app, which worked beautifully, and I love the use of sprockets to help manage the asset pipeline. Running the app on Heroku cedar went without a hitch. I used twitter for authentication, and it only took an hour to set up.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;There is no “quick and dirty”.&lt;/em&gt; The app is (almost) fully tested: I confess I left a couple of methods only covered by end-to-end tests (which doesn’t really count). I definitely proved that the only way to go fast is to go clean: &lt;a href=&quot;http://agileage.blogspot.com/2011/07/slow-and-dirty-rant-by-jason-gorman-at.html&quot;&gt;Jason was right&lt;/a&gt; that there is no “quick and dirty” only “slow and dirty”. This came back to bite me instantly: the code I didn’t use specs for took me the longest to get working.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Technology is the easy part.&lt;/em&gt; It didn’t take me long to build the site, but the trick is to build a business. After initial interest, the analytics on the site are way down as the next new thing appears on the internet and people move on. To gain traction I need to build the app my beta users actually want. Thankfully, quick feedback is what Kanogo does, so we’re eating our own dogfood and asking our users what they think at every turn. This is already directing which features I work on next, which has to be the most efficient way of moving forward, right?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;whats-next&quot;&gt;What’s next?&lt;/h2&gt;

&lt;p&gt;I plan to continue working on this, listening to beta user feedback, refining the features, and accepting new beta signup for the moment. I hope to turn this into a paid product at some point, as I think there’s a huge amount of value here to websites if I can get the messaging right.&lt;/p&gt;

&lt;h2 id=&quot;can-i-get-involved&quot;&gt;Can I get involved?&lt;/h2&gt;

&lt;p&gt;Sure! It’s not too late to join the beta: you can &lt;a href=&quot;http://kanogo.com&quot;&gt;do so here&lt;/a&gt;. I’d love your feedback on the product. It can give you value anywhere you have users of a website, even on a blog as shown above.&lt;/p&gt;
</content></entry><entry><title>Pin in the map: customisable pin icons</title><category term='code'/><category term='cucumber'/><category term='ruby'/><category term='legacy'/><category term='products'/><category term='pininthemap'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2011/09/pininthemap-customisable-pin-icons'/><updated>2011-09-06T21:18:13+01:00</updated><id>http://chrismdp.com/2011/09/pininthemap-customisable-pin-icons</id><content type='html'>&lt;p&gt;I’ve just spent some time updating my first ever Rails project, &lt;a href=&quot;http://pininthemap.com&quot;&gt;Pin in the map&lt;/a&gt;. Now you can change the icons associated with premium (paid for) pins. There are over 100 new icons to choose from: &lt;a href=&quot;http://pininthemap.com&quot;&gt;have fun!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/pininthemap-example.png&quot; alt=&quot;pininthemap example&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;learnings&quot;&gt;Learnings&lt;/h2&gt;

&lt;p&gt;This codebase is from 2006, so this has proved a nice little exercise in adding testing to a legacy project. I had no tests at all to speak of when I wrote the code five years ago, and the code shows it. I began by installing cucumber and rspec and quickly wrapping the two most common features in acceptance tests: creating and editing pins. Even on old code it was super easy to get capybara, cucumber and rspec up and running, thanks to the fact that we’ve upgraded the codebase to Rails 2 and started using bundler to manage gem dependencies. We stuck to Selenium for the tests as the code is very Google Maps heavy.&lt;/p&gt;

&lt;p&gt;It’s always worth keeping old apps vaguely up to date: the less inertia surrounding a codebase the more likely you’ll spend an afternoon adding an often-requested feature.&lt;/p&gt;
</content></entry></feed>
