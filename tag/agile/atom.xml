---
layout: nil
---
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title>Chris Parsons: posts tagged agile</title>

  <link href="http://chrismdp.com/"/>
  <updated>2012-09-28T20:46:31+01:00</updated>
  <id>http://chrismdp.com/tag/agile</id>
  <author>
    <name>Chris Parsons</name>
    <email>chrismdp@gmail.com</email>
  </author>
<entry><title>Your framework is a liability</title><category term='code'/><category term='craftsmanship'/><category term='lean'/><category term='ruby'/><category term='agile'/><category term='liability'/><category term='sinatra'/><category term='paypal'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2012/09/your-framework-is-a-liability'/><updated>2012-09-28T20:46:31+01:00</updated><id>http://chrismdp.com/2012/09/your-framework-is-a-liability</id><content type='html'>&lt;p&gt;Your framework is a liability.&lt;/p&gt;

&lt;p&gt;Every library you import before you start the project means more for someone else to digest and understand. Each complex ‘clever’ library equals another few minutes per team member trying to interpret why you imported it, how to use it, and where the configuration goes. Every framework you decide to use is a early decision about how your project will fundamentally work, which might turn out to be the wrong one. Each library is an opportunity for someone else to introduce a bug into your project.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The only asset a framework or library gives you is a faster route to your feature.&lt;/em&gt; Anything else will drag you down.&lt;/p&gt;

&lt;p&gt;If your framework is heavy and onerous, then your code will have a large net negative liability before you’ve even begun. You’ll be constrained to follow a certain set of patterns, which you might end up fighting against later on. Work on the app first: your &lt;anacronym title=&quot;minimum viable product&quot;&gt;MVP&lt;/anacronym&gt; might not even need the benefits your framework provides.&lt;/p&gt;

&lt;p&gt;A few examples of where I’ve benefited from not blindly installing the “standard stack”:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;I’ve recently started building some new projects wholly in &lt;a href=&quot;http://sinatrarb.com&quot;&gt;Sinatra&lt;/a&gt;, pulling in various gems only when I need to, rather than starting with Rails from the outset. &lt;a href=&quot;http://soltrader.net&quot;&gt;Sol Trader’s website&lt;/a&gt; is pure Sinatra. It was simply much quicker to get started, and I found I could layer on functionality as I needed it. Several months on, I’ve yet to need to turn to a Rails app.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When I came to add Paypal integration to the site, I looked at various gems, and decided they were just going to drag me down with extra configuration and hassle. I ended up building Paypal IPN integration &lt;a href=&quot;https://gist.github.com/2768532&quot;&gt;in about 30 lines&lt;/a&gt; using pure ruby: no libraries. Most of that code was tests.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Don’t get me wrong: I still use frameworks for some of my projects, and libraries for all of them, but I’m learning to stop and think before cargo culting the latest stack of 25 different libraries before I can get anything done.&lt;/p&gt;

&lt;p&gt;Import a lightweight framework or library when you need to. Consider when you might be chaining yourself to it, which might make a later pivot difficult. It’s much easier to add a framework than to remove one from your project: pick the easiest thing to move away from.&lt;/p&gt;
</content></entry><entry><title>Job titles are a team anti-pattern</title><category term='lean'/><category term='agile'/><category term='team'/><category term='anti-pattern'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2012/09/job-titles-team-anti-pattern'/><updated>2012-09-25T20:48:24+01:00</updated><id>http://chrismdp.com/2012/09/job-titles-team-anti-pattern</id><content type='html'>&lt;p&gt;“We have two designers, two front-end developers, 2 back-end developers, and a tester.”&lt;/p&gt;

&lt;p&gt;“Allie and Jim tend to lay out most of the pages, with help from the others. Joe, Alice, Bob and Alan tend to write most of the code, with Bob and Alan working mainly on the server side of things. Darren makes sure our work matches up to what’s expected.”&lt;/p&gt;

&lt;p&gt;Which is better?&lt;/p&gt;

&lt;h2 id=&quot;job-titles-are-labels&quot;&gt;Job titles are labels&lt;/h2&gt;

&lt;p&gt;Labelling people with job titles as shorthand is one thing, but if we’re not careful our use of them can be dysfunctional:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Labels limit people’s potential.&lt;/em&gt; Our labels will limit what people will work on: they’ll subconciously start to stick to what their title says. This will happen even if they’re good people: it’s human nature to react to the culture which our team creates.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;People hide behind the label.&lt;/em&gt; “That’s designer work, that’s not what I’m good at.” This gets worse when we get more specific: “I’m a front end developer: I don’t write Ruby.” This stops techniques like Kanban working effectively as people are less likely to help each other, and creates silos of knowledge in the team.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Labels reduce people to resources.&lt;/em&gt; “We need 4.2 developer days for this project, with 2.4 designer days per developer day.” Labels are interchangeable: people aren’t. Some developers are orders of magnitude more productive than others, for example. By homogenising the team, we’re extracting the soul from the company: we might as well be selling crude oil, not people’s expertise.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’ve recently tried to stop using labels to describe myself: see &lt;a href=&quot;http://twitter.com/chrismdp&quot;&gt;my twitter bio&lt;/a&gt; for example. It’s been an interesting exercise, and I’d recommend it.&lt;/p&gt;

&lt;h2 id=&quot;selling-services-by-team-not-label&quot;&gt;Selling services by team, not label&lt;/h2&gt;

&lt;p&gt;One problem we run into is when we run companies which sell client services by the hour. It’s easy to put together a rate card for different job titles, but this exacerbates the label problem and embeds it into the economics. I prefer the method of selling whole team-weeks to the client, rather than individual developers: “This crack team of people will set you back £10,000 per week”, for example.&lt;/p&gt;

&lt;p&gt;Remember: the team environment is perfectly designed to achieve the result we’re currently getting. How are our job titles and labels affecting the way our team works today?&lt;/p&gt;

&lt;div class=&quot;notice&quot; style=&quot;display: inline-block&quot;&gt;
  &lt;b&gt;UPDATE:&lt;/b&gt; Thanks to &lt;a href=&quot;http://twitter.com/adrianh&quot;&gt;Adrian Howard&lt;/a&gt; and &lt;a href=&quot;https://agilarium.wikispaces.com/Fabrice+Aimetti&quot;&gt;Fabrice Aimetti&lt;/a&gt;, this post has been &lt;a href=&quot;https://agilarium.wikispaces.com/Les+intitul%C3%A9s+de+poste+sont+des+antipatterns+de+l%27%C3%A9quipe&quot;&gt;translated into French here.&lt;/a&gt;
&lt;/div&gt;

</content></entry><entry><title>Your code is a liability</title><category term='code'/><category term='craftsmanship'/><category term='lean'/><category term='agile'/><category term='team'/><category term='liability'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2012/09/code-is-a-liability'/><updated>2012-09-24T20:48:13+01:00</updated><id>http://chrismdp.com/2012/09/code-is-a-liability</id><content type='html'>&lt;p&gt;Your code is a liability.&lt;/p&gt;

&lt;p&gt;Every line you write means more for someone else to read, digest and understand. Each complex ‘clever’ regular expression represents another few minutes per team member trying to interpret what you wrote and why you wrote it. Every line you add limits your project’s responsiveness to change.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Only the feature that your code provides is an asset.&lt;/em&gt; The more that we reduce the amount of code we write, the lighter weight and more agile our software. The easier it is to understand, the less of a intellectual drag it is on the team.&lt;/p&gt;

&lt;p&gt;There used to be a lot of talk about getting into the “programmer zone”: that place of heightened focus where time rushes by as if a blur, and the number of lines of output a programmer produces per hour skyrockets… except that lines per hour was never the best measure of coder output to begin with. All that coder is doing is dragging down the project faster. Let’s hope they’re adding useful features during that process!&lt;/p&gt;

&lt;p&gt;It’s my belief that the best code is written in conversation, not in the “zone.” A team discussion about the architecture and the arrangement of the different concepts into the simplest and lightest code structure we can fathom will always improve on our own ideas, when we implement them in isolation at a ridiculous rate.&lt;/p&gt;

&lt;p&gt;Lightweight, lean coding like this sets our features free from the drag of the code and allows them to soar: responsive to change requests, and easily debugged as the code isn’t difficult to understand.&lt;/p&gt;
</content></entry><entry><title>Attempting validated learning with Sol Trader</title><category term='sol trader'/><category term='lean startup'/><category term='learning'/><category term='products'/><category term='agile'/><category term='lean'/><category term='business'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2012/05/attempting-validated-learning-with-sol-trader'/><updated>2012-05-14T10:18:47+01:00</updated><id>http://chrismdp.com/2012/05/attempting-validated-learning-with-sol-trader</id><content type='html'>&lt;div class=&quot;notice&quot;&gt;
  If you'd like to purchase Sol Trader you can do so at &lt;a href=&quot;http://soltrader.net&quot;&gt;soltrader.net&lt;/a&gt;.
&lt;/div&gt;

&lt;p&gt;Sol Trader has been out just about two weeks now. It’s been great fun to actually launch the product and gain real feedback from people.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I’ve sold about forty copies.&lt;/em&gt; It’s a start, and a really good one. Thank you to those of you who have already purchased the game, and for all the feedback and encouraging emails I’ve received. I’ve learnt a huge amount already and it’s really helped me guide the way ahead.&lt;/p&gt;

&lt;p&gt;The big question is: what’s next? How do I go from these humble yet encouraging beginnings to turning this game into something truly wonderful?&lt;/p&gt;

&lt;h2 id=&quot;validated-learning&quot;&gt;Validated learning&lt;/h2&gt;

&lt;p&gt;I’ve read Eric Ries’ excellent book &lt;a href=&quot;http://lean.st/&quot;&gt;The Lean Startup&lt;/a&gt; recently. In it he introduces a concept called &lt;a href=&quot;http://lean.st/principles/validated-learning&quot;&gt;Validated learning&lt;/a&gt; and goes on to define learning as the one important progress metric of startups: much more important than ‘customer numbers’ or ‘features’. Rather than define startups purely by ‘profit’ or ‘growth figures’, how can we ensure that we’re learning about how our business as fast as possible?&lt;/p&gt;

&lt;p&gt;For Sol Trader, there are two main things that I need to find out.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How can I ensure that I’m creating a game that people want to play, want to come back to, and want to tell their friends about?&lt;/li&gt;
  &lt;li&gt;How can I ensure a steady stream of new players for the game?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-sol-trader-hypothesis-board&quot;&gt;The Sol Trader Hypothesis board&lt;/h2&gt;

&lt;p&gt;In order to support this learning, I’ve created the Sol Trader hypothesis progress chart:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/sol-trader-hypotheses-chart.png&quot; alt=&quot;Sol Trader hypotheses chart&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is what I’m using to track my theories. A good week would be one where I’ve managed to prove or disprove a theory or two, rather than simply adding in more and more ‘stuff’.&lt;/p&gt;

&lt;p&gt;Note the &lt;a href=&quot;http://leanca.mp/2011/12/better-learning-through-velocity-how-to-use-kanban-to-learn-better/&quot;&gt;Kanban limits to work in progress&lt;/a&gt;. In order to get theories tested as fast as possible, it’s important to get them through the process as fast as possible.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You can view and interact with the board for yourself:&lt;/em&gt; it’s &lt;a href=&quot;https://trello.com/board/sol-hypotheses/4fb0cbe79c2ff2de54036903&quot;&gt;on Trello here&lt;/a&gt;. I’m determined to do as much of this learning in the open as possible. I’d love your input into the hypotheses that I’m testing: you can vote and comment on particular theories and tell me why you think they’re a true (or completely wrong). Any input you give here will have an effect on what I work on next, so if you want to influence the development, then get involved!&lt;/p&gt;

&lt;h2 id=&quot;freed-from-featuritis&quot;&gt;Freed from featuritis&lt;/h2&gt;

&lt;p&gt;I’ve really enjoyed freeing myself from the continual focus on “features features features”. Features by themselves mean nothing: they are actually a drag on your product, as you have to spend time and effort maintaining them. It’s only the value that your customers gain from them that’s important. Focusing on theories has meant that I’m always making progress, even if I’m simply learning what doesn’t work.&lt;/p&gt;

&lt;h2 id=&quot;hang-on-where-is-creativity-in-all-this&quot;&gt;Hang on: where is creativity in all this?&lt;/h2&gt;

&lt;p&gt;There’s a delicate balance here between listening to your customers and leading them in the direction you think they should go. I’m not going to sacrifice design flair and narrative to satisfy the baying (buying?) masses. This will likely always be a little bit of a niche game: there is a limit to the number of people interested in the genre. I plan to ultimately build the game I want to play, as opposed to the selling of something rubbish to satisfy everyone. Where’s the fun in that?&lt;/p&gt;

&lt;p&gt;The important thing is to learn about your customer base, &lt;em&gt;within the context of your original vision.&lt;/em&gt; If you cannot build a product within those constraints, time to look for a new business. Luckily, one of the earliest things I learnt through mailing list signups and a couple of &lt;a href=&quot;/2012/01/why-i-switched-from-ruby-back-to-c-plus-plus/&quot;&gt;hacker news&lt;/a&gt; &lt;a href=&quot;/2012/01/switching-sol-trader-from-ruby-to-c-plus-plus-one-week-on/&quot;&gt;appearances&lt;/a&gt; is that there’s a fair amount of latent demand for the vision I’ve got for the game, which is what spurred me on to &lt;a href=&quot;/2012/05/sol-trader-now-in-alpha&quot;&gt;get the alpha out&lt;/a&gt; in the first place.&lt;/p&gt;

&lt;p&gt;What do you think of learning in public like this, and what do you think of my development approach?&lt;/p&gt;

&lt;div class=&quot;notice&quot;&gt;
  If you'd like to purchase Sol Trader you can do so at &lt;a href=&quot;http://soltrader.net&quot;&gt;soltrader.net&lt;/a&gt;.
&lt;/div&gt;

</content></entry><entry><title>Sol Trader now in Alpha</title><category term='sol trader'/><category term='products'/><category term='agile'/><category term='lean'/><category term='lean startup'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2012/05/sol-trader-now-in-alpha'/><updated>2012-05-02T15:37:44+01:00</updated><id>http://chrismdp.com/2012/05/sol-trader-now-in-alpha</id><content type='html'>&lt;h2 id=&quot;its-released&quot;&gt;It’s released!&lt;/h2&gt;

&lt;p&gt;After a hectic four months of early development &lt;a href=&quot;http://soltrader.net&quot;&gt;Sol Trader has gone into Alpha&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://soltrader.net&quot;&gt;&lt;img src=&quot;http://soltrader.net/files/sol-trader-hero.png&quot; style=&quot;width: 48em&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With this release, you can explore the known Solar System and make money through trading on the stock markets. There isn’t much else there yet, but I’m planning a slew of improvements over the coming months.&lt;/p&gt;

&lt;p&gt;I’ve decided to charge right off the bat: you can buy the Alpha for £5 (about $8). This price will go up as I put more work into the game, and future game updates will be free until it’s finished.&lt;/p&gt;

&lt;h2 id=&quot;exciting-yet-terrifying&quot;&gt;Exciting yet terrifying&lt;/h2&gt;

&lt;p&gt;This is both a wonderfully exciting and deeply terrifying moment for me. The game isn’t near finished, yet I’ve released it on an unsuspecting set of game players. I’ve been reading the &lt;a href=&quot;http://theleanstartup.com/&quot;&gt;Lean Startup&lt;/a&gt; and I think it’s ready for feedback. This is my &lt;a href=&quot;http://www.startuplessonslearned.com/2009/08/minimum-viable-product-guide.html&quot;&gt;Minimum Viable Product&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The exciting bit: I finally get a sense of whether I’m going in the right direction and whether people might enjoy the fairly simple mechanics that are on offer in this version. Seeing Paypal emails letting me know that people have bought the game is very gratifying, even if I have to manually activate every purchase with a knocked-together ruby script.&lt;/p&gt;

&lt;p&gt;The terrifying bit is: I finally get a sense of whether people actually might play this game. After all, if nobody likes it at all, there’s not much point continuing.&lt;/p&gt;

&lt;h2 id=&quot;how-im-going-to-improve-the-game&quot;&gt;How I’m going to improve the game&lt;/h2&gt;

&lt;p&gt;I’m using &lt;a href=&quot;http://kissmetrics.com&quot;&gt;KISSMetrics&lt;/a&gt; to track both website activity and gameplay. So far it’s working out well: I can see how people go through the site, make purchases, and then sign in and play the game.&lt;/p&gt;

&lt;p&gt;I’ve deliberately not worked on the code behind the game for a couple of days, to let the metrics filter through and inform me about what’s next.  So far the reaction has been generally positive - my metrics have had good framerates and people are playing for an average of 15 minutes and making about a dozen visits to planets each.&lt;/p&gt;

&lt;p&gt;My first impressions based on early metrics and feedback: &lt;em&gt;I need to make the economy more realistic&lt;/em&gt; as I think this will cause people to play the game for longer, and &lt;em&gt;I need to add a video of gameplay&lt;/em&gt; to the front page to improve my sign up/purchase rates.&lt;/p&gt;

&lt;p&gt;More on how I’m following the Lean Startup approach over the next few weeks and months.&lt;/p&gt;

&lt;h2 id=&quot;the-long-road&quot;&gt;The long road&lt;/h2&gt;

&lt;p&gt;This is where I need self-discipline more than ever. My weakness is that when I feel like I’ve achieved something (like launching an alpha), my tendency is straight away to look for the next thing. I’m determined not to let that happen here. &lt;em&gt;I feel like I’ve delivered on perhaps 5% of the vision for the game.&lt;/em&gt; I’m passionate about seeing the rest of the vision fulfilled.&lt;/p&gt;

&lt;p&gt;The more of you who buy the game now and play it, the clearer the way forward becomes. I’m grateful for every purchase: thank you to the brave early adopters!&lt;/p&gt;

&lt;p&gt;If you’ve purchased the game, what can I do to improve it? If you haven’t purchased it yet, what can I put on the website to better inform your decision? &lt;a href=&quot;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#116;&amp;#111;:&amp;#099;&amp;#104;&amp;#114;&amp;#105;&amp;#115;&amp;#064;&amp;#115;&amp;#111;&amp;#108;&amp;#116;&amp;#114;&amp;#097;&amp;#100;&amp;#101;&amp;#114;&amp;#046;&amp;#110;&amp;#101;&amp;#116;&quot;&gt;Let me know&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;notice&quot;&gt;
  If you'd like to purchase Sol Trader you can do so at &lt;a href=&quot;http://soltrader.net&quot;&gt;soltrader.net&lt;/a&gt;.
&lt;/div&gt;

</content></entry><entry><title>Layers of abstraction: writing great cucumber code</title><category term='bdd'/><category term='cucumber'/><category term='agile'/><category term='ux'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2011/09/layers-of-abstraction-writing-great-cucumber-code'/><updated>2011-09-15T07:44:41+01:00</updated><id>http://chrismdp.com/2011/09/layers-of-abstraction-writing-great-cucumber-code</id><content type='html'>&lt;p&gt;I blogged about Gojko’s thoughts on layers of abstraction &lt;a href=&quot;/2011/09/layers-of-abstraction-bdd-ux&quot;&gt;a week or so ago&lt;/a&gt;, discussing three different ways we can think about the behaviour of any system. These way are: the business rules, the workflow of that system, and the specific activity the user is undertaking.&lt;/p&gt;

&lt;p&gt;Today I want to think about how we can leverage these insights to help us write really good cucumber features and step code.&lt;/p&gt;

&lt;h2 id=&quot;i-used-to-write-terrible-features&quot;&gt;I used to write terrible features&lt;/h2&gt;

&lt;p&gt;Do these look familiar?&lt;/p&gt;

&lt;p&gt;{% highlight cucumber %}
Feature: Paul pays employees
  In order to retain staff
  As Paul the Payroll Manager I want to pay my staff&lt;/p&gt;

&lt;p&gt;Scenario:
  Given an admin user called “Paul” with a password “password”
  And a user called “Bob”
  And “Bob” is an employee
  And “Bob” gets paid “$2,000” a month
  When I visit the homepage
  And I click on “Log in”
  And I fill in “username” with “Paul”
  And I fill in “password” with “password”
  And I click “Log in”
  And I click “Payroll”
  And I click “Bob”
  And I click “Pay”
  And I enter “$2,000”
  And I click “Pay”
  Then I should see “Bob has been paid”
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;We’ve all written features like this in the past: there’s &lt;a href=&quot;http://benmabey.com/2008/05/19/imperative-vs-declarative-scenarios-in-user-stories.html&quot;&gt;plenty&lt;/a&gt; &lt;a href=&quot;http://dannorth.net/2011/01/31/whose-domain-is-it-anyway/&quot;&gt;of&lt;/a&gt; &lt;a href=&quot;http://elabs.se/blog/15-you-re-cuking-it-wrong&quot;&gt;guidance&lt;/a&gt; out there these days to help you write better features than this. However, rather than just accept “best practices” at face value, let’s take a look under the hood and work out &lt;em&gt;why this is better.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;variance-revisited&quot;&gt;Variance revisited&lt;/h2&gt;

&lt;p&gt;Last time I discussed this topic, I mentioned the key differentiator was variance. Business rules are unlikely to change significantly unless the company decides to pivot: this is more likely in a startup but still less likely overall. The workflow is normally fairly static, but the activity the user follows changes regularly.&lt;/p&gt;

&lt;p&gt;Co-incidentally, there are three levels of behaviour implementation that we write when we work with Cucumber:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;The feature files.&lt;/em&gt; Ideally there are written in collaboration with the customer and are written out before coding begins.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;The step definitions.&lt;/em&gt; We implement each step of our feature with ruby code as we are writing the feature, sometimes reworking existing steps to be more powerful (often at our peril).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Support code.&lt;/em&gt; Cucumber executes our steps inside a ‘world object’, which we can easily extend through the adding of modules and methods.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each of these implementation levels is also differentiated in terms of variance:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;The feature files are the most difficult to change,&lt;/em&gt; as this ideally requires a conversation with the customer, and any wording changes have a knock on effect on step definitions.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Step definitions can be tricky to change,&lt;/em&gt; especially if they are used by multiple feature files. Their implementation is closely tied to the regular expression they match, which can make them difficult to understand if highly reused: one case where Don’t Repeat Yourself can fall down quickly.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Support code is easy to change&lt;/em&gt; as it’s plain ruby and as such very malleable: we can easily refactor and be careful with our naming to tease out duplication.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;where-to-put-the-code&quot;&gt;Where to put the code?&lt;/h2&gt;

&lt;p&gt;If it’s easy to change support code, then it follows that we should put our higest varying code there: namely the code which describes specific activity. Normally only programmers are interested in this code and it’s easy enough to find and understand if the support methods are well-named.&lt;/p&gt;

&lt;p&gt;The workflow code lives best in individual steps which aren’t often reused and which have simple regular expressions. The people who are interested in this area are normally designers and User Experience people, who should be able to read well-named ruby code at a pinch and therefore can understand what’s going on.&lt;/p&gt;

&lt;p&gt;The code that’s least likely to change (the business rules) can safely live in the feature files with impunity, where it can be discussed with product owners. The product owner is most interested in the rules of their system: they’re only moderately interested in the workflow and usually aren’t too opiniated about the specific activities. That’s partly why we struggle to write features with our clients: if we’re trying to discuss activity specifics like in the example feature above, we’re probably nailing down details too early and bore our product owner to tears. It’s hard enough for a programmer to read these sorts of features: how can we expect anyone else to understand them?&lt;/p&gt;

&lt;h2 id=&quot;an-example&quot;&gt;An example&lt;/h2&gt;

&lt;p&gt;Given this, how would I refactor the feature above to improve things? After deleting web_steps.rb, I would rewrite the feature with my customer citing the business rule, rather than any specific workflow:&lt;/p&gt;

&lt;p&gt;{% highlight cucumber %}
Feature: Paul pays employees
  In order to retain staff
  As Paul the Payroll Manager I want to pay my staff&lt;/p&gt;

&lt;p&gt;@paul_signed_in
Scenario:
  Given an employee called “Bob”
  Then I should be able to pay “Bob” his salary
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;My step definitions would look something like this:&lt;/p&gt;

&lt;p&gt;{% highlight ruby %}
Given /^an employee called “([^”]+)”$/ do |employee_name|
  create_employee(employee_name)
end&lt;/p&gt;

&lt;p&gt;Then /^I should be able to pay “([^”]+)” his salary$/ do |employee_name|
  pay_salary_to(employee_)
end
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;And the support code might look roughly like this:&lt;/p&gt;

&lt;p&gt;{% highlight ruby %}
Before(“paul_signed_in”) do
  paul = create_employee(“Paul”)
  paul.assign_role(“payroll”)
  sign_in_as(paul)
end&lt;/p&gt;

&lt;p&gt;def create_employee(name)
  Employee.create!(:name =&amp;gt; name, :username =&amp;gt; name,
    :password =&amp;gt; “password”)
end&lt;/p&gt;

&lt;p&gt;def pay_salary_to(name)
  payee = Employee.find_by_name(name)
  visit payroll_employee_path(payee)
  fill_ :salary, :with =&amp;gt; payee.salary
  click_button “Pay”
end
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;You’re also free not to test the UI if you’d prefer not to in your support code. However, as we’ve given ourselves the ability to remove duplication, it’s easy to change the code when the UI changes. So far I’ve not found UI brittleness to be too much of an issue.&lt;/p&gt;

&lt;h2 id=&quot;in-conclusion&quot;&gt;In conclusion&lt;/h2&gt;

&lt;p&gt;These are rules of thumb, but they can be very helpful in keeping the rate of development up as our codebase expands. One change that I’ve made recently to my own practice is to be more aggressive at pushing activity code down into support code, and it’s really helped to keep feature code flexible and easy to change.&lt;/p&gt;

&lt;p&gt;Many people have given up on Cucumber, citing long build times and the brittleness of the test code as primary reasons. Obie Fernandez recently &lt;a href=&quot;http://blog.obiefernandez.com/content/2011/05/the-dark-side-beckons.html&quot;&gt;blogged&lt;/a&gt; about finding “high-ceremony” development too much work in a startup. I think that’s a real shame: it’s a fantastic way to drill down to specific behaviour and ensure you’re only building what you need. If you think about the behaviour of your system correctly, aggressively remove duplication in all your code (including test code), and only test code you own then you shouldn’t be burdening yourself with too much of an overhead.&lt;/p&gt;

&lt;p&gt;Have you given up using Cucumber? Or if you use it, is this the way you do it or do you have a better method?&lt;/p&gt;

</content></entry><entry><title>Layers of abstraction: combining BDD and UX</title><category term='bdd'/><category term='cucumber'/><category term='agile'/><category term='ux'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2011/09/layers-of-abstraction-bdd-ux'/><updated>2011-09-05T20:44:03+01:00</updated><id>http://chrismdp.com/2011/09/layers-of-abstraction-bdd-ux</id><content type='html'>&lt;p&gt;I first came across &lt;a href=&quot;http://gojko.net/2010/04/13/how-to-implement-ui-testing-without-shooting-yourself-in-the-foot-2/&quot;&gt;Gokjo Adzic’s thoughts on the different levels of UI test automation&lt;/a&gt; some time ago: it’s a really nice way to think not just about test automation, but about the different levels of behaviour in any software project.&lt;/p&gt;

&lt;p&gt;I’ve been considering the similarities between these levels of behaviour and the user experience discipline, and how we might leverage that thinking to iterate towards a better way of combining agile methods with UX.&lt;/p&gt;

&lt;h2 id=&quot;three-ways-to-think-of-behaviour&quot;&gt;Three ways to think of behaviour&lt;/h2&gt;

&lt;p&gt;Applying these rules to any software system gives us three ways to think about the behaviour of that system.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The business rules.&lt;/em&gt; These are high level and abstract. To take the example of a Payroll system: the business rules represent such things as “Staff members always get paid on the last Friday of the month”, or “Temporary staff workers must submit a timesheet before being paid.”&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The workflow.&lt;/em&gt; The workflow represents the logical steps a user might go through to fulfil a business rule. For example: “As a HR person, I want to see a list of temporary workers and pay those who are shown to have submitted a timesheet.”&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The specific activity.&lt;/em&gt; The detailed steps a user goes through to achieve the workflow: “I click on the ‘show temp workers’ link; I see an icon next to those who have submitted timesheets, along with the last date they submitted; I click the ‘Pay’ button…”&lt;/p&gt;

&lt;p&gt;The key differentiator here is &lt;em&gt;variance.&lt;/em&gt; The business rules of a system are the least likely to change: changing these might represent a &lt;a href=&quot;http://venturebeat.com/2010/04/14/business-plan-not-working-time-to-pivot/&quot;&gt;pivot&lt;/a&gt; and will incur significant development cost.&lt;/p&gt;

&lt;p&gt;The specific activities change most often: perhaps at a designer’s whim, or through localisation or other text changes. We should therefore strive to ensure that changing the activities incurs as small a development cost as possible.&lt;/p&gt;

&lt;h2 id=&quot;the-agile--user-experience-process-is-similar&quot;&gt;The agile / user experience process is similar&lt;/h2&gt;

&lt;p&gt;If you think about it, the three layers represent the different and progressive stages of thinking that we go through when designing the user experience of new applications.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Business rules of the system are laid down by the product owner at the start of a project.&lt;/em&gt; When considering the user experience of the application, we are careful to first understand a high level overview of the purpose of the software, getting as much useful information as possible from the product owner at an inception.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Workflow design is led by the UX team and happens when a new story is created.&lt;/em&gt; When creating a new slice of functionality, we carefully think through the workflow of that particular feature, using wireframing, &lt;a href=&quot;/2011/04/cucumbers-with-personality&quot;&gt;personas&lt;/a&gt; or &lt;a href=&quot;/2010/02/the-story-card-is-not-the-story&quot;&gt;whatever works&lt;/a&gt; combined with &lt;a href=&quot;/2010/02/the-story-card-is-not-the-story&quot;&gt;lots of discussion&lt;/a&gt;. The net result is a basic step by step workflow of the new feature, without too much detail added.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Specific activities are created by developers and graphic designers.&lt;/em&gt; Developers and designers make a thousand little decisions about the user experience of the application as they build the feature, hopefully discussing their thoughts with the UX experts on their team if they feel out of their depth.&lt;/p&gt;

&lt;h2 id=&quot;from-general-to-specific&quot;&gt;From general to specific&lt;/h2&gt;

&lt;p&gt;As we create features, we are iterating from the general to the specific; from the high level to the detail. To determine all the granular behaviour up front (and all the precise graphical designs) is inefficient: we are likely to change our minds about the detail. Yet this is what many user experience practioners and designers try to do: if not for the whole project, then for whole sections of the project.&lt;/p&gt;

&lt;p&gt;For example, if you’re doing more than a dozen wireframes or so in advance, are you doing too much thinking ahead of time? Why not resist, have more agility, and let the completion of some of the features guide your future thinking? Likewise, I have often been presented with dozens of perfect photoshop mockups to code up, often without any clear direction on the behaviour represented within them. It is more agile to keep things as high level as possible for as long as possible. How about producing a guidance mockup and a style guide, and then sitting down and guiding the developers on the design when they come to build the feature?&lt;/p&gt;

&lt;p&gt;This doesn’t mean you can avoid the detail. You need both ends of the behaviour spectrum: neglect the detail of the experience and you &lt;a href=&quot;/2010/05/ux-is-everything&quot;&gt;settle for mediocrity&lt;/a&gt;. Conversly if we neglect the high level our application becomes a ship without a rudder and the user experience will become confused.&lt;/p&gt;

&lt;p&gt;In the future I plan to discuss how the use of &lt;a href=&quot;http://cukes.info&quot;&gt;Cucumber&lt;/a&gt; fits in to this, and how we can progressively iterate our cucumber features as we get more and more specific about a particular feature.&lt;/p&gt;
</content></entry><entry><title>e-petitions: handling traffic</title><category term='code'/><category term='scaling'/><category term='agile'/><category term='adn'/><category term='e-petitions'/><category term='government'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2011/08/e-petitions-handling-traffic'/><updated>2011-08-30T13:51:38+01:00</updated><id>http://chrismdp.com/2011/08/e-petitions-handling-traffic</id><content type='html'>&lt;p&gt;Since I &lt;a href=&quot;/2011/07/e-petitions-deconstructed&quot;&gt;last blogged about e-petitions&lt;/a&gt; we had what conservatively could be described as “something of a traffic spike”. The &lt;a href=&quot;http://www.bbc.co.uk/news/uk-politics-14474429&quot;&gt;amount of interest&lt;/a&gt; surrounding the site massively exceeded all our expectations.&lt;/p&gt;

&lt;p&gt;Given the time available to us, we had rated the site for about 10 requests a second, basing our expectations on 50% more usage than the original e-petitions site. However, during peak times we were seeing non-cached bursts of traffic through to the site of between 70-120 requests a second: we’d load tested up to about 40-50. This caused the site to intermittently produce &lt;a href=&quot;http://epetitions.direct.gov.uk/500.html&quot;&gt;500 errors&lt;/a&gt;; this in turn &lt;a href=&quot;http://www.thesun.co.uk/sol/homepage/news/3733792/E-petitions-website-down-on-first-day.html&quot;&gt;producing&lt;/a&gt; &lt;a href=&quot;http://www.guardian.co.uk/politics/2011/aug/04/government-e-petition-website-crashes&quot;&gt;headlines&lt;/a&gt; that we really didn’t want to see.&lt;/p&gt;

&lt;p&gt;Most perplexingly, we were still seeing intermittent failure messages in the logs when the site was getting about 20-30 requests a second, even though that had worked fine in testing. During this time none of the servers were under a huge amount of load, so we struggled to find the bottleneck.&lt;/p&gt;

&lt;p&gt;Eventually we discovered that the hardware firewall we’d put in place to help improve security wasn’t able to handle the number of network connections required of it, and was randomly dropping network connections. This included connections on the internal network, which caused connectivity problems to the seach and database servers. This caused most of the intermittent failures people saw. The firewall had been set up after we had done our load testing and we’d not re-run our testing since then, so we hadn’t spotted the problem
.&lt;/p&gt;

&lt;p&gt;Once this had been fixed, we were on to more familiar territory. The dedicated solr server we were running for search was really struggling with only 4 CPUs, so we rebooted it using 8 CPUs and it started working much better.&lt;/p&gt;

&lt;p&gt;We also made a number of other changes to the site to make it more robust:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;We brought an application server down, cloned the disk and set up a third application server within about half an hour. It’s not as quick as running on Amazon EC2, but it’s not a bad turnaround for a more traditionally hosted site.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We set up monitoring on the site using &lt;a href=&quot;http://munin-monitoring.org/&quot;&gt;Munin&lt;/a&gt;, which is a brilliant server montoring tool. This helped us discover the solr issues much more quickly.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We went right through the code and turned on caching everywhere we hadn’t yet thought of, including caching of more pages surrounding the signing step.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We worked around a sunspot issue which was causing a petition to reindex after every signature, stressing the search server further.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;lessons-learnt&quot;&gt;Lessons learnt&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Run your load tests again after any configuration change, even if it shouldn’t make a difference. If we’d done this, we’d have spotted the firewall configuration issue before the public did.&lt;/li&gt;
  &lt;li&gt;Set up proper measuring tools before the event. It took us a while to find the best cause of action with the search server because we were relying on &lt;a href=&quot;http://newrelic.com&quot;&gt;New Relic&lt;/a&gt; to monitor the application servers only. Once we had Munin running we could more easily make more CPUs available to the search server.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The vast majority of the above changes were made within one (very late) night: from a customer point of view, being agile isn’t just about how flexible you are during development, but how responsive you can be when there are problems. Our technology and stack choice really helped us out here, and I also particularly wanted to thank the Alpha.gov guys (&lt;a href=&quot;http://twitter.com/beng&quot;&gt;Ben Griffiths&lt;/a&gt;, &lt;a href=&quot;http://twitter.com/jystewart&quot;&gt;James Stewart&lt;/a&gt; and &lt;a href=&quot;http://twitter.com/fidothe&quot;&gt;Matt Patterson&lt;/a&gt;) and &lt;a href=&quot;http://www.unboxedconsulting.com/people/alex-tomlins&quot;&gt;Alex Tomlins&lt;/a&gt; from &lt;a href=&quot;http://unboxedconsulting.com&quot;&gt;Unboxed&lt;/a&gt; for stepping in and helping &lt;a href=&quot;http://www.unboxedconsulting.com/people/jolyon-pawlyn&quot;&gt;Jolyon&lt;/a&gt; and myself out that evening.&lt;/p&gt;

&lt;p&gt;Jolyon and I are &lt;a href=&quot;http://lanyrd.com/2011/lrug-september/sgzxr/&quot;&gt;giving a talk about e-petitions at LRUG&lt;/a&gt; next month if you’d like to hear more.&lt;/p&gt;
</content></entry><entry><title>Work with me</title><category term='code'/><category term='meta'/><category term='agile'/><category term='training'/><category term='life'/><category term='tdd'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2011/08/work-with-me'/><updated>2011-08-22T15:36:53+01:00</updated><id>http://chrismdp.com/2011/08/work-with-me</id><content type='html'>&lt;p&gt;I’ve been taking a break from my work and blogging for the summer: but now I’m looking for work again from next week.&lt;/p&gt;

&lt;p&gt;To this end I’ve put up a &lt;a href=&quot;/workwithme.html&quot;&gt;new page&lt;/a&gt; on this site which has all the details of what I can offer, and my availability. If you’d like to work with me this autumn, do &lt;a href=&quot;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#116;&amp;#111;:&amp;#099;&amp;#104;&amp;#114;&amp;#105;&amp;#115;&amp;#064;&amp;#116;&amp;#104;&amp;#105;&amp;#110;&amp;#107;&amp;#099;&amp;#111;&amp;#100;&amp;#101;&amp;#108;&amp;#101;&amp;#097;&amp;#114;&amp;#110;&amp;#046;&amp;#099;&amp;#111;&amp;#109;&quot;&gt;get in touch&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I also plan to start blogging again soon, with my first topic being &lt;a href=&quot;/2011/08/e-petitions-handling-traffic&quot;&gt;how we handled the massive site traffic&lt;/a&gt; we experienced on e-petitions &lt;a href=&quot;http://www.bbc.co.uk/news/uk-politics-14474429&quot;&gt;a couple of weeks ago&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>e-petitions: deconstructed</title><category term='code'/><category term='chef'/><category term='agile'/><category term='adn'/><category term='government'/><category term='e-petitions'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2011/07/e-petitions-deconstructed'/><updated>2011-07-29T15:57:09+01:00</updated><id>http://chrismdp.com/2011/07/e-petitions-deconstructed</id><content type='html'>&lt;div class=&quot;notice&quot;&gt;Update: I've posted more about the massive traffic surge and how we responded &lt;a href=&quot;/2011/08/e-petitions-handling-traffic&quot;&gt;here&lt;/a&gt;.&lt;/div&gt;

&lt;p&gt;The project that I’ve been working on at the Government Digital Service (GDS) for the last few weeks has just been launched. It’s the new Government &lt;a href=&quot;http://epetitions.direct.gov.uk&quot;&gt;e-petitions&lt;/a&gt; service, which replaces the old Number 10 petitions website run by the previous government. Time to talk about the architecture, how we set the team up and the effect the project is having within government.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/e-petitions.png&quot; alt=&quot;e-petitions&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-project&quot;&gt;The project&lt;/h2&gt;

&lt;p&gt;The project was overseen and run by &lt;a href=&quot;http://twitter.com/HMGSkunks&quot;&gt;Skunkworks&lt;/a&gt;, the new innovation arm of the GDS that specialises in quick projects with small teams. They hired the &lt;a href=&quot;http://agiledelivery.net&quot;&gt;Agile Delivery Network&lt;/a&gt; (ADN) to do the work: this is a non-profit organisation I’m involved with that’s trying to help government deliver IT projects more quickly.&lt;/p&gt;

&lt;p&gt;We put together a team consisting of myself and two other developers, a designer, a tester/project manager, our customer and an analyst to help with the copy and training the staff who will be moderating petitions.&lt;/p&gt;

&lt;p&gt;We originally started the project at the very beginning of June, knowing that we only had six weeks to get the site live. We ran three two-week iterations, during which requirements shifted around as the important deliverables came into focus.&lt;/p&gt;

&lt;p&gt;There were a number of major technical hurdles. We spent a lot of time getting the accessibility of the site right, and tweaking the feel of the search feature. Getting the site hosted was difficult: it’s not straightforward finding website hosting for a government website that collects personal data.&lt;/p&gt;

&lt;p&gt;Whilst we tried to find the right place to host the site, we spent a lot of time using &lt;a href=&quot;http://www.opscode.com/chef&quot;&gt;Chef&lt;/a&gt; to test our build configuration on Amazon EC2. When the hosting came online, it was relatively simple (thankfully) to deploy the site to the production environment, as we’d already prepared all the configuration scripts in advance.&lt;/p&gt;

&lt;h2 id=&quot;the-tech&quot;&gt;The tech&lt;/h2&gt;

&lt;p&gt;We built the site in Rails, with a MySQL and a Solr search backend. It’s running in production on two application servers, through nginx for static content with unicorn at the backend. There is one dedicated DB server, and one dedicated Solr server. Our JMeter testing showed that we may not need the dedicated Solr server, so that might also share CPU with a read-only MySQL slave in future if the site traffic gets heavier.&lt;/p&gt;

&lt;p&gt;For server configuration, we’re running a customised version of chef-solo on each of the servers, bootstrapped with a little bespoke script. We didn’t want to set up a chef server as we didn’t get the hosting environment set up until quite late in the day, and we didn’t want an external server with access to the production environment.&lt;/p&gt;

&lt;p&gt;Chef turned out to be awesome: it was very satisfying to watch all the scripts we’d built on EC2 “just work” (well, almost) on the live environment. Nginx + Unicorn was also a highlight: it’s more Unix-y that Apache + Passenger and handles graceful restarting very nicely.&lt;/p&gt;

&lt;h2 id=&quot;the-reaction&quot;&gt;The reaction&lt;/h2&gt;

&lt;p&gt;The site has been well received by those outside government, but perhaps just as importantly the way that we ran the project caused a bit of a stir within Whitehall too. Agile projects are still rare in government, and IT spending is a &lt;a href=&quot;http://www.bbc.co.uk/news/uk-politics-14314935&quot;&gt;hot topic&lt;/a&gt; right now. It’s great that people are beginning to think about how to deliver software in better ways and the guys at Skunkworks are doing really well at promoting agile methods internally.&lt;/p&gt;

&lt;h2 id=&quot;the-team&quot;&gt;The team&lt;/h2&gt;

&lt;p&gt;Everyone who worked hard to make the site what it is: it was great fun working with you!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.unboxedconsulting.com/people/tom-dickinson&quot;&gt;Tom Dickinson&lt;/a&gt; from &lt;a href=&quot;http://unboxedconsulting.com&quot;&gt;Unboxed&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://uk.linkedin.com/in/peterherlihy&quot;&gt;Peter Herlihy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://uk.linkedin.com/pub/charlie-macloughlin/3/183/821&quot;&gt;Charlie MacLoughlin&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.unboxedconsulting.com/people/jolyon-pawlyn&quot;&gt;Jolyon Pawlyn&lt;/a&gt; from &lt;a href=&quot;http://unboxedconsulting.com&quot;&gt;Unboxed&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.unboxedconsulting.com/people/alan-thomas&quot;&gt;Alan Thomas&lt;/a&gt; from &lt;a href=&quot;http://unboxedconsulting.com&quot;&gt;Unboxed&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.unboxedconsulting.com/people/will-tomlins&quot;&gt;Will Tomlins&lt;/a&gt; from &lt;a href=&quot;http://unboxedconsulting.com&quot;&gt;Unboxed&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Me&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We’re planning to get the code out on github soon. Hope you like the site and enjoy using it.&lt;/p&gt;
</content></entry><entry><title>Cucumbers with personality</title><category term='cucumber'/><category term='personas'/><category term='agile'/><category term='ux'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2011/04/cucumbers-with-personality'/><updated>2011-04-18T15:17:31+01:00</updated><id>http://chrismdp.com/2011/04/cucumbers-with-personality</id><content type='html'>&lt;p&gt;&lt;i&gt;&quot;Personality is everything in art and poetry.&quot;&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;– &lt;a href=&quot;http://en.wikipedia.org/wiki/Johann_Wolfgang_von_Goethe&quot;&gt;Johann Wolfgang von Goethe&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One element of Cucumber feature-writing that is often neglected is the &lt;em&gt;role.&lt;/em&gt; This is the section that sits between the well known &lt;em&gt;In order that&lt;/em&gt; and &lt;em&gt;I want to.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It’s very easy to concentrate on &lt;em&gt;what&lt;/em&gt; we wish to accomplish, and &lt;em&gt;why&lt;/em&gt; we want to do it. The role that we’re in, however, affects the &lt;em&gt;way&lt;/em&gt; that we do it, and how the action is perceived as it is carried out. It is in fact, &lt;em&gt;the key to user experience of the feature.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;How often have we lazily written features like this?&lt;/p&gt;

&lt;p&gt;{% highlight “text” %}
In order to know how much money I am making
As a user
I want to see a report of widgets sold this month
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;What we want is clear, as is why we want it. What’s not clear is who is doing the asking, and therefore there’s no clue as to what the user experience should be like.&lt;/p&gt;

&lt;h2 id=&quot;a-sprinkling-of-personality&quot;&gt;A sprinkling of personality&lt;/h2&gt;

&lt;p&gt;Next time we find ourselves writing “as a user”, let’s take a minute to stop and think whether we can be more specific.&lt;/p&gt;

&lt;p&gt;Consider this feature:&lt;/p&gt;

&lt;p&gt;{% highlight “text” %}
In order to know how much money I am making
As the head of the company
I want to see a report of widgets sold this month
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;This guy is time poor, and just wants the facts, right now. Sure, he might want it to look good, but doesn’t care much beyond the numbers.&lt;/p&gt;

&lt;p&gt;Now how about this one?&lt;/p&gt;

&lt;p&gt;{% highlight “text” %}
In order to know how much money I am making
As a design assistant responsible for collating reports
I want to see a report of widgets sold this month
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;This person possibly has a little more time on their hands, and their overriding concern might be to impress their boss. Therefore the aesthetics of the report layout might be very important, and it might not matter so much if the page is slower to load.&lt;/p&gt;

&lt;h2 id=&quot;personas-driving-stories&quot;&gt;Personas driving stories&lt;/h2&gt;

&lt;p&gt;On a recent project for a coaching company we took this a step further. We produced some great personas during the inception (Bob Coachee, Jean Coach), and then went so far as to use them in our features:&lt;/p&gt;

&lt;p&gt;{% highlight “text” %}
In order to know who I am coaching next
As Jean the coach
I want to see a calendar showing today’s appointments
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Because everyone on the project knew the background behind these characters, the resulting features communicated a lot of knowledge. We all knew exactly how they were using the system, and what they needed out of it. We had about six personas in total, and they proved very helping in communicating the user experience of the feature to the team.&lt;/p&gt;

&lt;p&gt;Do you create specific personas for your projects, and have you ever used them when writing your features? Did you see a benefit?&lt;/p&gt;
</content></entry><entry><title>Card Of The Day: Actually Do Retrospective Actions</title><category term='agile'/><category term='retrospectives'/><category term='process'/><category term='index cards'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2010/07/card-of-the-day'/><updated>2010-07-22T10:45:00+01:00</updated><id>http://chrismdp.com/2010/07/card-of-the-day</id><content type='html'>&lt;p&gt;&lt;img src=&quot;/files/card-of-the-day-1.png&quot; alt=&quot;Current cards of the day at eden&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Our current Card Of The Day board at Eden&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Retrospectives are something we’ve been doing regularly for quite a while at Eden, but we’ve hit a problem. It’s very easy to come up with a great list of actionable items, and then very easy never to look at them again. Don’t tell me you’ve never done this :)&lt;/p&gt;

&lt;p&gt;We’ve started doing something slightly different at Eden to try and stop this happening: we’re using a method we’ve called Card Of The Day.  &lt;/p&gt;

&lt;p&gt;When the retrospective is finished, we take all of the cards with &lt;a href=&quot;http://en.wikipedia.org/wiki/SMART_criteria&quot;&gt;SMART&lt;/a&gt; action goals and put them on our company kanban board to ensure they’re done. Then we take all the cards that are a little more hazy (the sort of cards that say: “Be better at X”), we pin them up on the wall, and every morning after standup we read one out at random to the team.&lt;/p&gt;

&lt;p&gt;Normally this has a “ahh, yes” effect on the team. Sometimes it generates a conversation, sometimes an action we hadn’t thought of yet and something else to go on the Backlog. There’s always something that comes out of it.&lt;/p&gt;

&lt;p&gt;It’s not a perfect method, but it’s working better than the alternative: feeling guilty at the beginning of the next retrospective about all the terribly important things we haven’t done.&lt;/p&gt;

&lt;p&gt;Have you tried something similar? Or do you have an alternative way to remember to do retrospective actions?&lt;/p&gt;
</content></entry><entry><title>Radiating status at Eden</title><category term='agile'/><category term='code'/><category term='information radiator'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2010/03/radiating-stats-at-eden'/><updated>2010-03-22T13:55:00+00:00</updated><id>http://chrismdp.com/2010/03/radiating-stats-at-eden</id><content type='html'>&lt;p&gt;&lt;a href=&quot;http://www.agileadvice.com/archives/2005/05/information_rad.html&quot;&gt;Information Radiators&lt;/a&gt; are always a good idea for software teams, and I’ve been pondering how best to show project state at &lt;a href=&quot;http://edendevelopment.co.uk&quot;&gt;Eden Development&lt;/a&gt; for a while.&lt;/p&gt;

&lt;p&gt;Here are the various iterations we’ve been through:&lt;/p&gt;

&lt;h2 id=&quot;iteration-1-build-status-messages&quot;&gt;Iteration 1: Build status messages&lt;/h2&gt;

&lt;p&gt;We’ve had a continuous integration server running on integrity for several months, and we wanted to make it obvious how we were doing, so we got an old mac mini out and plugged in a big monitor. That way everyone could see whether our builds were passing or failing. We set the mac to come on at 9am and turn off at 6pm in System Preferences, and used &lt;a href=&quot;http://www.barbariangroup.com/software/plainview&quot;&gt;Plainview&lt;/a&gt; to display full screen.&lt;/p&gt;

&lt;p&gt;This worked well, except that our builds don’t fail that often: our current projects have short enough builds that developers can still get away with running all the tests locally.&lt;/p&gt;

&lt;h2 id=&quot;iteration-2-enter-the-cycling-metricfu-graphs&quot;&gt;Iteration 2: Enter the cycling metric_fu graphs&lt;/h2&gt;

&lt;p&gt;We have metric_fu running on a &lt;a href=&quot;http://metrics.edendevelopment.co.uk&quot;&gt;private site&lt;/a&gt; anyway, but the stats weren’t very visible. Wouldn’t it be cool if we could see our code stats publicly across the whole company? So we split the screen into two halves using a frameset:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/metric-fu.jpg&quot; alt=&quot;Our status board&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Each of our projects now cycles through the most important pages from the metric_fu library, for each of our live projects. That way, if there’s a big change in the graphs one day, everyone can see that there’s a problem and can dive in and fix it.&lt;/p&gt;

&lt;h2 id=&quot;iteration-3-cramming-more-stuff-in&quot;&gt;Iteration 3: Cramming more stuff in&lt;/h2&gt;

&lt;p&gt;So far so good, but we had some blank space down the bottom left! So we shoehorned in part of &lt;a href=&quot;http://pairyapp.com&quot;&gt;Pairyapp’s&lt;/a&gt; interface, so that everyone could see who was working with who.&lt;/p&gt;

&lt;p&gt;This was nice, because people can suddenly see who’s working on a task on their own, and then jump in as needed. It stopped me trawling round the office just to find somebody: now I can easily see exactly who’s doing what (picture at the bottom).&lt;/p&gt;

&lt;h2 id=&quot;iteration-4-first-pass-on-our-own-build-server-dashboard&quot;&gt;Iteration 4: First pass on our own build server dashboard&lt;/h2&gt;

&lt;p&gt;This worked well, for about ten days… &lt;/p&gt;

&lt;p&gt;…until we saw &lt;a href=&quot;http://www.panic.com/blog/2010/03/the-panic-status-board/&quot;&gt;this&lt;/a&gt;. Our little solution was immediately not good enough and I set to work on make it shinier.&lt;/p&gt;

&lt;p&gt;At about the same time we changed to using &lt;a href=&quot;http://github.com/defunkt/cijoe&quot;&gt;CI Joe&lt;/a&gt; for building our projects. The way we got that working is &lt;a href=&quot;/2010/03/multiple-ci-joes-with-rack-and-passenger&quot;&gt;detailed here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;CI Joe doesn’t come with an integrated dashboard, so I set to work writing my own. Here’s where I’ve got to so far:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/dashboard-1.png&quot; alt=&quot;My dashboard app&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s not open source yet, but I plan to make it so soon. The pictures are of the person or pair who made the last commit.&lt;/p&gt;

&lt;h2 id=&quot;iteration-5-the-final-result&quot;&gt;Iteration 5: The final result&lt;/h2&gt;

&lt;p&gt;And here’s how our screen looks this morning:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/dashboard-2.jpg&quot; alt=&quot;The final result&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(sorry about the censorship)&lt;/p&gt;

&lt;p&gt;It’s not finished yet, I’ve plenty more plans. Expect another few posts on this in the future.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;UPDATE:&lt;/em&gt; Added link to CI Joe post and explained pictures on the dashboard app.&lt;/p&gt;
</content></entry><entry><title>The Story Card Is Not The Story</title><category term='xp'/><category term='agile'/><category term='pivotal tracker'/><category term='balsamiq'/><category term='basecamp'/><category term='stories'/><category term='kanban'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2010/02/the-story-card-is-not-the-story'/><updated>2010-02-11T15:55:00+00:00</updated><id>http://chrismdp.com/2010/02/the-story-card-is-not-the-story</id><content type='html'>&lt;p&gt;At Eden we’ve used a number of different options for tracking work to be done on projects. In the early days we used Basecamp tasks. We then rolled our own system, which we’ve since abandoned due to a gradual shift in our business practices. We’ve used Pivotal Tracker extensively. Whilst we still use Tracker a fair amount, on one of our new projects we’re currently using index cards stuck to a kanban board, with Google Wave for extended documentation and discussion.&lt;/p&gt;

&lt;p&gt;In the past, we’ve spent a bunch of time arguing about which of these devices better and which is worse, with a view to settling on the “best” system. The merits of simple systems over complex ones, and digital over analogue, have been endlessly debated. I now think that all of these arguments miss the point.&lt;/p&gt;

&lt;p&gt;A couple of weeks ago, Enrique spent some time teaching us an early version of our one-day agile workshop. Through the ensuing discussion, I finally got to an important insight about what a story actually is, or rather what it isn’t.&lt;/p&gt;

&lt;p&gt;The story is not the terminology, or which precise language you use to describe it. It’s not the text on the card at all in the fact, or even the card itself. It’s not the line in Pivotal Tracker and it’s not the task in Basecamp.&lt;/p&gt;

&lt;p&gt;All of the tools we use represent some facet of the story, and help kick-start discussion. They remind us of the story, but they are not the story itself. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;The story is simply the team’s understanding of the work to be done: nothing more.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This understanding reframed my view of the endless cards vs online vs Tracker vs everything else debate. These are merely useful props: methods of communicating within the team in order to achieving shared understanding. Granted, some tools are better than others. But they are just that: tools. Nothing should be sacrosanct: we should feel free to replace tools and methods that are failing for a particular client, even if they’ve succeeded on other projects. I now think settling on the “best” system is a vain exercise: we’d spend our time much better simply by properly listening to the customer and doing what they say.&lt;/p&gt;

&lt;p&gt;The same principle applies to the almost-as-endless UX/Design communication methods fight. Should we use Balsamiq mockups, or HTML wireframes, or Photoshop mockups, or Sharpies and paper? Answer: use what works. Use whatever tools you need to get your message out into the collective consciousness of the team (that includes developers, designers, testers and customers), so that the work can get done to the customer’s satisfaction. These methods are simply ways of getting messages across: they have differing emphases, and carry different risks.&lt;/p&gt;

&lt;p&gt;Often I think the whole way we approach the tools debate is wrong. We ask: “how can we use our favourite tool/method to track the metrics for this project?” Shouldn’t our question instead be: “How can we ensure we are communicating properly with the customer so we can deliver what they really want?” The tool question then becomes secondary and the critical issue of good communication becomes paramount.&lt;/p&gt;

&lt;p&gt;The story card is not the story. Let’s ensure our projects serve the customer rather than our favourite tool. &lt;/p&gt;

</content></entry><entry><title>Pairing works for everything</title><category term='pairing'/><category term='xp'/><category term='agile'/><category term='productivity'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2010/01/pairing-works-for-everything'/><updated>2010-01-27T11:28:00+00:00</updated><id>http://chrismdp.com/2010/01/pairing-works-for-everything</id><content type='html'>&lt;p&gt;We’ve all heard much discussion and general chatter about the value of pair programming. Amongst other benefits, it focuses the mind, speeds knowledge transfer, and builds in code review.&lt;/p&gt;

&lt;p&gt;What’s not talked about so often is the value of pairing on non-coding tasks. Does it add the same level of value? Many of us would naturally pair up on demanding tasks, when we are doing things that require the input of several people, or when we’re unsure about how to proceed. What happens if we make it an explicit part of our day to day work? What benefits would we see?&lt;/p&gt;

&lt;p&gt;I’ve been trying where possible to pair explicitly on tasks at Eden in the last few weeks and to encourage others to do the same. We’ve found the following so far:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Pairing works on UX and Design.&lt;/em&gt; &lt;a href=&quot;http://twitter.com/spencerturner&quot;&gt;Spencer&lt;/a&gt; is currently teaching User Experience (UX) and Design skills to a number of people internally. Pairing on UX and design work really helps people to pick up skills in a particular tool such as Photoshop, but also drives discussion about design and flow which wouldn’t normally have arisen. We’ve found the result to be better output, and an increased confidence in the person who’s less experienced.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Pairing works on Sales and Business Development.&lt;/em&gt; Last week I paired up with &lt;a href=&quot;http://twitter.com/disciplex&quot;&gt;Richard&lt;/a&gt;, one of the guys I’m mentoring at the moment, to send some sales emails to three or four potential clients. One of these was to a potential new customer who I knew was interested in speaking to us, but whom I’d not emailled before. In explaining my reasoning for the words I was writing, he was able to learn about how to structure emails such as this, and I got valuable insight into how I should approach the task from someone with a different point of view.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Pairing even works on VAT returns!&lt;/em&gt; When you’re doing necessary and repetitive tasks such as the preparing the quarterly VAT return, it really helps to have someone beside you spurring you on. Last month I had to prepare one of these returns, and half-jokingly asked whether anyone was interested in helping me out. Thankfully, &lt;a href=&quot;http://twitter.com/elliotcm&quot;&gt;Elliot&lt;/a&gt; stepped up to the challenge. He started learning which expenses fall into the four or five VAT categories that exist, and how to prepare and submit a return online. Just by explaining the vagaries of EU, exempt, zero-rated, and outside-scope expenses to someone else, the job went much quicker, all the figures were double-checked, and it was simply much more fun.&lt;/p&gt;

&lt;p&gt;Clearly pairing isn’t going to work all the time. People often need space from others to think, to avoid distraction, and to recharge. Rather than being dogmatic, what I’m asking is this: at the moment non-pairing in our work is the default, and pairing is the exception. What if this was reversed? What difference would this make to our teams?&lt;/p&gt;

&lt;p&gt;Next time you approach a non-coding task at work, perhaps have a think about whether a pair would be beneficial, or what someone might learn through working with you. I could well be wrong, but I’ve yet to find a task where pairing doesn’t add some benefit. Can anyone think of one?&lt;/p&gt;

</content></entry></feed>
