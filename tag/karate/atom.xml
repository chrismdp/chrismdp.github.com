---
layout: nil
---
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title>Chris Parsons: posts tagged karate</title>

  <link href="http://chrismdp.com/"/>
  <updated>2011-03-31T13:20:29+01:00</updated>
  <id>http://chrismdp.com/tag/karate</id>
  <author>
    <name>Chris Parsons</name>
    <email>chrismdp@gmail.com</email>
  </author>
<entry><title>Are coding katas really worth it?</title><category term='katas'/><category term='karate'/><category term='life'/><category term='apprenticeship'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2011/03/are-coding-kata-really-worth-it'/><updated>2011-03-31T13:20:29+01:00</updated><id>http://chrismdp.com/2011/03/are-coding-kata-really-worth-it</id><content type='html'>&lt;p&gt;Last year I took up &lt;a href=&quot;http://en.wikipedia.org/wiki/Wad%C5%8D-ry%C5%AB&quot;&gt;Wado-ryu Karate&lt;/a&gt;. It’s something that I’ve always wanted to do, and yet never quite got around to. I briefly took it up at university about 15 years ago, and put it down rather too quickly. About a year ago I decided it was time for me to stop saying “I wished I’d learnt it”, and got down to actually learning it.&lt;/p&gt;

&lt;p&gt;Karate as a discpline is ancient compared to that of my other discipline, writing software. There are many lessons that we can take from it, and I’m sure I’ll be blogging more about this as I gain more insight. However, one big lesson I’ve learned so far is the value of a Kata.&lt;/p&gt;

&lt;h2 id=&quot;what-is-a-kata&quot;&gt;What is a Kata?&lt;/h2&gt;

&lt;p&gt;Admittedly, I’d not heard of the term until finding out about the Software Craftsmanship movement a couple of years back. It’s the process of coding a solution to a fixed problem over and over again, trying new things and attempting to gain insight. On first hearing, I liked the concept, but in honesty I thought: “yet another bunch of coders who want to be Samurai!”&lt;/p&gt;

&lt;p&gt;On reflection however, and especially after hearing &lt;a href=&quot;http://rubyconf2008.confreaks.com/ruby-kata-and-sparring.html&quot;&gt;Micah’s viewpoint&lt;/a&gt;, I could see the potential value of practicing a certain number of steps over and over. Therefore I decided to give it a go. When trying the technique in 2009, before I started karate, I admit I couldn’t connect katas to better programming performance. I published a &lt;a href=&quot;http://katas.softwarecraftsmanship.org/?p=42&quot;&gt;checkout kata&lt;/a&gt; late last year, and enjoyed working on it. However the jury was out on how much I learnt from it.&lt;/p&gt;

&lt;p&gt;That changed when I started Karate.&lt;/p&gt;

&lt;h2 id=&quot;katas-in-karate&quot;&gt;Katas in Karate&lt;/h2&gt;

&lt;p&gt;In my particular school, katas are commonplace and begin after your third belt. They are specifically designed to teach certain techniques, and to ensure that your basics are correct (and remain correct over time). So far, I have learnt &lt;a href=&quot;http://en.wikipedia.org/wiki/Pinan&quot;&gt;Pinan Nidan&lt;/a&gt;, the first kata in Wado-ryu. It’s designed as a mock fight, where you take on eight imaginary opponents and dispatch them one by one using various techniques.&lt;/p&gt;

&lt;p&gt;Technically, this kata contains three types of blocks, two types of stances, one type of punch and a spearhand attack. It’s very simple, and designed to ensure that your body can perform the basics in sequence easily. Once you’ve got the basic moves in the correct order, you then move on to ensuring that your position and strength is good when performing the Kata.&lt;/p&gt;

&lt;p&gt;When in a real sparring situation, you then instinctively use parts of the kata to help you. If all you’ve been doing is ‘block, punch, block, punch’ for several hours, then when someone actually comes to hit you, you block correctly and find you’ve thrown a punch without thinking. Watching black belts spar is fascinating: most of what they do is totolly instinctive.&lt;/p&gt;

&lt;h2 id=&quot;how-can-we-learn-from-this&quot;&gt;How can we learn from this?&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Rolling code without thinking is valuable.&lt;/em&gt; I would love to be able to roll code automatically, in the same way that martial artists combine moves in sequence effortlessly. Wouldn’t it be fantastic to be have thoughts and concepts appear on the screen without really even trying? Granted, our tools and methods do change over time, but we need to learn them inside out. Stick to one editor, for example (preferably a &lt;a href=&quot;http://vim.org&quot;&gt;decent&lt;/a&gt; &lt;a href=&quot;http://emacs.org&quot;&gt;one&lt;/a&gt;). Get to know a framework really well, so that you can make things happen without exercising your brain, leaving maximum energy to think about your problem.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Katas need to be designed well, and operate best as a set.&lt;/em&gt; Perhaps what we need on our university courses and apprenticeship schemes is a list of basics (“learn the syntax of Ruby/Haskell/Clojure”), and then a simple problem (kata) to practice a solution for. Rather than have them complete the project and hand it in, they have to &lt;em&gt;perform&lt;/em&gt; it in front of an instructor. They might have to repeat this every two weeks. They should be able to perform old projects on demand. These will need to be designed well, so that they offer the maximum learning. A poorly designed Kata is fairly useless.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Please can we get over the ‘coders who want to be samurai’ thing?&lt;/em&gt; There are a bunch of starry-eyed coders who would desperately love to be ninjas, and another group who quietly laugh at them. Both are missing the point. In Karate, katas aren’t glamourous; they’re difficult, frustrating and really hard work. But let’s not discard them out of hand! There’s ancient teaching and learning methods here that have proven effectiveness. Let’s learn from them.&lt;/p&gt;

&lt;p&gt;I need to think more on this. Perhaps there’s a specific set of katas that is tailored to a particular language that can be designed to really encourage speed of learning and growth. I do believe that a lot of the way we teach programming is inefficient and more about information than practice. Is there a better way?&lt;/p&gt;
</content></entry></feed>
