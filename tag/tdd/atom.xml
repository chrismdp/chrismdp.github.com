---
layout: nil
---
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title>Chris Parsons: posts tagged tdd</title>

  <link href="http://chrismdp.com/"/>
  <updated>2012-09-20T15:36:32+01:00</updated>
  <id>http://chrismdp.com/tag/tdd</id>
  <author>
    <name>Chris Parsons</name>
    <email>chrismdp@gmail.com</email>
  </author>
<entry><title>Never leave a failing test</title><category term='tdd'/><category term='craftsmanship'/><category term='code'/><category term='testing'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2012/09/failing-tests-rot'/><updated>2012-09-20T15:36:32+01:00</updated><id>http://chrismdp.com/2012/09/failing-tests-rot</id><content type='html'>&lt;p&gt;Imagine this: you're taking a guided tour of a nuclear power station. Just above the door as you come in there there are five lights marked Key Safety Indicators. One of the lights is flashing red.&lt;/p&gt;

&lt;p&gt;“What’s that flashing red light?” you nervously ask your host.&lt;/p&gt;

&lt;p&gt;“Oh, that light does that from time to time. We’re not sure why; we just ignore it.”&lt;/p&gt;

&lt;p&gt;There’s an awkward silence. How confident are you feeling right now?&lt;/p&gt;

&lt;h2 id=&quot;failing-tests-fester&quot;&gt;Failing tests fester.&lt;/h2&gt;

&lt;p&gt;Red tests are like code rot. Catch it early and sort them out, and you’ll be fine. If you don’t, they’ll spread through your code like a disease, causing all sorts of damage:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Failures cause fear of change.&lt;/em&gt; If we don’t understand why a test is failing, we don’t understand the code base. If we don’t understand our code, we can’t change it safely. All bets are off: any change we make will cause us to be that little bit more anxious.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Failures breed failures.&lt;/em&gt; If one test continually fails, then other coders are more likely to tolerate failing tests, and the number of failing tests will grow quickly.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Failures kill urgency.&lt;/em&gt; There’s a scene in a well-known heist movie where a team of thieves has to break into a bank. Their strategy revolves around putting a remote-controlled car under a waste bin: they use this to cause the bin to move at night, setting off all the alarm sensors. The first time the alarm goes off, the place is filled with police in a matter of seconds. The fifth time the alarm goes off, only one squad car with two bored officers turn up, totally unprepared for the waiting thieves who quickly overpower them. The same is true with tests: if they fail all the time, developers will take a cavalier attitude to checking out the cause. This could cause a really serious failure to be missed.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The only point at which failing tests are valid is when you’ve written them just before the code you plan to add. If the test should be failing, write code to make it work. If the test shouldn’t be failing, change it or delete it. Never leave it to fester.&lt;/p&gt;
</content></entry><entry><title>The power of feedback</title><category term='lean startup'/><category term='tdd'/><category term='bdd'/><category term='feedback'/><category term='lean'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2012/09/the-power-of-feedback'/><updated>2012-09-13T13:52:16+01:00</updated><id>http://chrismdp.com/2012/09/the-power-of-feedback</id><content type='html'>&lt;p&gt;&lt;i&gt;&quot;Everyone has a story that makes me stronger.&quot; -- Richard Simmons&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;There’s something about feedback. Whether it’s the validation of your latest idea, a hit on your webpage showing up on Google Analytics, or something as simple as a passing test, it’s a valuable and important motivational commodity, which can also shape the direction in which we’re going very precisely.&lt;/p&gt;

&lt;p&gt;The effect of feedback is the engine at the root of software techniques as diverse as pairing, &lt;a href=&quot;http://en.wikipedia.org/wiki/Test-driven_development&quot;&gt;TDD&lt;/a&gt;, &lt;a href=&quot;http://en.wikipedia.org/wiki/Behavior-driven_development&quot;&gt;BDD&lt;/a&gt; and the &lt;a href=&quot;http://theleanstartup.com&quot;&gt;Lean Startup movement&lt;/a&gt;. Why is feedback so powerful?&lt;/p&gt;

&lt;h2 id=&quot;feedback-shortens-the-loop&quot;&gt;Feedback shortens the loop&lt;/h2&gt;

&lt;p&gt;Any sort of feedback represents the end of a creative loop that started when we began to work on whatever we’re receiving feedback about. The shorter that loop, the more quickly we can respond to change, and the more agile we can be. It also helps us know when we’re done working on something and it’s time to move on.&lt;/p&gt;

&lt;p&gt;That’s partly why TDD is so powerful: we receive instant feedback on what we’re working on and we are never more than a few minutes away from a fully working system. It’s also why good quality customer feedback is powerful: we’re never more than a few iterations away from the feature the customer wants.&lt;/p&gt;

&lt;h2 id=&quot;feedback-validates-us-and-our-work&quot;&gt;Feedback validates us and our work&lt;/h2&gt;

&lt;p&gt;The validation of our work is one of the things that lies at the root of &lt;a href=&quot;/2010/01/pairing-works-for-everthing&quot;&gt;pairing&lt;/a&gt;: the constant code review and the camaderie keeps us motivated and working on something longer than we can manage on our own. I’ve found programming on &lt;a href=&quot;http://soltrader.net&quot;&gt;Sol Trader&lt;/a&gt; alone to be an enlightening experience - I’ve learnt how important it is to have others working alongside me. I now have a graphics expert reviewing my code, and more design and artistic help to keep me motivated to turn out releases.&lt;/p&gt;

&lt;p&gt;It’s also incredibly motivating to receive a “thank you!” or “looks great!” There’s a lot of power in simple encouragement. If we know our work is appreciated and valued, we’ll likely to work longer and with more energy on that next killer feature.&lt;/p&gt;

&lt;p&gt;However, there’s a danger in only seeking pure validation, or (worse) coming to rely on it for motivatioW. If we receive too much positive validation, we’ll end up getting proud of ourselves and demotivated to push for excellence, and we’ll get terminally discouraged if we get too little. We should be seeking the kind of feedback that motivates us to shape our work for the better. We have to learn to ask the right questions.&lt;/p&gt;

&lt;h2 id=&quot;feedback-shapes-our-work&quot;&gt;Feedback shapes our work&lt;/h2&gt;

&lt;p&gt;If we let it, feedback will change the work we do and how we do it. This applies no matter how we receive feedback about our work - the different types of feedback will change our work in different ways, and we must therefore strive to increase both the quality and the variety of the feedback we receive, without falling into the trap of simple validation.&lt;/p&gt;

&lt;p&gt;Done right, TDD offers more that just validation of our code; it gives us information about the quality of our code design. It causes us to shape our code differently and more carefully than code written without feedback. We can’t operate in isolation though: TDD without feedback from stakeholders (whether that’s through a technique such as Behaviour Driven Development or some other method) is incomplete: we get feedback that our code works, but nothing on whether it’s the right code.&lt;/p&gt;

&lt;p&gt;There’s more: conversations such as &lt;a href=&quot;http://theleanstartup.com/&quot;&gt;Lean Startup&lt;/a&gt; are taking the BDD ideas one stage further. Instead of relying on the guesses of the stakeholders to determine what the right features are, how about harnessing feedback from the actual customers using the product? This can be done in various ways, through automatic metrics gathering and &lt;a href=&quot;https://speakerdeck.com/u/chrismdp/p/lean-startup-validated-learning-and-kanban-for-hypothesis&quot;&gt;tracking experiments rather than features&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It’s my opinion that the Lean Startup conversation is certainly as important as the BDD conversation, and potentially as important as the Agile conversation, as it improves the variety of the feedback we receive on our work.&lt;/p&gt;

&lt;p&gt;How are you finding feedback shapes your work? Are you getting the right kinds of feedback from a variety of sources? Or are you settling for pure validation?&lt;/p&gt;
</content></entry><entry><title>How I'm testing iPhone apps: part 2</title><category term='code'/><category term='ios'/><category term='tdd'/><category term='bdd'/><category term='testing ios'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2011/12/how-im-testing-iphone-apps-part-2'/><updated>2011-12-06T16:02:54+00:00</updated><id>http://chrismdp.com/2011/12/how-im-testing-iphone-apps-part-2</id><content type='html'>&lt;p&gt;&lt;i&gt;I've recently been doing some iOS development, and working out the best way to test-drive the development of iOS apps was high on my priority list. I know that the automated testing of iOS applications is still not widely practiced and isn't well documented, so I decided to write a series of posts to start to rectify that. You may wish to read &lt;a href=&quot;/2011/12/how-im-testing-iphone-apps-part-1&quot;&gt;part 1&lt;/a&gt; first.&lt;/i&gt;&lt;/p&gt;

&lt;h2 id=&quot;kiwi&quot;&gt;Kiwi&lt;/h2&gt;

&lt;p&gt;We were looking for a testing framework which supported iOS’s asynchronous programming model and &lt;a href=&quot;https://github.com/allending/Kiwi&quot;&gt;Kiwi&lt;/a&gt; answered the call. It has a great syntax, &lt;a href=&quot;https://github.com/allending/Kiwi/wiki/Guide:-Up-and-Running-with-Kiwi&quot;&gt;comprehensive set up assistance&lt;/a&gt;, asynchronous support and built in mocking. I’d highly recommend you check it out: the syntax helps me to think in the right way and it has pretty much all the features we needed.&lt;/p&gt;

&lt;p&gt;Kiwi’s block syntax looks like this:&lt;/p&gt;

&lt;p&gt;{% highlight objectivec %}
describe(@”Team”, ^{
    context(@”when newly created”, ^{
        it(@”should have a name”, ^{
            id team = [Team team];
            [[team.name should] equal:@”Black Hawks”];
        });
    });
});
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Much better than the old fashioned xUnit style of testing, in my opinion. You might hate it, of course. You can use Kiwi’s features &lt;a href=&quot;https://github.com/allending/Kiwi/issues/73&quot;&gt;without having to use the block syntax&lt;/a&gt; if you want.&lt;/p&gt;

&lt;h2 id=&quot;objective-cs-delegate-model&quot;&gt;Objective-C’s delegate model&lt;/h2&gt;

&lt;p&gt;Many of the Apple core libraries use a delegate pattern for handling callbacks from a class. This is similar to Java’s interfaces, and superficially similar to blocks in Ruby and anonymous functions in Javascript.&lt;/p&gt;

&lt;p&gt;As an example, let’s take CoreLocation. When wanting to find the location of a phone, you create a new &lt;code&gt;CoreLocationManager&lt;/code&gt; and call &lt;code&gt;startUpdatingLocation&lt;/code&gt; on it:&lt;/p&gt;

&lt;p&gt;{% highlight objectivec %}
CLLocationManager *manager = [[CLLocationManager alloc] init];
[manager startUpdatingLocation];
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;This call returns immediately: so how do you execute code when the location is found? You use a delegate: an object with responds to the &lt;code&gt;locationManager: didUpdateToLocation: fromLocation&lt;/code&gt; method:&lt;/p&gt;

&lt;p&gt;{% highlight objectivec %}
-(void)locationManager:(CLLocationManager *)manager didUpdateToLocation:(CLLocation *)newLocation fromLocation:(CLLocation *)oldLocation
{
  NSLog(“$@ I AM IN YOU”, newLocation);
  foundLocation = YES;
}
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Then you set this object to be the CLLocationManager’s delegate before calling &lt;code&gt;startUpdatingLocation&lt;/code&gt;. Often you set the delegate to &lt;code&gt;self&lt;/code&gt; and define the delegate method on the calling object.&lt;/p&gt;

&lt;p&gt;{% highlight objectivec %}
CLLocationManager *manager = [[CLLocationManager alloc] init];
manager.delegate = self;
[manager startUpdatingLocation];
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;There’s more about this model in &lt;a href=&quot;http://developer.apple.com/library/IOs/#documentation/iPhone/Conceptual/iPhone101/Articles/02_DesignPatterns.html&quot;&gt;this article from Apple&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;testing-delegates&quot;&gt;Testing delegates&lt;/h2&gt;

&lt;p&gt;This is tricky to test, because we can’t simply do this:&lt;/p&gt;

&lt;p&gt;{% highlight objectivec %}
it(“should call the delegate when ready”, ^{
  [testObject startUpdatingLocation];
  [[testObject.foundLocation should] equal:theValue(YES)];
});
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;The test will call &lt;code&gt;startUpdatingLocation&lt;/code&gt;, and then immediately check the &lt;code&gt;foundLocation&lt;/code&gt; property to see whether it’s been set. It won’t have been, because the delegate won’t have been called yet.&lt;/p&gt;

&lt;p&gt;How were we to stub endpoints such as the location system for for our app? We found two ways of doing this, with varying effectiveness:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Using Objective-C categories to redefine class methods&lt;/li&gt;
  &lt;li&gt;Using a Kiwi stub to inject a derived class which mocks out key methods&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next post, I’ll dive into some detail on both of these methods and show some of the pros and cons of each.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;How are you testing iPhone apps? Do chime in throughout the series with suggestions and comments, and I’ll edit the posts as appropriate.&lt;/i&gt;&lt;/p&gt;

</content></entry><entry><title>How I'm testing iPhone apps: part 1</title><category term='code'/><category term='ios'/><category term='tdd'/><category term='bdd'/><category term='testing ios'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2011/12/how-im-testing-iphone-apps-part-1'/><updated>2011-12-01T22:45:35+00:00</updated><id>http://chrismdp.com/2011/12/how-im-testing-iphone-apps-part-1</id><content type='html'>&lt;p&gt;&lt;i&gt;This week I've been working with &lt;a href=&quot;http://shilling.co.uk&quot;&gt;Shilling&lt;/a&gt; helping them get starting with iOS application development. Part of the deal was for me to learn it myself as we went: I've done hardly any iOS work and we've been learning how to do it together.&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;&lt;i&gt;As part of this process, working out the best way to test-drive the development of iOS apps was high on my priority list. I know that the automated testing of iOS applications is still not widely practiced and isn't well documented, so I decided to write a series of posts to start to rectify that.&lt;/i&gt;&lt;/p&gt;

&lt;h2 id=&quot;our-goal&quot;&gt;Our goal&lt;/h2&gt;

&lt;p&gt;There are two main parts to working out how to test-drive applications on a new platform. One is to figure out the testing libraries and write simple &lt;code&gt;1 + 1 = 2&lt;/code&gt; style tests to prove it can be done. The other half is working out how to apply common testing techniques such as stubbing external systems, isolating tests correctly and optionally driving the interface.&lt;/p&gt;

&lt;p&gt;The first of these steps is quite easy on iOS, but the second part is harder. In our case, we have some code which makes use of CoreLocation and the &lt;a href=&quot;http://geonames.org&quot;&gt;Geonames&lt;/a&gt; service to get an iPhone’s location and look up the county name from a latitude and longitude. This means that our code relies on two external services to run, which we want to stub out: we don’t want these services to be called each time our tests run. How were we to set this up correctly?&lt;/p&gt;

&lt;h2 id=&quot;apples-documentation&quot;&gt;Apple’s documentation&lt;/h2&gt;

&lt;p&gt;To kick off our testing adventure on iOS, we started with &lt;a href=&quot;http://developer.apple.com/library/ios/#documentation/Xcode/Conceptual/ios_development_workflow/135-Unit_Testing_Applications/unit_testing_applications.html&quot;&gt;Apple’s own public documentation&lt;/a&gt; on how to test iOS. This is a fairly comprehensive guide on how to set up a project with built in testing, allowing you to write basic SenTest tests quite quickly.&lt;/p&gt;

&lt;p&gt;Apple divides its definition of unit testing into two categories:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Logic tests: these are what I would normally call unit tests. They rely on very few external APIs and are run standalone without the use of a simulator.&lt;/li&gt;
  &lt;li&gt;Application tests: these are executed in the context of a running application on a simulator or iOS device.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The document details how to set up both types in your project. There’s a few things missing though:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;They have good ideas about &lt;a href=&quot;http://developer.apple.com/library/ios/#documentation/Xcode/Conceptual/ios_development_workflow/135-Unit_Testing_Applications/unit_testing_applications.html#//apple_ref/doc/uid/TP40007959-CH20-SW12&quot;&gt;how to write decent tests&lt;/a&gt;, but lack information on how to correctly mock system endpoints. I want to do this so that I don’t have to rely on iOS location simulation, or HTTP response data, to make my tests work.&lt;/li&gt;
  &lt;li&gt;There was also nothing on how to test asynchronously, which is a real problem as iOS applications are mostly written in this way.&lt;/li&gt;
  &lt;li&gt;Application tests are executed in the context of your application, but without extra work it’s not possible to support native UI testing, &lt;a href=&quot;https://github.com/jnicklas/capybara&quot;&gt;Capybara&lt;/a&gt; style. We are reduced to manipulating controllers directly, which is good enough for now. This assumes you have your user interface wired up correctly. As the app always has to be tested manually anyway then this isn’t too much of a risk, but if you want to take a step further you could use &lt;a href=&quot;https://github.com/square/KIF&quot;&gt;KIF&lt;/a&gt;, &lt;a href=&quot;https://github.com/moredip/Frank&quot;&gt;Frank&lt;/a&gt; or Apple’s own &lt;a href=&quot;http://developer.apple.com/library/ios/#documentation/DeveloperTools/Reference/UIAutomationRef/Introduction/Introduction.html&quot;&gt;UIAutomation&lt;/a&gt;. There’s a good post comparing them &lt;a href=&quot;http://sgleadow.github.com/blog/2011/10/26/which-automated-ios-testing-tool-to-use/&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So we followed through the basic set up instructions, and got a simple test running which added two numbers together. A good start, but useless for real work.&lt;/p&gt;

&lt;p&gt;Time to go in search of an asynchronous testing framework: and we found a great one. Next time, I’ll talk about the wonderful &lt;a href=&quot;https://github.com/allending/Kiwi&quot;&gt;Kiwi&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;How are you testing iPhone apps? Do chime in throughout the series with suggestions and comments, and I’ll edit the posts as appropriate.&lt;/i&gt;&lt;/p&gt;
</content></entry><entry><title>Work with me</title><category term='code'/><category term='meta'/><category term='agile'/><category term='training'/><category term='life'/><category term='tdd'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2011/08/work-with-me'/><updated>2011-08-22T15:36:53+01:00</updated><id>http://chrismdp.com/2011/08/work-with-me</id><content type='html'>&lt;p&gt;I’ve been taking a break from my work and blogging for the summer: but now I’m looking for work again from next week.&lt;/p&gt;

&lt;p&gt;To this end I’ve put up a &lt;a href=&quot;/workwithme.html&quot;&gt;new page&lt;/a&gt; on this site which has all the details of what I can offer, and my availability. If you’d like to work with me this autumn, do &lt;a href=&quot;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#116;&amp;#111;:&amp;#099;&amp;#104;&amp;#114;&amp;#105;&amp;#115;&amp;#064;&amp;#116;&amp;#104;&amp;#105;&amp;#110;&amp;#107;&amp;#099;&amp;#111;&amp;#100;&amp;#101;&amp;#108;&amp;#101;&amp;#097;&amp;#114;&amp;#110;&amp;#046;&amp;#099;&amp;#111;&amp;#109;&quot;&gt;get in touch&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I also plan to start blogging again soon, with my first topic being &lt;a href=&quot;/2011/08/e-petitions-handling-traffic&quot;&gt;how we handled the massive site traffic&lt;/a&gt; we experienced on e-petitions &lt;a href=&quot;http://www.bbc.co.uk/news/uk-politics-14474429&quot;&gt;a couple of weeks ago&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>Pomodoros help you refactor</title><category term='code'/><category term='pomodoros'/><category term='tdd'/><category term='craftsmanship'/><category term='pairing'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2011/04/pomodoros-help-you-refactor'/><updated>2011-04-01T20:21:15+01:00</updated><id>http://chrismdp.com/2011/04/pomodoros-help-you-refactor</id><content type='html'>&lt;p&gt;&lt;i&gt;&quot;If you finish a task while the Pomodoro is still ticking, the following rule applies: If a Pomodoro Begins, It Has to Ring. It’s a good idea to take advantage of the opportunity for overlearning, using the remaining portion of the Pomodoro to review or repeat what you’ve done, make small improvements, and note down what you’ve learned until the Pomodoro rings.&quot;&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;– Francesco Cirillo, &lt;a href=&quot;http://www.pomodorotechnique.com/&quot;&gt;The Pomodoro Technique&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What’s the single most important part of Test Driven Development not to miss? Refactoring. What’s the part of TDD that’s most often missed? Refactoring.&lt;/p&gt;

&lt;p&gt;With refactoring, we work our way toward a great design, clean code, and flexible organic tests. Without refactoring, we have ugly brittle test suites and uglier code. We know this. What I don’t always do is take advantage of the moments I have when I can effectively refactor for free.&lt;/p&gt;

&lt;p&gt;At the end of a task, when the build is running, I’ve previously let my mind wander to the next thing, or check email, surf the net, and generally &lt;a href=&quot;http://www.computus.org/journal/?p=982&quot;&gt;get out of the zone&lt;/a&gt;. This bad habit has been highlighted to me in &lt;a href=&quot;/2011/03/pomodoros-done-hopefully-right&quot;&gt;my use of the pomodoro technique recently&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I was doing the same for the shorter pauses during normal TDD. My pomodoros statistics were telling me that I’m very bad at concentrating whilst coding: the average time spent before I let my mind wander was 11.67 minutes. I was allowing my mind to drift whilst Rails started up to run whatever test I was working on. Not good.&lt;/p&gt;

&lt;h2 id=&quot;time-to-improve&quot;&gt;Time to improve&lt;/h2&gt;

&lt;p&gt;This week, I’ve been trying to take the time to look at my code critically for areas of improvement. A pomodoro is indivisible, which means I’m not &lt;em&gt;allowed&lt;/em&gt; to think about anything else.&lt;/p&gt;

&lt;p&gt;And guess what? I always find something to improve, and I feel that little bit better about my code.&lt;/p&gt;

&lt;p&gt;The also helps with the thing I’ve missed most about not pairing: that other person’s critical eye on what you’re doing, always thinking about the code being written. During the natural pauses, you can be that other person and ensure the code you write is great. Being two people is &lt;a href=&quot;http://www.pixar.com/shorts/gg/index.html&quot;&gt;more fun, too&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>How to test your node.js app</title><category term='javascript'/><category term='code'/><category term='tdd'/><category term='node.js'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2010/05/tdd-with-node-js'/><updated>2010-05-23T11:05:00+01:00</updated><id>http://chrismdp.com/2010/05/tdd-with-node-js</id><content type='html'>&lt;p&gt;I’ve wanted to hack on a &lt;a href=&quot;http://nodejs.org&quot;&gt;node.js&lt;/a&gt; project for a while, and a new app idea has given me the perfect excuse. My first question was: how do I test this? It’s a fairly new field out there, and there isn’t much help from node.js itself: it’s much more like &lt;a href=&quot;http://rack.rubyforge.org/&quot;&gt;Rack&lt;/a&gt; than a proper framework. So I spent some time coming up with one way to do it.&lt;/p&gt;

&lt;p&gt;Disclaimer: I’m not that experienced with Javascript, particularly with the best way to define objects. I’d be grateful for patches to help improve the quality of the code here. I’ve also borrowed heavily from &lt;a href=&quot;http://github.com/redsquirrel/apprentice-us&quot;&gt;apprentice-us&lt;/a&gt; - thanks to &lt;a href=&quot;http://twitter.com/redsquirrel&quot;&gt;Dave&lt;/a&gt; and &lt;a href=&quot;http://twitter.com/coreyhaines&quot;&gt;Corey&lt;/a&gt;!&lt;/p&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;This is what I’ve got so far (the actual app I’m working will remain closed-source for the mo):&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://github.com/chrismdp/example-nodejs-project&quot;&gt;Example node.js github project&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You probably want to refer to the code whilst reading the rest of this article.&lt;/p&gt;

&lt;p&gt;To run the tests, run &lt;em&gt;rake&lt;/em&gt;. To start the app, run &lt;em&gt;node app.js&lt;/em&gt; (you will need to have node.js installed obviously).&lt;/p&gt;

&lt;p&gt;If you install the &lt;a href=&quot;http://github.com/mynyml/watchr&quot;&gt;watchr&lt;/a&gt; gem, and run &lt;em&gt;watchr autotest.watchr&lt;/em&gt;, you’ll get robust autotest like functionality. I’m liking watchr much better than ZenTest right now.&lt;/p&gt;

&lt;h2 id=&quot;how-it-works&quot;&gt;How it works&lt;/h2&gt;

&lt;p&gt;The basic premise is to decouple the request/response handler from the server (see &lt;em&gt;app.js&lt;/em&gt;, &lt;em&gt;lib/http.js&lt;/em&gt; and &lt;em&gt;lib/router.js&lt;/em&gt;). The interesting bit is in &lt;em&gt;test/ integration/ user_sees_homepage.js&lt;/em&gt; - this then calls the dispatch method directly, passing in dummy Request and Response objects.&lt;/p&gt;

&lt;p&gt;Note how I’ve &lt;a href=&quot;http://github.com/chrismdp/example-nodejs-project/blob/master/test/integration/user_sees_homepage.js&quot;&gt;defined the Response object&lt;/a&gt;. This allows me currently to write an integration test that looks like this:&lt;/p&gt;

&lt;p&gt;{% highlight javascript %}
router.dispatch(new Request(“GET”, “/”), new Response(function(headers, data) {
  assert.contains(“200”, headers[‘status’])
  assert.contains(“Hello, world!”, data)
}));
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;The assert.contains() method is not part of node.js: it’s implemented in &lt;em&gt;test/helper.js&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The reason you need the asserts to be fired in the end() function is that node.js is inherently asynchronous and will finish executing this file whilst waiting for the haml file to load in &lt;em&gt;lib/router.js&lt;/em&gt;. Try it yourself: if you put an assert at the bottom of the file it will fire immediately.&lt;/p&gt;

&lt;h2 id=&quot;unit-tests&quot;&gt;Unit tests&lt;/h2&gt;

&lt;p&gt;The plan is then to define whichever unit tests you need in &lt;em&gt;test/ unit/ (something)_test.js&lt;/em&gt;, with the corresponding code in &lt;em&gt;lib/ models/ (something).js&lt;/em&gt;. Just run javascript code in here and call methods on assert, and rake will execute it.&lt;/p&gt;

&lt;h2 id=&quot;improvements&quot;&gt;Improvements&lt;/h2&gt;

&lt;p&gt;You could potentially use the Sinatra-like framework &lt;a href=&quot;http://expressjs.com&quot;&gt;Express&lt;/a&gt; to define &lt;em&gt;lib/router.js&lt;/em&gt; - I’ve handrolled it for the moment. I’m of the opinion that you spot betterrefactorings by handrolling to start with: it could be that express.js isn’t right for my app, and I can’t easily tell yet.&lt;/p&gt;

&lt;p&gt;There are a number of javascript testing libraries out there, but at the moment I’m happy with my own handrolled version, which just relies on the ‘assert’ package that node.js provides. There’s nothing to stop you using JSpec or some other javascript testing library: I wanted to keep things simple to start with. &lt;/p&gt;

&lt;p&gt;I’m also aware that Cucumber &lt;a href=&quot;http://blog.josephwilk.net/ruby/testing-javascript-with-cucumber-in-javascript.html&quot;&gt;now supports javascript through V8&lt;/a&gt;, which is an important step in the right direction. Unfortunately however it doesn’t yet support the &lt;a href=&quot;http://commonjs.org&quot;&gt;commonjs&lt;/a&gt; package system, and doesn’t run through node.js but through raw V8. This makes it hard to use with anything but toy examples. Ideally I’ve love to plug Cucumber in in the future, if we can get it to use node.js as the platform somehow.&lt;/p&gt;

&lt;p&gt;If you use it for something useful, let me know! I’d be very happy to receive patches and suggestions.&lt;/p&gt;
</content></entry><entry><title>TDD ~ The Tortoise and the Hare</title><category term='tdd'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2006/02/tdd-the-tortoise-and-the-hare'/><updated>2006-02-16T09:43:00+00:00</updated><id>http://chrismdp.com/2006/02/tdd-the-tortoise-and-the-hare</id><content type='html'>&lt;div class=&quot;notice&quot;&gt;&lt;h1&gt;By the way...&lt;/h1&gt;&lt;p&gt;This content is now pretty old: check &lt;a href=&quot;/&quot;&gt;the homepage&lt;/a&gt; for the latest.&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;Test Driven Development. Some people just don't get it.&lt;/p&gt;
&lt;p&gt;Some people say: &quot;A test for each feature? But that would mean writing twice as much code!&quot;&lt;/p&gt;
&lt;p&gt;These people usually go on to say: &quot;It's just not worth it. I've finished my code, and it works, and you're still writing the test! I leave you in dust, 
you slow coding type!&quot;&lt;/p&gt;
&lt;p&gt;Then again, some people choose platforms, frameworks and even programming languages based on how easy it is to do TDD using them. If they can't do TDD ea
sily, they pick something else. They're that committed to it.&lt;/p&gt;
&lt;p&gt;The hare starts out faster. The tortoise is much slower out of the gate. &lt;/p&gt;
&lt;p&gt;The tortoise knows that the finish line isn't when the code is written, it's when the customer has a working product. The hare might think they've finish
ed, so they sit down and have a nap (or to stretch the analogy slightly, get bogged down fixing unnecessary bugs). That's when the tortoise overtakes.&lt;/p&gt;
&lt;p&gt;I used to be a hare, running frantically back and forth over the whole codebase, changing things here and there until I thought I was done with a feature
. Invariably I wasn't; there were bugs to be fixed and features missed. I thought just because I could write code quickly, I was adding value quickly.&lt;/p&gt;
&lt;p&gt;And then I fell in love with TDD. Since I discovered it after reading &quot;Extreme Programming explained&quot;  by Kent Beck (buy: &lt;a href=&quot;http://www.amazon.co.u
k/exec/obidos/redirect?link_code=ur2&amp;amp;tag=chrisparsonbl-21&amp;amp;camp=1634&amp;amp;creative=6738&amp;amp;path=ASIN%2F0201616416&quot;&gt;uk&lt;/a&gt;   &lt;a href=&quot;http://www.amazo
n.co.uk/exec/obidos/redirect?link_code=ur2&amp;amp;tag=chrisparsonbl-21&amp;amp;camp=1634&amp;amp;creative=6738&amp;amp;path=http%3A%2F%2Fwww.amazon.com%2Fgp%2Fproduct%2F03
21278658%2Fref%3Dpd_kar_gw_1%3F%255Fencoding%3DUTF8%252CUTF8%26ref%3Dpd%255Fkar%255Fgw%255F1%26v%3Dglance%26n%3D283155&quot;&gt;us&lt;/a&gt;), I've not looked back. All o
f my clients (like it or not), suddenly got test frameworks for free just so that I could develop using TDD. I rarely do any coding at all in any other way.
&lt;/p&gt;
&lt;p&gt;Why use TDD? Here are my main reasons:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Refactoring power.&lt;/em&gt; If I have a unit test testing each feature of my code module, I can merrily move stuff around internally as much as I like, 
without worrying if it's broken. At the end, I just run the tests. If it still works, I'm done.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Remembering what you are doing.&lt;/em&gt; It's very easy in a large application to get lost on which feature you are currently coding. If you are coding 
using TDD, then you can't get lost. There's a very simple cycle to follow: Write failing test. Write code so test passes. Refactor if necessary. If you forg
et where you are, just run the tests. If they pass, you need to move to a new feature. If they fail, fix them. Simple.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Peace of mind.&lt;/em&gt; I've written a large application recently which bills customers weekly for products. When I release a new version of the applica
tion, I &lt;i&gt;have&lt;/i&gt; to know the billing is going to work. If it doesn't I get in a lot of trouble. Now I know the application is working before I release it
, just by running &quot;ant test&quot; and waiting a couple of minutes.&lt;/p&gt;
&lt;p&gt;Hares start out faster. But they get complacent, they have a nap, and invariably run into problems in the end. Tortoises get to the finish line first.&lt;/p&gt;
&lt;p&gt;If you'd like to know more about TDD, visit these links:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.agiledata.org/essays/tdd.html&quot;&gt;A nice TDD essay&lt;/a&gt;, comparing TDD to MDD (model driven development).&lt;br /&gt;
&lt;a href=&quot;http://www.jamesshore.com/Blog/Microsoft-Gets-TDD-Completely-Wrong.html&quot;&gt;A rebuttal&lt;/a&gt; of Microsoft's version of TDD, with a very good intro to 'real' TDD, by &lt;a href=&quot;http://www.jamesshore.com/&quot;&gt;James Shore&lt;/a&gt;.&lt;/p&gt;
</content></entry></feed>
