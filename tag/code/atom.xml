---
layout: nil
---
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title>Chris Parsons: posts tagged code</title>

  <link href="http://chrismdp.com/"/>
  <updated>2012-09-28T20:46:31+01:00</updated>
  <id>http://chrismdp.com/tag/code</id>
  <author>
    <name>Chris Parsons</name>
    <email>chrismdp@gmail.com</email>
  </author>
<entry><title>Your framework is a liability</title><category term='code'/><category term='craftsmanship'/><category term='lean'/><category term='ruby'/><category term='agile'/><category term='liability'/><category term='sinatra'/><category term='paypal'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2012/09/your-framework-is-a-liability'/><updated>2012-09-28T20:46:31+01:00</updated><id>http://chrismdp.com/2012/09/your-framework-is-a-liability</id><content type='html'>&lt;p&gt;Your framework is a liability.&lt;/p&gt;

&lt;p&gt;Every library you import before you start the project means more for someone else to digest and understand. Each complex ‘clever’ library equals another few minutes per team member trying to interpret why you imported it, how to use it, and where the configuration goes. Every framework you decide to use is a early decision about how your project will fundamentally work, which might turn out to be the wrong one. Each library is an opportunity for someone else to introduce a bug into your project.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The only asset a framework or library gives you is a faster route to your feature.&lt;/em&gt; Anything else will drag you down.&lt;/p&gt;

&lt;p&gt;If your framework is heavy and onerous, then your code will have a large net negative liability before you’ve even begun. You’ll be constrained to follow a certain set of patterns, which you might end up fighting against later on. Work on the app first: your &lt;anacronym title=&quot;minimum viable product&quot;&gt;MVP&lt;/anacronym&gt; might not even need the benefits your framework provides.&lt;/p&gt;

&lt;p&gt;A few examples of where I’ve benefited from not blindly installing the “standard stack”:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;I’ve recently started building some new projects wholly in &lt;a href=&quot;http://sinatrarb.com&quot;&gt;Sinatra&lt;/a&gt;, pulling in various gems only when I need to, rather than starting with Rails from the outset. &lt;a href=&quot;http://soltrader.net&quot;&gt;Sol Trader’s website&lt;/a&gt; is pure Sinatra. It was simply much quicker to get started, and I found I could layer on functionality as I needed it. Several months on, I’ve yet to need to turn to a Rails app.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When I came to add Paypal integration to the site, I looked at various gems, and decided they were just going to drag me down with extra configuration and hassle. I ended up building Paypal IPN integration &lt;a href=&quot;https://gist.github.com/2768532&quot;&gt;in about 30 lines&lt;/a&gt; using pure ruby: no libraries. Most of that code was tests.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Don’t get me wrong: I still use frameworks for some of my projects, and libraries for all of them, but I’m learning to stop and think before cargo culting the latest stack of 25 different libraries before I can get anything done.&lt;/p&gt;

&lt;p&gt;Import a lightweight framework or library when you need to. Consider when you might be chaining yourself to it, which might make a later pivot difficult. It’s much easier to add a framework than to remove one from your project: pick the easiest thing to move away from.&lt;/p&gt;
</content></entry><entry><title>Your code is a liability</title><category term='code'/><category term='craftsmanship'/><category term='lean'/><category term='agile'/><category term='team'/><category term='liability'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2012/09/code-is-a-liability'/><updated>2012-09-24T20:48:13+01:00</updated><id>http://chrismdp.com/2012/09/code-is-a-liability</id><content type='html'>&lt;p&gt;Your code is a liability.&lt;/p&gt;

&lt;p&gt;Every line you write means more for someone else to read, digest and understand. Each complex ‘clever’ regular expression represents another few minutes per team member trying to interpret what you wrote and why you wrote it. Every line you add limits your project’s responsiveness to change.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Only the feature that your code provides is an asset.&lt;/em&gt; The more that we reduce the amount of code we write, the lighter weight and more agile our software. The easier it is to understand, the less of a intellectual drag it is on the team.&lt;/p&gt;

&lt;p&gt;There used to be a lot of talk about getting into the “programmer zone”: that place of heightened focus where time rushes by as if a blur, and the number of lines of output a programmer produces per hour skyrockets… except that lines per hour was never the best measure of coder output to begin with. All that coder is doing is dragging down the project faster. Let’s hope they’re adding useful features during that process!&lt;/p&gt;

&lt;p&gt;It’s my belief that the best code is written in conversation, not in the “zone.” A team discussion about the architecture and the arrangement of the different concepts into the simplest and lightest code structure we can fathom will always improve on our own ideas, when we implement them in isolation at a ridiculous rate.&lt;/p&gt;

&lt;p&gt;Lightweight, lean coding like this sets our features free from the drag of the code and allows them to soar: responsive to change requests, and easily debugged as the code isn’t difficult to understand.&lt;/p&gt;
</content></entry><entry><title>Never leave a failing test</title><category term='tdd'/><category term='craftsmanship'/><category term='code'/><category term='testing'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2012/09/failing-tests-rot'/><updated>2012-09-20T15:36:32+01:00</updated><id>http://chrismdp.com/2012/09/failing-tests-rot</id><content type='html'>&lt;p&gt;Imagine this: you're taking a guided tour of a nuclear power station. Just above the door as you come in there there are five lights marked Key Safety Indicators. One of the lights is flashing red.&lt;/p&gt;

&lt;p&gt;“What’s that flashing red light?” you nervously ask your host.&lt;/p&gt;

&lt;p&gt;“Oh, that light does that from time to time. We’re not sure why; we just ignore it.”&lt;/p&gt;

&lt;p&gt;There’s an awkward silence. How confident are you feeling right now?&lt;/p&gt;

&lt;h2 id=&quot;failing-tests-fester&quot;&gt;Failing tests fester.&lt;/h2&gt;

&lt;p&gt;Red tests are like code rot. Catch it early and sort them out, and you’ll be fine. If you don’t, they’ll spread through your code like a disease, causing all sorts of damage:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Failures cause fear of change.&lt;/em&gt; If we don’t understand why a test is failing, we don’t understand the code base. If we don’t understand our code, we can’t change it safely. All bets are off: any change we make will cause us to be that little bit more anxious.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Failures breed failures.&lt;/em&gt; If one test continually fails, then other coders are more likely to tolerate failing tests, and the number of failing tests will grow quickly.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Failures kill urgency.&lt;/em&gt; There’s a scene in a well-known heist movie where a team of thieves has to break into a bank. Their strategy revolves around putting a remote-controlled car under a waste bin: they use this to cause the bin to move at night, setting off all the alarm sensors. The first time the alarm goes off, the place is filled with police in a matter of seconds. The fifth time the alarm goes off, only one squad car with two bored officers turn up, totally unprepared for the waiting thieves who quickly overpower them. The same is true with tests: if they fail all the time, developers will take a cavalier attitude to checking out the cause. This could cause a really serious failure to be missed.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The only point at which failing tests are valid is when you’ve written them just before the code you plan to add. If the test should be failing, write code to make it work. If the test shouldn’t be failing, change it or delete it. Never leave it to fester.&lt;/p&gt;
</content></entry><entry><title>The power of good naming</title><category term='code'/><category term='craftsmanship'/><category term='refactoring'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2012/09/the-power-of-good-naming'/><updated>2012-09-18T20:43:02+01:00</updated><id>http://chrismdp.com/2012/09/the-power-of-good-naming</id><content type='html'>&lt;p&gt;&lt;i&gt;&quot;There are two hard problems in computer science: Cache invaliation, naming things, and off by one errors.&quot;&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;– Source: &lt;a href=&quot;http://martinfowler.com/bliki/TwoHardThings.html&quot;&gt;Martin Fowler&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Naming things is hard. Why do we expend so much effort to get them right? Because naming programming concepts well gives us a big insight into how they fit into the system we’re designing. Continually renaming things records our insights as we go: the right names for our objects, methods and variables will yield fresh insight and in turn shape the design of the system.&lt;/p&gt;

&lt;p&gt;J.B. Rainsberger &lt;a href=&quot;http://www.jbrains.ca/permalink/the-four-elements-of-simple-design&quot;&gt;talks about&lt;/a&gt; names of classes, methods and variables going through four stages:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Nonsense:&lt;/em&gt; For example, we might extract a method from a larger one and quickly rename it &lt;code&gt;foo()&lt;/code&gt; to get the refactor done and the tests passing.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Accurate:&lt;/em&gt; We rename the nonsense method to what it actually does, such as &lt;code&gt;processPayroll()&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Precise:&lt;/em&gt; Once we realise what the method really does, we might refine the accurate name and give it more precision, such as &lt;code&gt;loopThroughEmployeesAndPayThem()&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Meaningful:&lt;/em&gt; At this point, we’ve revealed the complexity of the method, and can look to split it up into two methods: &lt;code&gt;forEachEmployee()&lt;/code&gt; and perhaps a &lt;code&gt;pay()&lt;/code&gt; method on a seperate interface.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some simple rules of thumb to follow when naming things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Don’t be afraid of nonesense names.&lt;/em&gt; We shouldn’t shy away from the early stages of naming. If we’re not sure what something is yet, give it a nonsense name. The name &lt;code&gt;foo()&lt;/code&gt; is fine, as long as it’s only going to last fifteen minutes. Best not to commit it though :)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;If you don’t like the code you’re writing, use really long names.&lt;/em&gt; If in doubt as to what or where something fits, use a really (really) long name: the longer and more precise the better. I will call a variable something like &lt;code&gt;computed_unsorted_project_task_matrix&lt;/code&gt; especially if I don’t like it and want to refactor it at some point. This is much better than &lt;code&gt;result&lt;/code&gt; (or &lt;code&gt;res&lt;/code&gt; or even &lt;code&gt;r&lt;/code&gt;). I reveal the complexity of the object through the name, which helps reveal complexity in the code.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Characters are cheap, confusion is costly.&lt;/em&gt; Let’s not make things harder for the programmers who come after us. Remember, this is just as likely to be ourselves in a few months. Let’s avoid using a name like &lt;code&gt;prj&lt;/code&gt; when &lt;code&gt;project&lt;/code&gt; is only four characters more typing. Anything that reduces reading friction in our code is a good thing.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How often do you rename your methods, objects, and classes? How does naming help you understand your code?&lt;/p&gt;
</content></entry><entry><title>Kickstart your team on BDD</title><category term='bddkickstart'/><category term='bdd'/><category term='cucumber'/><category term='code'/><category term='ruby'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2012/07/kickstart-your-team-on-bdd'/><updated>2012-07-27T08:13:22+01:00</updated><id>http://chrismdp.com/2012/07/kickstart-your-team-on-bdd</id><content type='html'>&lt;p&gt;&lt;a href=&quot;http://mattwynne.net&quot;&gt;Matt Wynne&lt;/a&gt; and I have been running courses on BDD for the BBC Future Media division for the past year or two. They’ve been extremely well received, so we’ve decided to open them up to the wider public so everyone can benefit.&lt;/p&gt;

&lt;p&gt;The full details are at &lt;a href=&quot;http://bddkickstart.com&quot;&gt;bddkickstart.com&lt;/a&gt;, but read on for a bit more info:&lt;/p&gt;

&lt;h2 id=&quot;whenwhere-is-it&quot;&gt;When/where is it?&lt;/h2&gt;

&lt;p&gt;There are four seperate day-long workshops running in October, from 8th - 11th in Central London near Trafalgar Square. You can just come to one day, or all four.&lt;/p&gt;

&lt;h2 id=&quot;whats-the-course-material&quot;&gt;What’s the course material?&lt;/h2&gt;

&lt;p&gt;Day 1 is entitled “Just enough Ruby”. It teaches programmers from other languages the basics of Ruby so that they are comfortable using cucumber effectively.&lt;/p&gt;

&lt;p&gt;Day 2 is a BDD workshop for the whole team. It builds awareness and enthusiasm for the concepts with a chance to practice collaboration in the way that makes BDD work.&lt;/p&gt;

&lt;p&gt;Day 3 is a practical day for programmers to learn about Cucumber: what it is, what it isn’t, and how to write good cucumber code that can be maintained over time.&lt;/p&gt;

&lt;p&gt;Day 4 covers advanced BDD concepts and common pitfall people find when using these techniques in the real world.&lt;/p&gt;

&lt;h2 id=&quot;do-i-have-to-sign-up-for-all-four-days&quot;&gt;Do I have to sign up for all four days?&lt;/h2&gt;

&lt;p&gt;No, you can pick and choose, and just come to one day if you like. There’s a small per day discount if you book all four days.&lt;/p&gt;

&lt;h2 id=&quot;so-which-days-are-for-me&quot;&gt;So which days are for me?&lt;/h2&gt;

&lt;p&gt;if you're a &lt;strong&gt;developer with Ruby experience&lt;/strong&gt;, you might want to skip the first day and come along to days 2, 3 or 4.&lt;/p&gt;

&lt;p&gt;If you are a &lt;strong&gt;Product Owner, Business Analyst, Project Manager or UX specialist&lt;/strong&gt;, come along to just day 2, and understand why BDD is designed for you guys in the first place!&lt;/p&gt;

&lt;p&gt;If you're a &lt;strong&gt;keen developer but not necessily very experienced in Ruby&lt;/strong&gt;, you should consider the &lt;a href=&quot;http://bdd.eventbrite.co.uk&quot;&gt;full four day course&lt;/a&gt;. We'll take you through the basics of Ruby, the reasons behind doing development this way, how to use Cucumber properly (saving you time in the long run) and some neat advanced tricks.&lt;/p&gt;

&lt;h2 id=&quot;are-you-running-early-bird-tickets-or-promotions&quot;&gt;Are you running early bird tickets, or promotions?&lt;/h2&gt;

&lt;p&gt;Glad you asked: if you use the code &lt;strong&gt;super-early-birdy&lt;/strong&gt; you’ll get 20% of the list price until 1st August, just for reading this far down the page :)&lt;/p&gt;

&lt;h2 id=&quot;how-can-i-find-out-more-or-book-my-place&quot;&gt;How can I find out more or book my place?&lt;/h2&gt;

&lt;p&gt;You can find more info and book at &lt;a href=&quot;http://bddkickstart.com&quot;&gt;bddkickstart.com&lt;/a&gt;, or &lt;a href=&quot;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#116;&amp;#111;:&amp;#058;&amp;#104;&amp;#101;&amp;#108;&amp;#108;&amp;#111;&amp;#064;&amp;#098;&amp;#100;&amp;#100;&amp;#107;&amp;#105;&amp;#099;&amp;#107;&amp;#115;&amp;#116;&amp;#097;&amp;#114;&amp;#116;&amp;#046;&amp;#099;&amp;#111;&amp;#109;&quot;&gt;send us mail&lt;/a&gt; if you have specific questions.&lt;/p&gt;

&lt;p&gt;Hope to see you in October!&lt;/p&gt;
</content></entry><entry><title>Waxing Lyrical on Pathfinding</title><category term='code'/><category term='conference'/><category term='fun'/><category term='software craftsmanship'/><category term='sc2012'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2012/05/waxing-lyrical-on-pathfinding'/><updated>2012-05-15T16:02:40+01:00</updated><id>http://chrismdp.com/2012/05/waxing-lyrical-on-pathfinding</id><content type='html'>&lt;p&gt;I’ve been attending and giving talks at the &lt;a href=&quot;http://www.codemanship.co.uk/softwarecraftsmanship/&quot;&gt;Software Craftmanship&lt;/a&gt; conference at Bletchley Park for a couple of years now. I’ve always found the crowd there engaging and great to hang out with, and I’d encourage you to come along if you’re not doing much on June 14th. There are &lt;a href=&quot;http://www.codemanship.co.uk/softwarecraftsmanship/register.html&quot;&gt;still a few tickets left&lt;/a&gt; if you’re quick.&lt;/p&gt;

&lt;h2 id=&quot;my-talk-proposal-pathfinding-peril&quot;&gt;My talk proposal: Pathfinding Peril&lt;/h2&gt;

&lt;p&gt;This year my talk proposal is about pathfinding, a subject rather close to my heart since I started &lt;a href=&quot;http://soltrader.net&quot;&gt;building a game&lt;/a&gt;. Finding the shortest path through a connected graph is a complex problem, and one which has a number of very useful applications, not just in the game sector.&lt;/p&gt;

&lt;p&gt;Thankfully there are some efficient algorithms out there which solve it well. The aim of my session will be to teach the popular A-Star pathfinding algorithm, along with the factors to consider when choosing appropriate algorithm weights to make the implementation efficient.&lt;/p&gt;

&lt;p&gt;A-star can be written in any language, but a simple (untested, probably buggy) version might look like this:&lt;/p&gt;

&lt;p&gt;{% highlight ruby %}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def find(goal)
  closed_set = []
  open_set = [ start_node ]
  came_from = {}
  while(!open_set.empty)
    current = open_set.sort{|node| node.estimated_score }.first
    return reconstruct_path(came_from, goal) if (current == goal)

    open_set -= [current]
    closed_set += [current]
    current.neighbours.each do |neighbour|
      next if closed_set.include?(neighbour)
      possible_score = best_score[current] + current.cost_to(neighbour)
      if !open_set.include?(neighbour) || possible_score &amp;lt; node.running_score
        open_set += [neighbour]
        came_from[neighbour] = current
        neighbour.running_score = possible_score
        neighbour.estimated_score = neighbour.running_score + neighbour.cost_to(goal)
      end
    end
  end
  return 'failed'
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;{% endhighlight %}&lt;/p&gt;

&lt;p&gt;The session will last a couple of hours. I’ll take you through the basic A-Star implementation in the first 30 minutes of the session, and we’ll spend some time getting that coded up in the second 30 minutes. After a break, we’ll be running a tournament for an hour using Matt Wynne’s &lt;a href=&quot;https://github.com/mattwynne/robot_tournament&quot;&gt;Robot Tournament engine&lt;/a&gt;. Your robot will be one of two characters in a maze, and the idea is to find the exit as soon as possible without being eaten by the minotaur that roams randomly around it.&lt;/p&gt;

&lt;p&gt;You’ll get points for exiting the maze within a certain timeframe, exiting first, and simply avoiding being eaten! If I get time, I’ll write a basic ruby gem which allows you to parse the maze presented on stdin into nodes with connections.&lt;/p&gt;

&lt;p&gt;We’ll run around 20 minute iterations, but probably reset the score every time so that the final score is the one that matters. It should be lots of fun!&lt;/p&gt;

&lt;p&gt;What do you think of the session idea? How could I improve it?&lt;/p&gt;
</content></entry><entry><title>On coding defensively</title><category term='code'/><category term='ruby'/><category term='craftsmanship'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2012/02/on-coding-defensively'/><updated>2012-02-17T18:57:25+00:00</updated><id>http://chrismdp.com/2012/02/on-coding-defensively</id><content type='html'>&lt;p&gt;When writing code that will be used by others (and we do that 100% of the time, even if the other user is ourselves in a few weeks time), there’s a tricky balance to strike between being generous to the users of our code, and ensuring that they get the information they want to ensure they’re calling our code correctly. There are two coding maxims: “Be generous on input, and strict on output”, and “fail fast”, which we need to hold in tension. This post explores the trade-offs between the two.&lt;/p&gt;

&lt;h2 id=&quot;be-generous-on-input-and-strict-on-output&quot;&gt;“Be generous on input, and strict on output”&lt;/h2&gt;

&lt;p&gt;This is another way of saying &lt;em&gt;code defensively:&lt;/em&gt; we should allow the user to use our code a number of different ways, yet be careful about what we return to them to ensure they can’t be easily confused.&lt;/p&gt;

&lt;p&gt;For example, consider this method:&lt;/p&gt;

&lt;p&gt;{% highlight ruby %}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def calculate_total(products)
  total = 0
  products.each do |product|
    total += product.price
  end
  return total
end

calculate_total([product1, product2])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;{% endhighlight %}&lt;/p&gt;

&lt;p&gt;If we accept an array as an argument, we could code defensively and allow a single product to be passed as well:&lt;/p&gt;

&lt;p&gt;{% highlight ruby %}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def calculate_total(products)
  products = [products] unless.products.respond_to?(:each)
  total = 0
  products.each do |product|
    total += product.price
  end
  return total
end

calculate_total(product) # also works now
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;{% endhighlight %}&lt;/p&gt;

&lt;p&gt;This is a nice feature and potentially allows our code to be used more flexibly.&lt;/p&gt;

&lt;p&gt;Let’s take this further. What happens when our user decides to pass in an invalid value, such as a string? Should we code defensively for that situation?&lt;/p&gt;

&lt;p&gt;{% highlight ruby %}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def calculate_total(products)
  return 0 if product.is_a?(String)
  products = [products] unless.products.respond_to?(:each)
  total = 0
  products.each do |product|
    total += product.price
  end
  return total
end

calculate_total(&quot;product&quot;) # return 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;{% endhighlight %}&lt;/p&gt;

&lt;p&gt;In this case, we could argue our code is being defensive: it avoided the crash that would have happened when we tried to call the non-existent &lt;code&gt;price&lt;/code&gt; method on the passed in string. Is this desirable?&lt;/p&gt;

&lt;h2 id=&quot;if-were-going-to-fail-we-should-fail-quickly&quot;&gt;“If we’re going to fail, we should fail quickly.”&lt;/h2&gt;

&lt;p&gt;The programmer using our code probably made a mistake here. If we fail immediately, it’s very easy for them to see where the error is. If we accept pretty much anything, and return ‘0’ (or much worse, ‘-999’ or some other abomination) we’re just going to get incorrect prices: we’re going to hide and propagate the error down the call stack and make it much harder to debug.&lt;/p&gt;

&lt;p&gt;This is a tricky balance and it depends on the situation, but in general I think these principles are helpful to deciding what to do:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Fail if we cannot be strict with our output.&lt;/em&gt; Coding defensively has two sides: generous with input, but also strict with output. If the output is changed by the way we recieve our argument, we’re not being specific enough. In the above example, we’re effectively giving a string a price of zero, which is extra behaviour we probably don’t want. Likewise, make sure that if there’s no way we can return a sensible result, then we should not accept the argument passed and fail instead.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Is our method doing too much?&lt;/em&gt; In the case of the above method our user might be wanting to pass the name of the product as a string, and look up the product to work out the price. We could support that, but this will encourage duplication: if we persist with keeping methods that do “A and B”, we’ll find over time we code will spring up additional methods which do “A” and “B” separately. Our method is now too complex and needs to be split into two.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Be generous with types.&lt;/em&gt; We have some advantages working in a dynamically typed language such as Ruby. Use the power of Duck Typing: don’t check if objects are certain types: check if they respond to the methods that we need to call on them.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Be generous at the edges of our code.&lt;/em&gt; Being generous with private APIs and methods only used by ourselves in constrained circumstances is a waste of time: we should just ensure we’re calling our own code correctly.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;When we fail, we should fail hard. Really hard.&lt;/em&gt; In its laudable determination to follow the &lt;a href=&quot;http://en.wikipedia.org/wiki/Principle_of_least_astonishment&quot;&gt;Principle of Least Astonishment&lt;/a&gt;, Ruby has a weakness for over-generosity. It tends to return nil when it encounters an error in cases where in my opinion it should throw an exception. Programmers don’t always check for the nils they receive correctly, which means they get passed around our codebase, eventually causing a crash when we least expect it. We should not return nil: that’s not being specific enough with our outputs. We should throw an exception or terminate the program if we really need to get their attention.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What do you think? Do you tend to learn more towards coding defensively, or failing early?&lt;/p&gt;

&lt;p&gt;(Thanks to &lt;a href=&quot;http://www.unboxedconsulting.com/people/alex-tomlins&quot;&gt;Alex Tomlins&lt;/a&gt; at Unboxed for the conversation that led to this post.)&lt;/p&gt;
</content></entry><entry><title>Sol Trader: on lighting</title><category term='products'/><category term='c++'/><category term='code'/><category term='opengl'/><category term='sol trader'/><category term='game development'/><category term='lighting'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2012/02/sol-trading-lighting'/><updated>2012-02-14T22:56:43+00:00</updated><id>http://chrismdp.com/2012/02/sol-trading-lighting</id><content type='html'>&lt;p&gt;A quick update on the lighting code I’ve been working on. Now that I have normal maps and per-pixel bump mapping working, I can turn these:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/sol-trader-lighting-1.png&quot; alt=&quot;ship-texture-1&quot; /&gt;
&lt;img src=&quot;/files/sol-trader-lighting-2.png&quot; alt=&quot;ship-texture-2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Into this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/sol-trader-lighting-3.png&quot; alt=&quot;ship-texture-3&quot; /&gt;
&lt;img src=&quot;/files/sol-trader-lighting-4.png&quot; alt=&quot;ship-texture-4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Check out how the ship appears lit from each side. It looks even better as you see it moving. Hey presto: a realistic 3D effect with only two triangles rendered.&lt;/p&gt;

&lt;p&gt;All I’m using is this simple GLSL fragment shader:&lt;/p&gt;

&lt;p&gt;{% highlight c %}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;void main() {
  vec4 color = texture(baseTexture, uv);
  vFragColor = vertColor * color;
  float alpha = vFragColor.a;

  if (alpha &amp;gt; 0.0 &amp;amp;&amp;amp; useNormal) {
    vec3 lightDirection = normalize(vec3(0.2, 0.2, 0.0));
    vec4 normal = normalize(texture(normalTexture, uv) * 2.0 - 1.0);
    vec4 vEyeNormal = normalMatrix * normal;

    float diffuse = max(0.0, dot(vEyeNormal.xyz, lightDirection));
    vFragColor *= (diffuse * 3);
    vFragColor.a = alpha;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;{% endhighlight %}&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/GLSL&quot;&gt;GLSL&lt;/a&gt; is great.&lt;/p&gt;
</content></entry><entry><title>Effective bloom in OpenGL for Sol Trader</title><category term='products'/><category term='c++'/><category term='code'/><category term='opengl'/><category term='bloom'/><category term='sol trader'/><category term='game development'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2012/02/effective-bloom-in-open-gl-for-sol-trader'/><updated>2012-02-02T16:28:30+00:00</updated><id>http://chrismdp.com/2012/02/effective-bloom-in-open-gl-for-sol-trader</id><content type='html'>&lt;div class=&quot;notice&quot;&gt;
  &lt;h2&gt;TL;DR&lt;/h2&gt;

  &lt;p&gt;Skip to the &lt;a href=&quot;#pictures&quot;&gt;pictures&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;I’ve been working on and off on &lt;a href=&quot;http://soltrader.net&quot;&gt;Sol Trader&lt;/a&gt; (&lt;a href=&quot;/2012/01/why-i-switched-from-ruby-back-to-c-plus-plus/&quot;&gt;C++ version&lt;/a&gt;) for about a month now. At the beginning of this week, I’ve been coded up an effective type formatting system using freetype2 natively with OpenGL, which is now in and showing even rather esoteric fonts nicely.&lt;/p&gt;

&lt;p&gt;The second half of this week was spent adding on a bloom filter to the graphics engine.&lt;/p&gt;

&lt;h2 id=&quot;bloom-filtering-making-your-world-stand-out&quot;&gt;Bloom filtering: making your world stand out&lt;/h2&gt;

&lt;p&gt;A bloom filter causes bright areas of the image to ‘take over’ their surrounding area, simulating the high dynamic range of real light. It stops your game world from looking dull and flat and really makes it stand out. See &lt;a href=&quot;http://www.gamasutra.com/view/feature/2107/realtime_glow.php&quot;&gt;this article&lt;/a&gt; for some nice screenshots from Tron 2.0 - it can also be used for all sorts of glow and blur effects.&lt;/p&gt;

&lt;p&gt;So how’s it done? The trick is to render your scene to a texture, rather than to the screen. Once you’ve done that, you blur and downsample that texture a few times, and then display the results combined with the original texture.&lt;/p&gt;

&lt;p&gt;Specifically, this is the process my bloom filter follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Render to a texture&lt;/li&gt;
  &lt;li&gt;Copy that texture to two more textures, one a quarter of the screen size, and one an eighth of the screen size.&lt;/li&gt;
  &lt;li&gt;Blur the two smaller textures using gaussian blur. There are &lt;a href=&quot;http://prideout.net/archive/bloom/&quot;&gt;clever techniques&lt;/a&gt; which mean you only need six texture lookups to perform a 5x5 gaussian blur. Texture lookups are expensive, so it’s worth doing as few as possible.&lt;/li&gt;
  &lt;li&gt;Add all these textures together and add an exposure function to cause the white to saturate for strong color values.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Writing the initial bloom filter was fairly easy. Making it fast was &lt;em&gt;hard:&lt;/em&gt; you have to work at combining the different aspects of the effect to get what you want, with the absolute minimum of effort for your graphics card. My first attempt ran at a paltry 27 frames a seconds, although it looked very nice: I eventually managed to get it to the point where it runs in roughly 150 frames per second and still looks 80% as good.&lt;/p&gt;

&lt;div name=&quot;pictures&quot;&gt;
  &lt;h2&gt;What's the result?&lt;/h2&gt;
&lt;/div&gt;

&lt;p&gt;A picture is worth a thousand words, so here are three:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/sol-trader-bloom-1.png&quot; alt=&quot;bloom-1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/sol-trader-bloom-2.png&quot; alt=&quot;bloom-2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/sol-trader-bloom-3.png&quot; alt=&quot;bloom-3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I’ve deliberately upped the bloom exposure to show off the effect: it is much more obvious when it’s moving. Hopefully you can see the volcanic eruptions on Venus are making the outline of the players’ ship that much more hazy. The label of the planet also currently has the bloom effect applied: I’ll be able to turn that off when I have a more functional GUI in place.&lt;/p&gt;

&lt;p&gt;I plan to use this effect for all sorts of things: laser fire, explosions, you name it.&lt;/p&gt;

&lt;h2 id=&quot;next&quot;&gt;Next…&lt;/h2&gt;

&lt;p&gt;I’m going to tackle the gui. I now have AI characters with names trading on Earth’s main commodity market: it’s time the player joins them in making trades.&lt;/p&gt;

&lt;div class=&quot;notice&quot;&gt;
  If you'd like to purchase Sol Trader you can now do so at &lt;a href=&quot;http://soltrader.net&quot;&gt;soltrader.net&lt;/a&gt;!
&lt;/div&gt;
</content></entry><entry><title>Switching Sol Trader from Ruby to C++: one week on</title><category term='products'/><category term='ruby'/><category term='c++'/><category term='code'/><category term='sol trader'/><category term='game development'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2012/01/switching-sol-trader-from-ruby-to-c-plus-plus-one-week-on'/><updated>2012-01-16T09:38:25+00:00</updated><id>http://chrismdp.com/2012/01/switching-sol-trader-from-ruby-to-c-plus-plus-one-week-on</id><content type='html'>&lt;p&gt;Well, I didn’t quite expect that. My &lt;a href=&quot;/2012/01/why-i-switched-from-ruby-back-to-c-plus-plus/&quot;&gt;previous post&lt;/a&gt; about switching &lt;a href=&quot;http://soltrader.net&quot;&gt;Sol Trader&lt;/a&gt; development from Ruby back to C++ caused &lt;a href=&quot;http://news.ycombinator.com/item?id=3440596&quot;&gt;quite a storm&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Not being used to making waves on the mainstream Internet, I naively attempted to dive in and read and respond to every comment. It appears that feedback from the Internet at large tends towards the negative, so after a few hours I was feeling pretty discouraged, and only continued replying to some of the constructive feedback. Sorry if you didn’t get a response.&lt;/p&gt;

&lt;p&gt;I have a few more comparisons between Ruby and C++ which I’d like to share.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;I’m finding myself reinventing the wheel more.&lt;/em&gt; In Ruby-land I found third-party code easier to read, easier to install and easier to use. Trying to use someone else’s library is C++ is harder. Often people don’t seem to write automated tests, which strongly recommends me against using them. I’m also concerned that new libraries might introduce hidden memory leaks which will waste me time massively when I come to hunt them down. I appreciate people don’t release their code just for me, so I’m not complaining: I’ve just found it more difficult to trust third-party code. I hope to try and fix this tendency by releasing large extractions from my project as libraries in the future.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Boost is awesome.&lt;/em&gt; One notable exception to the above concern is the wonderful &lt;a href=&quot;http://boost.org&quot;&gt;Boost&lt;/a&gt; library suite. There is a library for almost everything you might need there, and the quality is very high. I’m already using the &lt;a href=&quot;http://www.boost.org/libs/signals2&quot;&gt;Signals2&lt;/a&gt; library for notifications (following the &lt;a href=&quot;http://en.wikipedia.org/wiki/Observer_pattern&quot;&gt;Observer pattern&lt;/a&gt;) and I plan to use the &lt;a href=&quot;http://www.boost.org/libs/serialization&quot;&gt;Serialization&lt;/a&gt; library for saving and loading games.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;What to test?&lt;/em&gt; The testing profile of my C++ code is different to my Ruby code. Thanks to strong typing, my tests fail for longer during the ‘red’ stage, so I find I have to write fewer edge cases. There are only so many ways C++ types can fit together, whereas Ruby objects can be combined in any way you like. I’m not sure I’ve hit on the right level of coverage yet: I’m not writing any tests for the more visual parts of Sol Trader yet and I’d like to consider how to.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;I’m using a classist approach to testing.&lt;/em&gt; In C++ I’ve tended to favour a &lt;a href=&quot;http://martinfowler.com/articles/mocksArentStubs.html&quot;&gt;classical approach to TDD&lt;/a&gt;: that of testing a few small classes together from the outside using the public interface. Where I’m &lt;a href=&quot;http://stackoverflow.com/a/384067/1073735&quot;&gt;coding to interfaces&lt;/a&gt; I’m able to stub out that interface by inheriting from it in my test, but I’m not doing that often. Mostly I’m following my nose and attempting to keep my classes small and my collaborations few. I don’t get all the design signals from my tests that I would like, but in my view that’s better than exposing the internals of my class to the tests: that just complicates it unnecessarily. C++ is already difficult to read.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Prototyping complex class structures in Ruby first is really useful.&lt;/em&gt; I’ve often benefited from having an existing Ruby class structure to take as my lead when writing C++. Those subsystems that I’d already written in Ruby were at least twice as fast to write. Rather than typing, or getting past the syntax, I’ve found &lt;a href=&quot;http://dannorth.net/2010/08/30/introducing-deliberate-discovery/&quot;&gt;learning to be the constraint&lt;/a&gt; in a number of coding situations. I’m not sure I’d always write in Ruby first, but in a case where I was really stuck and wanted to explore possible options, I might consider a rapid Ruby prototype over &lt;a href=&quot;http://en.wikipedia.org/wiki/Class-responsibility-collaboration_card&quot;&gt;CRC card design&lt;/a&gt;, for example.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’ll continue to post my learnings as I collect them.&lt;/p&gt;

&lt;div class=&quot;notice&quot;&gt;
  If you'd like to purchase Sol Trader you can now do so at &lt;a href=&quot;http://soltrader.net&quot;&gt;soltrader.net&lt;/a&gt;!
&lt;/div&gt;
</content></entry><entry><title>Why I switched from Ruby back to C++</title><category term='products'/><category term='ruby'/><category term='c++'/><category term='code'/><category term='sol trader'/><category term='game development'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2012/01/why-i-switched-from-ruby-back-to-c-plus-plus'/><updated>2012-01-08T20:21:41+00:00</updated><id>http://chrismdp.com/2012/01/why-i-switched-from-ruby-back-to-c-plus-plus</id><content type='html'>&lt;div class=&quot;notice&quot;&gt;
  &lt;b&gt;UPDATE:&lt;/b&gt; This post was pretty popular. I've posted a followup &lt;a href=&quot;/2012/01/switching-sol-trader-from-ruby-to-c-plus-plus-one-week-on/&quot;&gt;here&lt;/a&gt;.
&lt;/div&gt;

&lt;p&gt;After two months of Sol Trader development in Ruby, I took a difficult decision last Wednesday morning: I’ve decided to rewrite the game code from scratch in C++. Let me explain my reasons.&lt;/p&gt;

&lt;div class=&quot;notice&quot;&gt;
  If you'd like to purchase Sol Trader you can now do so at &lt;a href=&quot;http://soltrader.net&quot;&gt;soltrader.net&lt;/a&gt;!
&lt;/div&gt;

&lt;h2 id=&quot;why-i-did-it&quot;&gt;Why I did it&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Slow frames:&lt;/em&gt; When working with Ruby, I use the excellent &lt;a href=&quot;https://github.com/jlnr/gosu&quot;&gt;Gosu&lt;/a&gt; library to do all my game specific coding. This initially worked great, but occasionally I’d just get slow frames coming up. My game is timed to run at 60 frames per second, which means that each frame should take no more than 16.67ms to run. Yet every so often my profiling would come up with a frame that would take 25ms or 45ms for no discernible reason. I just couldn’t find the issue here: I turned every sub system in the game off. I disabled garbage collection. I hacked my slow frame detection code into the simplest gosu sample I could find, and they still existed. I didn’t feel like I could quite trust the stack to deliver the framerate I needed, and I hadn’t yet put in half the features I wanted to.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Object explosion when bridging to C:&lt;/em&gt; A lot of the libraries I was using were written in C, and therefore there was several thousand objects (mostly floats) being created each frame to act as a bridge between Ruby and C code. It feels like that that CPU time should be better spent in the AI improving the quality of the simulation, or on better effects, rather than loading the garbage collection with an unnecessary burden.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Ease of packaging and distribution:&lt;/em&gt; I feel like packaging is going to be a lot easier. I’m not too bothered about hiding the source code: I may well do that anyway to purchasers of the game. It’s the running on Windows I’m worried about: from my research it feels like it’s going to take some effort to push the game out on a non-Unix platform. And with a video game, releasing on Windows is a must.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Manual memory management for performance:&lt;/em&gt; The garbage collection is still too stuttery under MRI (even with Ruby 1.9.3, which is a huge improvement on what’s gone before) - it still stops the world each time. I looked at other implementations, and even considered learning all about garbage collection to help improve Ruby myself, but then realised that getting royally distracted wouldn’t help me ship a working game.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-do-i-miss-about-ruby&quot;&gt;What do I miss about Ruby?&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;I miss using RSpec hugely:&lt;/em&gt; There are ways of doing &lt;a href=&quot;http://benmabey.com/2007/09/09/bdd-your-c.html&quot;&gt;testing of C programs using RSpec&lt;/a&gt; but it doesn’t feel like I want to wrap each of my C++ classes with a SWIG interface just to check they’re working. I may still do this for some form of Cucumber testing, I’m not sure. I’m using &lt;a href=&quot;http://unittest-cpp.sourceforge.net/&quot;&gt;UnitTest++&lt;/a&gt; for my testing at the moment, which is very lightweight and good enough for my purposes.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Duck-typing:&lt;/em&gt; defining interfaces for everything is a pain in the backside, although it does force you to think more clearly about the roles of your classes.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Easy mockist testing:&lt;/em&gt; There’s no built in reflection in C++ so it also makes you have to code to interfaces if you want to do any mockist testing. I’m mostly returning to a classist style of testing with small well defined groups of classes being tested at once. It’s not a perfect system and I still have much learning to do here.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Terseness of syntax:&lt;/em&gt; There’s just a lot more characters to type, and a lot more ceremony for each class. This tempts you to larger classes and methods, which I’m resisting at the moment. I need to take the time to set up &lt;a href=&quot;http://www.vim.org/scripts/script.php?script_id=213&quot;&gt;c.vim&lt;/a&gt; exactly how I want it.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Funnily enough, I don’t miss the automatic memory management: I like having that level of control. Old habits die hard.&lt;/p&gt;

&lt;h2 id=&quot;so-how-far-have-i-got&quot;&gt;So how far have I got?&lt;/h2&gt;

&lt;p&gt;Thankfully, it’s not a complete rewrite as I’d already done a lot of thinking about the architecture and a lot of the basic classes translate directly over.  I worked really hard at the end of last week and got a lot done:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I put in &lt;a href=&quot;http://www.libsdl.org&quot;&gt;SDL&lt;/a&gt; to build the basic game framework: hopefully building on Windows will be a snap. I plan to have a working Windows build as soon as I can lay my hands on a cheap Windows 7 PC.&lt;/li&gt;
  &lt;li&gt;Basic testing using UnitTest++, with tests that are compiled and run as part of the build process.&lt;/li&gt;
  &lt;li&gt;Decoupled gameplay/physics updates from the graphical framerate using the techniques &lt;a href=&quot;http://gafferongames.com/game-physics/fix-your-timestep/&quot;&gt;here&lt;/a&gt;. I have zero &lt;a href=&quot;http://en.wikipedia.org/wiki/Temporal_anti-aliasing&quot;&gt;temporal aliasing&lt;/a&gt; bugs right now, which makes for a super smooth 300+ FPS graphic loop with a fixed 60FPS physics loop.&lt;/li&gt;
  &lt;li&gt;Re-implemented physics using &lt;a href=&quot;http://chipmunk-physics.net/&quot;&gt;Chipmunk&lt;/a&gt;, the same library I used in Ruby, which made it very easy to switch over.&lt;/li&gt;
  &lt;li&gt;Put in a brand new and much improved parallax-scrolled starfield.&lt;/li&gt;
  &lt;li&gt;Added a basic controllable spacecraft, planets and jumpgates back in: the player can fly around as before and collide successfully with other objects.&lt;/li&gt;
  &lt;li&gt;A simple particle system so the spacecraft give off exhaust smoke, and the jumpgates emit spooky purple mist.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Even with using OpenGL &lt;a href=&quot;http://en.wikibooks.org/wiki/OpenGL_Programming/GLStart/Tut3#Immediate_Mode&quot;&gt;immediate mode&lt;/a&gt; (this is a bad thing) and rendering 10000 stars each frame (very inefficient), and a throwing bunch of particles onscreen, I’m still getting 300+ FPS on my 2009 MacbookPro and only using 30MB of memory. That’s satisfying.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;UPDATE:&lt;/em&gt; By (very) popular demand, here’s a screenshot. Be aware this is &lt;em&gt;three days work only&lt;/em&gt;, and obviously not final artwork:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/files/sol-trader-1.png&quot;&gt;&lt;img src=&quot;/files/sol-trader-1.png&quot; width=&quot;500&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next I plan to add back in jumping between different planetary orbits, and then work on a very basic ‘person-level view’, so that you can get out of your ship and walk around.&lt;/p&gt;

&lt;h2 id=&quot;was-it-the-right-decision&quot;&gt;Was it the right decision?&lt;/h2&gt;

&lt;p&gt;I’ll know at the end of the project :) My feeling is though that it was the correct thing to do. Being really close to the metal will make it much easier to implement some of the really complex AI stuff I’d like to do later on. I already know C++ very well, and estimate it’ll only delay me a week or two if I work hard. If I like, I can always bundle my project as a C++ library and control it from Ruby later on, but it’s harder to go in the other direction.&lt;/p&gt;

&lt;p&gt;What do you think? Did I make the right call?&lt;/p&gt;

&lt;div class=&quot;notice&quot;&gt;
  If you'd like to purchase Sol Trader you can now do so at &lt;a href=&quot;http://soltrader.net&quot;&gt;soltrader.net&lt;/a&gt;!
&lt;/div&gt;
</content></entry><entry><title>Introducing Sol Trader</title><category term='products'/><category term='code'/><category term='life'/><category term='sol trader'/><category term='game development'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2012/01/introducing-sol-trader'/><updated>2012-01-03T14:53:53+00:00</updated><id>http://chrismdp.com/2012/01/introducing-sol-trader</id><content type='html'>&lt;p&gt;Happy new year, everybody! It’s been a little while in coming, but I’ve finally got to the point where I want to announce the project I’ve been working on privately for the last few months. I’m heading after a dream, and I want to share it with you.&lt;/p&gt;

&lt;p&gt;But first some background.&lt;/p&gt;

&lt;h2 id=&quot;i-love-designing-games&quot;&gt;I love designing games&lt;/h2&gt;

&lt;p&gt;I started my career in software development working on PC games back at the turn of the millennium. I worked for a fantastic little company called &lt;a href=&quot;http://en.wikipedia.org/wiki/Elixir_Studios&quot;&gt;Elixir Studios&lt;/a&gt;, which sadly closed in 2005. I’ll never forget them: they gave me my first break into software development and I studied my craft under some fantastic mentors, notably &lt;a href=&quot;http://www.linkedin.com/in/achimstremplat&quot;&gt;Achim Stremplat&lt;/a&gt; and &lt;a href=&quot;http://www.linkedin.com/profile/view?id=3207719&amp;amp;locale=en_US&amp;amp;trk=tyah&quot;&gt;Jamie Doornbos&lt;/a&gt;. These guys taught me a love of good code, and a love of doing things right.&lt;/p&gt;

&lt;p&gt;On leaving Elixir, I moved away from the games industry and into web programming, leaving C++ and Microsoft Visual Studio far behind me. I spent a few years shifting through a number of languages (Perl, PHP, Java, Python) before settling on Ruby as my interpreted language of choice. I’ve never lost that love for building and designing games, though, and I’ve kept my hand in over the years. I’ve always been more interested in designing games, rather than playing them: as a kid I was always the Dungeon Master, or the guy &lt;a href=&quot;http://en.wikipedia.org/wiki/HeroQuest&quot;&gt;designing the adventure&lt;/a&gt;. As an 11 year old I used to write games in BASIC on BBC Micros and sell them to my friends for 10p each. I guess you could say it’s built in to my psyche.&lt;/p&gt;

&lt;h2 id=&quot;sol-trader&quot;&gt;Sol Trader&lt;/h2&gt;

&lt;p&gt;Another realisation: one of the things that I’ve learnt in the last year is that I’d love to spend more time working on my own products. I have done this in a half-hearted fashion over the years, but my motivation tends to die off when the initial rush of enthusiasm fades. To help myself see it through to the end, I’ve decided to try to realise a long held dream. Alongside working with clients this year, I’m going to spend some of my remaining time building and releasing my first commercial game.&lt;/p&gt;

&lt;p&gt;I’m therefore very pleased to announce &lt;a href=&quot;http://soltrader.net&quot;&gt;Sol Trader&lt;/a&gt; - an open-ended space trading and exploration game set in our solar system in the near future.&lt;/p&gt;

&lt;p&gt;The game itself has been in development since the end of October last year: it started as a side project with my kids (we originally named it Spacestuff) but has blossomed and grown into something much more. There’s some info &lt;a href=&quot;http://soltrader.net&quot;&gt;on the website&lt;/a&gt; I’ve been putting together, but more will be forthcoming shortly. I’m aware that I’ve not got any screenshots yet, but once the first artwork goes in I’ll put some up. It’s already playable: my kids are already having great fun travelling between Earth and Venus via jump gates and landing on the planets.&lt;/p&gt;

&lt;p&gt;When I’m ready for beta testers, I’ll put an announcement out on the mailing list: &lt;a href=&quot;http://soltrader.net&quot;&gt;sign up at soltrader.net&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;motivate-me&quot;&gt;Motivate me!&lt;/h2&gt;

&lt;p&gt;One of the things I need to work on is the ability to complete my own projects. Working on a game is a great motivator, but I need help to keep my motivation up! I’d be very grateful if you’d drop me a note asking me how I’m getting on if you don’t hear from me for a while. Write a comment on a blog post, retweet something, sign up to get emails, ping me &lt;a href=&quot;http://twitter.com/chrismdp&quot;&gt;on twitter&lt;/a&gt;: every little bit of feedback I get (even if critical) helps to motivate me to work on it.&lt;/p&gt;

&lt;p&gt;More on the game in future posts, including some thoughts on architecture, language choice and whether or how to release the source code. Crafting this codebase has already proved a treasure trove of interesting thoughts on code quality and testing, which I plan to share on this blog over time. I’m also aware that I’m breaking a few “indy game developer” rules: I’ll share my opinions about that, too.&lt;/p&gt;

&lt;p&gt;Will I finish? Will it be a success? I’ve no idea, but I plan to learn as much as possible from doing it. At the very least, I’m shooting after a dream, and I’ll be pleased to finish 2012 having attempted it, whatever the outcome.&lt;/p&gt;

&lt;p&gt;Have you got a &lt;a href=&quot;http://www.youtube.com/watch?v=_Klf8uWkvaw&quot;&gt;half-baked dream&lt;/a&gt; you’re going to turn into reality this year? If not, why not?&lt;/p&gt;

</content></entry><entry><title>A cache-busting http server script in ruby</title><category term='code'/><category term='javascript'/><category term='ruby'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2011/12/cache-busting-ruby-http-server'/><updated>2011-12-14T16:57:43+00:00</updated><id>http://chrismdp.com/2011/12/cache-busting-ruby-http-server</id><content type='html'>&lt;p&gt;&lt;i&gt;&quot;All of this can be yours/just give me what I want/and no one gets hurt&quot;&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;– Bono, Vertigo&lt;/p&gt;

&lt;p&gt;If you’ve done much Javascript development, or simple web development without a webserver backend, you don’t want to set up a complex framework. Just give me the pages: I want to be able to start a simple webserver to give me the current directory structure as a website. You can’t simply load the pages into a browser using &lt;code&gt;file://&lt;/code&gt; because that screws up the relative paths that our sites rely on. What’s the best way of doing this?&lt;/p&gt;

&lt;h2 id=&quot;pythons-simplehttpserver&quot;&gt;Python’s SimpleHTTPServer&lt;/h2&gt;

&lt;p&gt;One simple way is:&lt;/p&gt;

&lt;p&gt;{% highlight bash %}
python -m SimpleHTTPServer
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;This does a great job, but there’s one small problem: caching. Ordinarily during development you’ll want the browser to request the HTML each time, and the python server doesn’t do that out of the box.&lt;/p&gt;

&lt;h2 id=&quot;rubys-webrick-with-adding-cache-busting&quot;&gt;Ruby’s WEBrick with adding cache-busting&lt;/h2&gt;

&lt;p&gt;Here’s a small script I borrowed from &lt;a href=&quot;http://github.com/pmarti&quot;&gt;pmarti&lt;/a&gt; and tweaked. It lives in the &lt;code&gt;bin/http&lt;/code&gt; file on my path: I just type &lt;code&gt;http&lt;/code&gt; in the relevant folder and I’m set.&lt;/p&gt;

&lt;p&gt;{% highlight ruby %}
#!/usr/bin/env ruby&lt;/p&gt;

&lt;p&gt;require ‘webrick’
class NonCachingFileHandler &amp;lt; WEBrick::HTTPServlet::FileHandler
  def prevent_caching(res)
    res[‘ETag’]          = nil
    res[‘Last-Modified’] = Time.now + 100&lt;strong&gt;4
    res[‘Cache-Control’] = ‘no-store, no-cache, must-revalidate, post-check=0, pre-check=0’
    res[‘Pragma’]        = ‘no-cache’
    res[‘Expires’]       = Time.now - 100&lt;/strong&gt;4
  end&lt;/p&gt;

&lt;p&gt;def do_GET(req, res)
    super
    prevent_caching(res)
  end
end&lt;/p&gt;

&lt;p&gt;server = WEBrick::HTTPServer.new :Port =&amp;gt; 8989&lt;/p&gt;

&lt;p&gt;server.mount ‘/’, NonCachingFileHandler , Dir.pwd
trap(‘INT’) { server.stop }
server.start
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Hope it’s helpful. Do you know of a better way of doing it? Feel free to share…&lt;/p&gt;
</content></entry><entry><title>Feature writing: multiple actors</title><category term='bdd'/><category term='cucumber'/><category term='code'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2011/12/feature-writing-multiple-actors'/><updated>2011-12-08T11:01:23+00:00</updated><id>http://chrismdp.com/2011/12/feature-writing-multiple-actors</id><content type='html'>&lt;p&gt;I’ve &lt;a href=&quot;/tag/cucumber&quot;&gt;written a fair amount&lt;/a&gt; in the past about Cucumber and the way I like to structure my features. After reading these through, someone recently asked me about a particular workflow concerning multiple actors.&lt;/p&gt;

&lt;p&gt;They were starting from the following feature file:&lt;/p&gt;

&lt;p&gt;{% highlight cucumber %}
Feature: Complimentary Accounts&lt;/p&gt;

&lt;p&gt;Scenario: Creating a complimentary account
  Given I am signed-in to the admin area
  When I create a new complimintary account with these details:
    | Name  | John Smith           |
    | Email | john.smith@gmail.com |
  Then a welcome email should be sent to ‘john.smith@gmail.com’&lt;/p&gt;

&lt;p&gt;Scenario: Receiving a welcome email
  Given I have received a welcome email
  When I follow the link
  Then I should see a welcome page
  And I should be signed-in
  And I should see the details of my account
  And I should be able to set my password
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;The concern was that the feature had more than one actor involved: there was the administrator creating the complimentary account, and the recipient of that account. The feature as written just didn’t feel right to them: it’s not clear who the actors are from the text, although the feature has a certain workflow. Also the check that recipient can set the password is an important one, but isn’t clearly called out in the feature.&lt;/p&gt;

&lt;p&gt;How could this be written differently?&lt;/p&gt;

&lt;h2 id=&quot;setting-the-scene&quot;&gt;Setting the scene&lt;/h2&gt;

&lt;p&gt;The first thing I noticed is that the feature is missing a preamble. People often leave these out, but I find them invaluable to set the context of the feature and to ensure there’s a point to adding the feature at all.&lt;/p&gt;

&lt;p&gt;To write the scenarios, I would approach this from the point of view of the personas involved, who I would &lt;a href=&quot;/2011/04/cucumbers-with-personality&quot;&gt;normally give names&lt;/a&gt;. In this case there are two obvious personas: Angie the Administrator, and Victor the VIP. There’s a more subtle role at play here too: It’s unlikely that Angie decides who gets a complimentary accoun. Therefore we also have the particular stakeholder who wants this feature, who we will call Buster the Business Development Director.&lt;/p&gt;

&lt;p&gt;This is how I’d structure the “non-executing” part of the feature:&lt;/p&gt;

&lt;p&gt;{% highlight cucumber %}
Feature: Complimentary Accounts
  In order to cater for certain special people that promote our
    company in other ways
  As Buster the Business development director
  I want the ability to ask Angie the Administrator to create
    special free accounts for special people&lt;/p&gt;

&lt;p&gt;Scenario: Angie creates a complimentary account
    ..
  Scenario: Victor receives a welcome email
    ..
  Scenario: Victor can change his password
    ..
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;I’d check this with the customer too, just to make sure it made sense. If the password changing is important to them, I’d make that a separate scenario.&lt;/p&gt;

&lt;h2 id=&quot;writing-the-scenarios&quot;&gt;Writing the scenarios&lt;/h2&gt;

&lt;p&gt;I keep my &lt;a href=&quot;/2011/09/layers-of-abstraction-writing-great-cucumber-code&quot;&gt;scenarios really short&lt;/a&gt;. So I’d try and push some of these details down into steps. Let’s take the scenarios in turn:&lt;/p&gt;

&lt;p&gt;{% highlight cucumber %}
@angie
Scenario: Angie creates a complimentary account
  When I create a new complimintary account for Victor
  Then a welcome email should be sent to Victor
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;@angie&lt;/code&gt; tag just ensures that Angie is signed in. It’s neater than a separate &lt;code&gt;Given&lt;/code&gt; step in my opinion. I don’t include specifics such as email addresses: it’s just noise.&lt;/p&gt;

&lt;p&gt;{% highlight cucumber %}
@victor
Scenario: Victor receives a welcome email
  Given I have received a welcome email
  When I follow the link
  Then I am logged straight into my account
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;The fact that we’ve switched actor here isn’t a problem in my view. It’s still clear who “I” is in this case, because the scenario title is clear and descriptive.&lt;/p&gt;

&lt;p&gt;{% highlight cucumber %}
@victor
Scenario: Victor receives a welcome email
  Given I have received a welcome email
  When I follow the link
  Then I can change my password from the first screen
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;This is a very similar scenario, but it’s worth making it a separate one as the password change is an important business need for the customer. It’s very tempting to tag the check onto the end of a previous scenario, but this reduces clarity and the perceived importance of that particular part of the feature in everybody’s mind.&lt;/p&gt;

&lt;p&gt;Feature files are &lt;a href=&quot;/2010/02/the-story-card-is-not-the-story&quot;&gt;bookmarks for conversation&lt;/a&gt; in just the same way that other agile tracking methods are. If they don’t accurate represent the shared thinking, they’re worse than useless.&lt;/p&gt;

&lt;h2 id=&quot;get-the-customer-input&quot;&gt;Get the customer input&lt;/h2&gt;

&lt;p&gt;I’m not sure if this feature had originally been run past the customer, but this point is so important that it’s worth restating anyway:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you’re not showing the customer the feature files you’re missing out on 90% of the value of Cucumber.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I’m still sometimes guilty of not doing this. I feel like I must have covered every detail and that discussing it with a customer is a waste of time, but I can’t remember ever showing a feature file to a customer where we didn’t change the feature to make it better. There’s always some ambiguity you &lt;a href=&quot;/2010/01/driving-out-feature-ambiguity&quot;&gt;can drive out&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Have you got any feature files you'd like some input on? Send them over and I'll do my best to give some insight if I can.&lt;/i&gt;&lt;/p&gt;

</content></entry><entry><title>How I'm testing iPhone apps: part 2</title><category term='code'/><category term='ios'/><category term='tdd'/><category term='bdd'/><category term='testing ios'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2011/12/how-im-testing-iphone-apps-part-2'/><updated>2011-12-06T16:02:54+00:00</updated><id>http://chrismdp.com/2011/12/how-im-testing-iphone-apps-part-2</id><content type='html'>&lt;p&gt;&lt;i&gt;I've recently been doing some iOS development, and working out the best way to test-drive the development of iOS apps was high on my priority list. I know that the automated testing of iOS applications is still not widely practiced and isn't well documented, so I decided to write a series of posts to start to rectify that. You may wish to read &lt;a href=&quot;/2011/12/how-im-testing-iphone-apps-part-1&quot;&gt;part 1&lt;/a&gt; first.&lt;/i&gt;&lt;/p&gt;

&lt;h2 id=&quot;kiwi&quot;&gt;Kiwi&lt;/h2&gt;

&lt;p&gt;We were looking for a testing framework which supported iOS’s asynchronous programming model and &lt;a href=&quot;https://github.com/allending/Kiwi&quot;&gt;Kiwi&lt;/a&gt; answered the call. It has a great syntax, &lt;a href=&quot;https://github.com/allending/Kiwi/wiki/Guide:-Up-and-Running-with-Kiwi&quot;&gt;comprehensive set up assistance&lt;/a&gt;, asynchronous support and built in mocking. I’d highly recommend you check it out: the syntax helps me to think in the right way and it has pretty much all the features we needed.&lt;/p&gt;

&lt;p&gt;Kiwi’s block syntax looks like this:&lt;/p&gt;

&lt;p&gt;{% highlight objectivec %}
describe(@”Team”, ^{
    context(@”when newly created”, ^{
        it(@”should have a name”, ^{
            id team = [Team team];
            [[team.name should] equal:@”Black Hawks”];
        });
    });
});
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Much better than the old fashioned xUnit style of testing, in my opinion. You might hate it, of course. You can use Kiwi’s features &lt;a href=&quot;https://github.com/allending/Kiwi/issues/73&quot;&gt;without having to use the block syntax&lt;/a&gt; if you want.&lt;/p&gt;

&lt;h2 id=&quot;objective-cs-delegate-model&quot;&gt;Objective-C’s delegate model&lt;/h2&gt;

&lt;p&gt;Many of the Apple core libraries use a delegate pattern for handling callbacks from a class. This is similar to Java’s interfaces, and superficially similar to blocks in Ruby and anonymous functions in Javascript.&lt;/p&gt;

&lt;p&gt;As an example, let’s take CoreLocation. When wanting to find the location of a phone, you create a new &lt;code&gt;CoreLocationManager&lt;/code&gt; and call &lt;code&gt;startUpdatingLocation&lt;/code&gt; on it:&lt;/p&gt;

&lt;p&gt;{% highlight objectivec %}
CLLocationManager *manager = [[CLLocationManager alloc] init];
[manager startUpdatingLocation];
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;This call returns immediately: so how do you execute code when the location is found? You use a delegate: an object with responds to the &lt;code&gt;locationManager: didUpdateToLocation: fromLocation&lt;/code&gt; method:&lt;/p&gt;

&lt;p&gt;{% highlight objectivec %}
-(void)locationManager:(CLLocationManager *)manager didUpdateToLocation:(CLLocation *)newLocation fromLocation:(CLLocation *)oldLocation
{
  NSLog(“$@ I AM IN YOU”, newLocation);
  foundLocation = YES;
}
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Then you set this object to be the CLLocationManager’s delegate before calling &lt;code&gt;startUpdatingLocation&lt;/code&gt;. Often you set the delegate to &lt;code&gt;self&lt;/code&gt; and define the delegate method on the calling object.&lt;/p&gt;

&lt;p&gt;{% highlight objectivec %}
CLLocationManager *manager = [[CLLocationManager alloc] init];
manager.delegate = self;
[manager startUpdatingLocation];
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;There’s more about this model in &lt;a href=&quot;http://developer.apple.com/library/IOs/#documentation/iPhone/Conceptual/iPhone101/Articles/02_DesignPatterns.html&quot;&gt;this article from Apple&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;testing-delegates&quot;&gt;Testing delegates&lt;/h2&gt;

&lt;p&gt;This is tricky to test, because we can’t simply do this:&lt;/p&gt;

&lt;p&gt;{% highlight objectivec %}
it(“should call the delegate when ready”, ^{
  [testObject startUpdatingLocation];
  [[testObject.foundLocation should] equal:theValue(YES)];
});
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;The test will call &lt;code&gt;startUpdatingLocation&lt;/code&gt;, and then immediately check the &lt;code&gt;foundLocation&lt;/code&gt; property to see whether it’s been set. It won’t have been, because the delegate won’t have been called yet.&lt;/p&gt;

&lt;p&gt;How were we to stub endpoints such as the location system for for our app? We found two ways of doing this, with varying effectiveness:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Using Objective-C categories to redefine class methods&lt;/li&gt;
  &lt;li&gt;Using a Kiwi stub to inject a derived class which mocks out key methods&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next post, I’ll dive into some detail on both of these methods and show some of the pros and cons of each.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;How are you testing iPhone apps? Do chime in throughout the series with suggestions and comments, and I’ll edit the posts as appropriate.&lt;/i&gt;&lt;/p&gt;

</content></entry><entry><title>How I'm testing iPhone apps: part 1</title><category term='code'/><category term='ios'/><category term='tdd'/><category term='bdd'/><category term='testing ios'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2011/12/how-im-testing-iphone-apps-part-1'/><updated>2011-12-01T22:45:35+00:00</updated><id>http://chrismdp.com/2011/12/how-im-testing-iphone-apps-part-1</id><content type='html'>&lt;p&gt;&lt;i&gt;This week I've been working with &lt;a href=&quot;http://shilling.co.uk&quot;&gt;Shilling&lt;/a&gt; helping them get starting with iOS application development. Part of the deal was for me to learn it myself as we went: I've done hardly any iOS work and we've been learning how to do it together.&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;&lt;i&gt;As part of this process, working out the best way to test-drive the development of iOS apps was high on my priority list. I know that the automated testing of iOS applications is still not widely practiced and isn't well documented, so I decided to write a series of posts to start to rectify that.&lt;/i&gt;&lt;/p&gt;

&lt;h2 id=&quot;our-goal&quot;&gt;Our goal&lt;/h2&gt;

&lt;p&gt;There are two main parts to working out how to test-drive applications on a new platform. One is to figure out the testing libraries and write simple &lt;code&gt;1 + 1 = 2&lt;/code&gt; style tests to prove it can be done. The other half is working out how to apply common testing techniques such as stubbing external systems, isolating tests correctly and optionally driving the interface.&lt;/p&gt;

&lt;p&gt;The first of these steps is quite easy on iOS, but the second part is harder. In our case, we have some code which makes use of CoreLocation and the &lt;a href=&quot;http://geonames.org&quot;&gt;Geonames&lt;/a&gt; service to get an iPhone’s location and look up the county name from a latitude and longitude. This means that our code relies on two external services to run, which we want to stub out: we don’t want these services to be called each time our tests run. How were we to set this up correctly?&lt;/p&gt;

&lt;h2 id=&quot;apples-documentation&quot;&gt;Apple’s documentation&lt;/h2&gt;

&lt;p&gt;To kick off our testing adventure on iOS, we started with &lt;a href=&quot;http://developer.apple.com/library/ios/#documentation/Xcode/Conceptual/ios_development_workflow/135-Unit_Testing_Applications/unit_testing_applications.html&quot;&gt;Apple’s own public documentation&lt;/a&gt; on how to test iOS. This is a fairly comprehensive guide on how to set up a project with built in testing, allowing you to write basic SenTest tests quite quickly.&lt;/p&gt;

&lt;p&gt;Apple divides its definition of unit testing into two categories:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Logic tests: these are what I would normally call unit tests. They rely on very few external APIs and are run standalone without the use of a simulator.&lt;/li&gt;
  &lt;li&gt;Application tests: these are executed in the context of a running application on a simulator or iOS device.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The document details how to set up both types in your project. There’s a few things missing though:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;They have good ideas about &lt;a href=&quot;http://developer.apple.com/library/ios/#documentation/Xcode/Conceptual/ios_development_workflow/135-Unit_Testing_Applications/unit_testing_applications.html#//apple_ref/doc/uid/TP40007959-CH20-SW12&quot;&gt;how to write decent tests&lt;/a&gt;, but lack information on how to correctly mock system endpoints. I want to do this so that I don’t have to rely on iOS location simulation, or HTTP response data, to make my tests work.&lt;/li&gt;
  &lt;li&gt;There was also nothing on how to test asynchronously, which is a real problem as iOS applications are mostly written in this way.&lt;/li&gt;
  &lt;li&gt;Application tests are executed in the context of your application, but without extra work it’s not possible to support native UI testing, &lt;a href=&quot;https://github.com/jnicklas/capybara&quot;&gt;Capybara&lt;/a&gt; style. We are reduced to manipulating controllers directly, which is good enough for now. This assumes you have your user interface wired up correctly. As the app always has to be tested manually anyway then this isn’t too much of a risk, but if you want to take a step further you could use &lt;a href=&quot;https://github.com/square/KIF&quot;&gt;KIF&lt;/a&gt;, &lt;a href=&quot;https://github.com/moredip/Frank&quot;&gt;Frank&lt;/a&gt; or Apple’s own &lt;a href=&quot;http://developer.apple.com/library/ios/#documentation/DeveloperTools/Reference/UIAutomationRef/Introduction/Introduction.html&quot;&gt;UIAutomation&lt;/a&gt;. There’s a good post comparing them &lt;a href=&quot;http://sgleadow.github.com/blog/2011/10/26/which-automated-ios-testing-tool-to-use/&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So we followed through the basic set up instructions, and got a simple test running which added two numbers together. A good start, but useless for real work.&lt;/p&gt;

&lt;p&gt;Time to go in search of an asynchronous testing framework: and we found a great one. Next time, I’ll talk about the wonderful &lt;a href=&quot;https://github.com/allending/Kiwi&quot;&gt;Kiwi&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;How are you testing iPhone apps? Do chime in throughout the series with suggestions and comments, and I’ll edit the posts as appropriate.&lt;/i&gt;&lt;/p&gt;
</content></entry><entry><title>Your tests are lying to you</title><category term='code'/><category term='cucumber'/><category term='craftsmanship'/><category term='bdd'/><category term='rspec'/><category term='rails'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2011/10/your-tests-are-lying-to-you'/><updated>2011-10-17T19:10:29+01:00</updated><id>http://chrismdp.com/2011/10/your-tests-are-lying-to-you</id><content type='html'>&lt;p&gt;Using mocks within your test suite has gone rather out of fashion. Programmers everywhere have been lamenting the fact that mock-based tests are becoming more and more brittle: they’re having to change the test code in multiple places each time there’s the slightest code change. In fact, they seem to be changing the test code much much more often than the production code.&lt;/p&gt;

&lt;p&gt;Using mocks appear to require a lot of set up code for the object under test. Why not just fire up Factory Girl, create a bunch of objects we need to test this code, and just check the outputs?&lt;/p&gt;

&lt;p&gt;This works, and appears to work nicely. For a while.&lt;/p&gt;

&lt;p&gt;Eventually your tests will get to the point where they’re lying to you: they’re telling you your code works whereas actually it only works by coincidence. This post will examine the different techniques we can use to test code, and why some work better than others in the long term.&lt;/p&gt;

&lt;h2 id=&quot;the-problem&quot;&gt;The problem&lt;/h2&gt;

&lt;p&gt;To look at this further, let’s try to write a conference simulator for a new website that tries to predict how many people might attend an upcoming event: &lt;/p&gt;

&lt;p&gt;{% highlight ruby %}
describe Conference do
  it “calculates total rating” do
    conference = Conference.new(:total_rating =&amp;gt; 9)
    conference.total_rating.should == 9
  end
end
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;A simple start, with equally simple production code. Next, we decide to extract our code for calculating the rating into &lt;code&gt;Speaker&lt;/code&gt; classes. We decide not to change the test suite much, and make the code work behind the scenes:&lt;/p&gt;

&lt;p&gt;{% highlight ruby %}
describe Conference do
  it “calculates total rating” do
    conference = Conference.new(:speakers =&amp;gt; [:chris, :paul])
    conference.total_rating.should == 9
  end
end
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;A nice simple, easy change? You’ll pay for this later. Where is the Speaker coming from? Your Conference class is creating it somewhere, or retrieving it from a factory. You’ve increased the number of collaborators for this class by at least one (possibly three), yet your test isn’t showing the additional complexity. It’s deceitfully hiding it, whilst you continue on in blissful ignorance.&lt;/p&gt;

&lt;p&gt;Your tests are now sitting around the outside of your system. There are no tests for the Speaker class at all, except that we co-incidentally check the rating it emits. Another developer is likely to miss the connection and remove the implied test whilst changing the code for a different reason later.&lt;/p&gt;

&lt;p&gt;This gets worse over time:&lt;/p&gt;

&lt;p&gt;{% highlight ruby %}
describe Conference do
  it “calculates total rating” do
    conference = Conference.new(
      :schedule =&amp;gt; :nine_to_five,
      :talks =&amp;gt; [talk_for(:chris), talk_for(:paul)]
    )
    conference.total_rating.should == 9
  end
end
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Can you see what’s going on here? We’ve created some nice helper methods to make it easy to create the required talk objects we need. This test is fairly easy to read, but it’s dressing up the problem. The test code is relying on far too many collaborators to function correctly to return the correct result.&lt;/p&gt;

&lt;p&gt;When you extract a class, your purely state based tests don’t always require change. If you’re not stubbing out or mocking systems, you can end up in a situation where you’re relying on the code to work without realising it.&lt;/p&gt;

&lt;p&gt;How could it be improved?&lt;/p&gt;

&lt;p&gt;{% highlight ruby %}
describe Conference do
  let(:talk1) { double(:talk, :rating =&amp;gt; 10) }
  let(:talk2) { double(:talk, :rating =&amp;gt; 6) }
  let(:schedule) { double(:schedule, :rating =&amp;gt; 10) }
  before(:each) { Schedule.stub(:new =&amp;gt; schedule) }
  it “calculates total rating” do
    conference = Conference.new(
      :schedule =&amp;gt; :nine_to_five,
      :talks =&amp;gt; [talk1, talk2]
    )
    conference.total_rating.should == 9
  end
end&lt;/p&gt;

&lt;p&gt;describe Speaker do
end
describe Schedule do
end
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Now we’ve isolated the method nicely from its collaborators, and ensured that its behaviour is correct: that it aggregates the ratings of the talks and the schedule. We also make sure that we’re testing Conference correctly, also in isolation.&lt;/p&gt;

&lt;p&gt;The more you use refactoring methods such as Extract Class without cleaning up your tests, the more likely your tests will be lying to you. Little by little, those tests that you trusted are slowly testing more and more code. You add a multitude of edge cases at the edges, never thinking about the complexity within. You’ve resorted to using end-to-end tests to test basic correctness.&lt;/p&gt;

&lt;p&gt;This is a bad thing on many levels: for example, what happens to interface discovery? How will you know how the interface of your lower-level classes needs to behave if you’re not mocking or stubbing it? You are resorting to guessing, rather than exercising the interface ahead of time in your tests. If you have tests around the edges, but not in the middle, you’re not gaining the design input that tests give you in each layer of your system.&lt;/p&gt;

&lt;h2 id=&quot;your-code-stinks&quot;&gt;Your code stinks&lt;/h2&gt;

&lt;p&gt;If you go the whole hog with testing in isolation, then you might end up here with something like this:&lt;/p&gt;

&lt;p&gt;{% highlight ruby %}
describe Conference do
  let(:talk1) { double(:talk, :rating =&amp;gt; 10) }
  let(:talk2) { double(:talk, :rating =&amp;gt; 6) }
  let(:talk3) { double(:talk, :rating =&amp;gt; 2) }
  let(:talk4) { double(:talk, :rating =&amp;gt; 8) }
  let(:track1) { double(:track, :talks =&amp;gt; [talk1, talk3] }
  let(:track2) { double(:track, :talks =&amp;gt; [talk2, talk4] }&lt;/p&gt;

&lt;p&gt;let(:venue1) { double(:venue, :nice_coffee_places =&amp;gt; 3) }&lt;/p&gt;

&lt;p&gt;let(:joe) { double(:announcer, :experience =&amp;gt; 5) }&lt;/p&gt;

&lt;p&gt;let(:schedule) { double(:schedule, :rating =&amp;gt; 10, :accouncer =&amp;gt; joe) }
  before(:each) { Schedule.stub(:new =&amp;gt; schedule) }&lt;/p&gt;

&lt;p&gt;it “calculates total rating” do
    conference = Conference.new(
      :schedule =&amp;gt; :nine_to_five,
      :tracks =&amp;gt; [track1, track2],
      :organiser =&amp;gt; joe,
      :venues =&amp;gt; [venue1, venue1]
    )
    conference.total_rating.should == 6.3945820
  end
end&lt;/p&gt;

&lt;p&gt;{% endhighlight %}&lt;/p&gt;

&lt;p&gt;I’m not surprised people moan about maintaining this: if any aspect of the Conference class changes, this test will break and need to be fixed. We can see that this test code is hard to write and difficult to read. It would be so much easier just to hide this setup in a few factory methods with some sensible defaults, right?&lt;/p&gt;

&lt;p&gt;Maybe it’s not the test code that’s the problem. Perhaps the code stinks. Perhaps the class simply has way too many collaborators, which is why your test code contains a large amount of set up.&lt;/p&gt;

&lt;p&gt;For this test code, we can see there are several objects leaking all over the conference code: to refactor this I’d probably get through a Scheduler, Caterer and perhaps a TrackAggregator before I was done. I’d ensure all these objects were tested in isolation, and ensure that there are acceptance tests all the way through to make sure the customer has what they need.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Well designed code is easy to test.&lt;/em&gt; As a rule of thumb, anytime I get over about two or three lines of setup code for testing a method, I normally take a step back and ask myself if this method is doing too much.&lt;/p&gt;

&lt;h2 id=&quot;test-speed&quot;&gt;Test speed&lt;/h2&gt;

&lt;p&gt;The other advantage of running tests purely in isolation is that they’re fast. Very fast. When I’m coding Rails apps these days, thanks to advice from &lt;a href=&quot;http://twitter.com/coreyhaines&quot;&gt;Corey Haines&lt;/a&gt; I’m running a &lt;code&gt;spec_no_rails&lt;/code&gt; folder which runs independently from the rest of my Rails app. Rails apps by default epitomise this problem: default model tests exercise the whole system from the database up. By running your tests independently you’re not having to clean the database or start Rails each time you run your tests, which means that much of your interesting code can be tested in under a second. &lt;a href=&quot;http://twitter.com/garybernhardt&quot;&gt;Gary Bernhardt&lt;/a&gt; has more information on how to set this up in his excellent &lt;a href=&quot;http://destroyallsoftware.com&quot;&gt;Destroy All Software&lt;/a&gt; screencast series.&lt;/p&gt;

&lt;h2 id=&quot;what-im-not-saying&quot;&gt;What I’m not saying&lt;/h2&gt;

&lt;p&gt;This isn’t an argument for or against Mocks or Stubs. Either technique can be used successfully to generate clean code. It’s an argument about only exercising the code under test, and leave the rest of the system to take care of itself. The important thing is that you &lt;em&gt;don’t exercise your collaborators:&lt;/em&gt; whether you check they’ve received messages or simply stub them to return input doesn’t matter.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Don’t forget end-to-end tests.&lt;/em&gt; These are very important for business acceptance and for ensuring basic functionality. The important thing is to ensure that you’re being intentional about your end-to-end tests and ensure your unit tests are not end-to-end tests by accident.&lt;/p&gt;

&lt;p&gt;Take a good look at the test code for a project you recently worked on. You don’t need to look at the production code yet: notice that I’ve not included any production code in these examples. You shouldn’t need to see it to know whether it’s of good quality or not: you can tell that by reading the tests.&lt;/p&gt;

&lt;p&gt;Which is the most annoying or bulky part of your test code? Are your tests deceiving you about what they’re testing? How could you improve the code to make this test code easier to maintain?&lt;/p&gt;
</content></entry><entry><title>Kanogo: vapourware to beta in 24 hours</title><category term='code'/><category term='products'/><category term='business'/><category term='kano analysis'/><category term='rails'/><category term='heroku'/><category term='ruby'/><category term='kanogo'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2011/09/kanogo-vapourware-to-beta-in-24-hours'/><updated>2011-09-12T11:30:37+01:00</updated><id>http://chrismdp.com/2011/09/kanogo-vapourware-to-beta-in-24-hours</id><content type='html'>&lt;div class=&quot;notice&quot;&gt;
  &lt;h2&gt;TL;DR&lt;/h2&gt;

  &lt;p&gt;Last week I built the first beta of a new web product called &lt;a href=&quot;http://kanogo.com&quot;&gt;Kanogo&lt;/a&gt;. It’s designed to gather feedback and perform &lt;a href=&quot;http://en.wikipedia.org/wiki/Kano_model&quot;&gt;Kano analysis&lt;/a&gt; to determine which direction you should take with your website.&lt;/p&gt;

  &lt;p&gt;Here's an example, designed specifically for this blog. Thanks for your feedback!&lt;/p&gt;

  &lt;iframe allowtransparency=&quot;true&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot; src=&quot;http://kanogo.com/surveys/13/embed?&quot; style=&quot;width: 100%; height: 120px&quot;&gt;
  &lt;/iframe&gt;

  &lt;p&gt;Sign up for the beta &lt;a href=&quot;http://kanogo.com&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;/div&gt;

&lt;h2 id=&quot;the-backstory&quot;&gt;The backstory&lt;/h2&gt;

&lt;p&gt;A while back I agonising over which should be the next greatest feature for one of my products. I thought the best thing to do would be to conduct some Kano analysis on the product in question, and realised there wasn’t an easy way of doing this. I’ve used &lt;a href=&quot;http://kanosurvey.com&quot;&gt;kanosurvey.com&lt;/a&gt; in the past, but it didn’t really feel like the right tool. How was I to get users to answer my survey?&lt;/p&gt;

&lt;p&gt;“Wouldn’t it be great,” I thought, “if I could embed a little survey box on the site that asked customers what they thought and provided me with Kano analysis stats?” The concept behind &lt;a href=&quot;http://kanogo.com&quot;&gt;Kanogo&lt;/a&gt; was born.&lt;/p&gt;

&lt;p&gt;Fast forward several months to last week. I found myself with a few days spare and decided that the best use of them would be to build a beta of this product. Always up for a challenge, I decided to give myself 24 hours to build and launch.&lt;/p&gt;

&lt;p&gt;That’s not very long, so I had to hustle.&lt;/p&gt;

&lt;h2 id=&quot;timeline&quot;&gt;Timeline&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;7 Sep: 12:10am:&lt;/em&gt; &lt;a href=&quot;https://twitter.com/#!/chrismdp/status/111214768651636736&quot;&gt;I announced my intentions&lt;/a&gt;, mostly to motivate myself through fear of failing in public. I finally decided on a name, and registered the domain and the twitter account. I announced the product &lt;a href=&quot;https://twitter.com/#!/chrismdp/status/111240345341263872&quot;&gt;to the world&lt;/a&gt; (well, a &lt;a href=&quot;https://twitter.com/#!/chrismdp/followers&quot;&gt;subset&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;7 Sep: 01:55am:&lt;/em&gt; Got a new Rails 3.1 app running on Heroku cedar. It’s a one page app using a Campaign Monitor signup form. Got my first beta signup. Finished for the night.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;7 Sep: 07:40am:&lt;/em&gt; Announced Kanogo again, just in case anyone had been sleeping at 2am :) Got another 3 beta signups and a bunch of feedback on spelling errors.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;7 Sep: 10:13am:&lt;/em&gt; Simple twitter sign in done using &lt;a href=&quot;https://github.com/intridea/omniauth&quot;&gt;Omniauth&lt;/a&gt; and this really useful &lt;a href=&quot;https://github.com/RailsApps/rails3-mongoid-omniauth/wiki/Tutorial&quot;&gt;tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;7 Sep: 02:45pm:&lt;/em&gt; The USA woke up and I got more beta signups: now up to 5. Got the basic data entry for surveys and features done. Started work on the embed. Was feeling fairly pessimistic about a beta launch for that night, but didn’t want to let myself down.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;7 Sep: 05:53pm:&lt;/em&gt; Embed done, quicker than expected. Took a break. Now feeling &lt;a href=&quot;https://twitter.com/#!/chrismdp/status/111482135218626560&quot;&gt;cautiously optimistic&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;7 Sep: 09:12pm:&lt;/em&gt; Basic response mechanism in: now needed to apply the Kano analysis magic! Adrenalin took over from caffiene as primary stimulant.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;7 Sep: 11:20pm:&lt;/em&gt; Turned on twitter sign in as basic method of getting registered on the site. Removed redundant Campaign Monitor signup: emailed subscribers manually to ask them to sign in via twitter. Beta &lt;a href=&quot;https://twitter.com/#!/kanogoapp/status/111564545708929024&quot;&gt;went live!&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-result&quot;&gt;The result&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/files/kanogo-1.png&quot; alt=&quot;Embed&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/kanogo-2.png&quot; alt=&quot;Results&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After 24 hours, I had a beta running, which worked. Granted, it wasn’t great, but it was something that had some value.&lt;/p&gt;

&lt;p&gt;I spent the rest of the evening and following morning promoting the beta on mailing lists and on twitter. By the end of the following day I had 30 or so beta signups.&lt;/p&gt;

&lt;p&gt;It’s already adding value to beta users. Two sites using the beta already on their own products. One beta user has now decied to implement a feature as he’s realised his customers consider it a “must have”. There’s no substitute for real feedback.&lt;/p&gt;

&lt;h2 id=&quot;learnings&quot;&gt;Learnings&lt;/h2&gt;

&lt;p&gt;Some of the things I’ve learned so far:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Cloud tools are the business.&lt;/em&gt; It was so easy to register the domain with &lt;a href=&quot;http://dnsimple.com&quot;&gt;dnsimple.com&lt;/a&gt;, start up a &lt;a href=&quot;http://twitter.com/kanagoapp&quot;&gt;twitter account&lt;/a&gt; for marketing and customer interaction, deploy to &lt;a href=&quot;http://heroku.com&quot;&gt;Heroku&lt;/a&gt;, get initial beta signups with &lt;a href=&quot;http://campaignmonitor.com&quot;&gt;Campaign Monitor&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Modern development tools rock.&lt;/em&gt; I used Rails 3.1 for this app, which worked beautifully, and I love the use of sprockets to help manage the asset pipeline. Running the app on Heroku cedar went without a hitch. I used twitter for authentication, and it only took an hour to set up.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;There is no “quick and dirty”.&lt;/em&gt; The app is (almost) fully tested: I confess I left a couple of methods only covered by end-to-end tests (which doesn’t really count). I definitely proved that the only way to go fast is to go clean: &lt;a href=&quot;http://agileage.blogspot.com/2011/07/slow-and-dirty-rant-by-jason-gorman-at.html&quot;&gt;Jason was right&lt;/a&gt; that there is no “quick and dirty” only “slow and dirty”. This came back to bite me instantly: the code I didn’t use specs for took me the longest to get working.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Technology is the easy part.&lt;/em&gt; It didn’t take me long to build the site, but the trick is to build a business. After initial interest, the analytics on the site are way down as the next new thing appears on the internet and people move on. To gain traction I need to build the app my beta users actually want. Thankfully, quick feedback is what Kanogo does, so we’re eating our own dogfood and asking our users what they think at every turn. This is already directing which features I work on next, which has to be the most efficient way of moving forward, right?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;whats-next&quot;&gt;What’s next?&lt;/h2&gt;

&lt;p&gt;I plan to continue working on this, listening to beta user feedback, refining the features, and accepting new beta signup for the moment. I hope to turn this into a paid product at some point, as I think there’s a huge amount of value here to websites if I can get the messaging right.&lt;/p&gt;

&lt;h2 id=&quot;can-i-get-involved&quot;&gt;Can I get involved?&lt;/h2&gt;

&lt;p&gt;Sure! It’s not too late to join the beta: you can &lt;a href=&quot;http://kanogo.com&quot;&gt;do so here&lt;/a&gt;. I’d love your feedback on the product. It can give you value anywhere you have users of a website, even on a blog as shown above.&lt;/p&gt;
</content></entry><entry><title>Pin in the map: customisable pin icons</title><category term='code'/><category term='cucumber'/><category term='ruby'/><category term='legacy'/><category term='products'/><category term='pininthemap'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2011/09/pininthemap-customisable-pin-icons'/><updated>2011-09-06T21:18:13+01:00</updated><id>http://chrismdp.com/2011/09/pininthemap-customisable-pin-icons</id><content type='html'>&lt;p&gt;I’ve just spent some time updating my first ever Rails project, &lt;a href=&quot;http://pininthemap.com&quot;&gt;Pin in the map&lt;/a&gt;. Now you can change the icons associated with premium (paid for) pins. There are over 100 new icons to choose from: &lt;a href=&quot;http://pininthemap.com&quot;&gt;have fun!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/pininthemap-example.png&quot; alt=&quot;pininthemap example&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;learnings&quot;&gt;Learnings&lt;/h2&gt;

&lt;p&gt;This codebase is from 2006, so this has proved a nice little exercise in adding testing to a legacy project. I had no tests at all to speak of when I wrote the code five years ago, and the code shows it. I began by installing cucumber and rspec and quickly wrapping the two most common features in acceptance tests: creating and editing pins. Even on old code it was super easy to get capybara, cucumber and rspec up and running, thanks to the fact that we’ve upgraded the codebase to Rails 2 and started using bundler to manage gem dependencies. We stuck to Selenium for the tests as the code is very Google Maps heavy.&lt;/p&gt;

&lt;p&gt;It’s always worth keeping old apps vaguely up to date: the less inertia surrounding a codebase the more likely you’ll spend an afternoon adding an often-requested feature.&lt;/p&gt;
</content></entry><entry><title>e-petitions: handling traffic</title><category term='code'/><category term='scaling'/><category term='agile'/><category term='adn'/><category term='e-petitions'/><category term='government'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2011/08/e-petitions-handling-traffic'/><updated>2011-08-30T13:51:38+01:00</updated><id>http://chrismdp.com/2011/08/e-petitions-handling-traffic</id><content type='html'>&lt;p&gt;Since I &lt;a href=&quot;/2011/07/e-petitions-deconstructed&quot;&gt;last blogged about e-petitions&lt;/a&gt; we had what conservatively could be described as “something of a traffic spike”. The &lt;a href=&quot;http://www.bbc.co.uk/news/uk-politics-14474429&quot;&gt;amount of interest&lt;/a&gt; surrounding the site massively exceeded all our expectations.&lt;/p&gt;

&lt;p&gt;Given the time available to us, we had rated the site for about 10 requests a second, basing our expectations on 50% more usage than the original e-petitions site. However, during peak times we were seeing non-cached bursts of traffic through to the site of between 70-120 requests a second: we’d load tested up to about 40-50. This caused the site to intermittently produce &lt;a href=&quot;http://epetitions.direct.gov.uk/500.html&quot;&gt;500 errors&lt;/a&gt;; this in turn &lt;a href=&quot;http://www.thesun.co.uk/sol/homepage/news/3733792/E-petitions-website-down-on-first-day.html&quot;&gt;producing&lt;/a&gt; &lt;a href=&quot;http://www.guardian.co.uk/politics/2011/aug/04/government-e-petition-website-crashes&quot;&gt;headlines&lt;/a&gt; that we really didn’t want to see.&lt;/p&gt;

&lt;p&gt;Most perplexingly, we were still seeing intermittent failure messages in the logs when the site was getting about 20-30 requests a second, even though that had worked fine in testing. During this time none of the servers were under a huge amount of load, so we struggled to find the bottleneck.&lt;/p&gt;

&lt;p&gt;Eventually we discovered that the hardware firewall we’d put in place to help improve security wasn’t able to handle the number of network connections required of it, and was randomly dropping network connections. This included connections on the internal network, which caused connectivity problems to the seach and database servers. This caused most of the intermittent failures people saw. The firewall had been set up after we had done our load testing and we’d not re-run our testing since then, so we hadn’t spotted the problem
.&lt;/p&gt;

&lt;p&gt;Once this had been fixed, we were on to more familiar territory. The dedicated solr server we were running for search was really struggling with only 4 CPUs, so we rebooted it using 8 CPUs and it started working much better.&lt;/p&gt;

&lt;p&gt;We also made a number of other changes to the site to make it more robust:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;We brought an application server down, cloned the disk and set up a third application server within about half an hour. It’s not as quick as running on Amazon EC2, but it’s not a bad turnaround for a more traditionally hosted site.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We set up monitoring on the site using &lt;a href=&quot;http://munin-monitoring.org/&quot;&gt;Munin&lt;/a&gt;, which is a brilliant server montoring tool. This helped us discover the solr issues much more quickly.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We went right through the code and turned on caching everywhere we hadn’t yet thought of, including caching of more pages surrounding the signing step.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We worked around a sunspot issue which was causing a petition to reindex after every signature, stressing the search server further.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;lessons-learnt&quot;&gt;Lessons learnt&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Run your load tests again after any configuration change, even if it shouldn’t make a difference. If we’d done this, we’d have spotted the firewall configuration issue before the public did.&lt;/li&gt;
  &lt;li&gt;Set up proper measuring tools before the event. It took us a while to find the best cause of action with the search server because we were relying on &lt;a href=&quot;http://newrelic.com&quot;&gt;New Relic&lt;/a&gt; to monitor the application servers only. Once we had Munin running we could more easily make more CPUs available to the search server.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The vast majority of the above changes were made within one (very late) night: from a customer point of view, being agile isn’t just about how flexible you are during development, but how responsive you can be when there are problems. Our technology and stack choice really helped us out here, and I also particularly wanted to thank the Alpha.gov guys (&lt;a href=&quot;http://twitter.com/beng&quot;&gt;Ben Griffiths&lt;/a&gt;, &lt;a href=&quot;http://twitter.com/jystewart&quot;&gt;James Stewart&lt;/a&gt; and &lt;a href=&quot;http://twitter.com/fidothe&quot;&gt;Matt Patterson&lt;/a&gt;) and &lt;a href=&quot;http://www.unboxedconsulting.com/people/alex-tomlins&quot;&gt;Alex Tomlins&lt;/a&gt; from &lt;a href=&quot;http://unboxedconsulting.com&quot;&gt;Unboxed&lt;/a&gt; for stepping in and helping &lt;a href=&quot;http://www.unboxedconsulting.com/people/jolyon-pawlyn&quot;&gt;Jolyon&lt;/a&gt; and myself out that evening.&lt;/p&gt;

&lt;p&gt;Jolyon and I are &lt;a href=&quot;http://lanyrd.com/2011/lrug-september/sgzxr/&quot;&gt;giving a talk about e-petitions at LRUG&lt;/a&gt; next month if you’d like to hear more.&lt;/p&gt;
</content></entry><entry><title>Work with me</title><category term='code'/><category term='meta'/><category term='agile'/><category term='training'/><category term='life'/><category term='tdd'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2011/08/work-with-me'/><updated>2011-08-22T15:36:53+01:00</updated><id>http://chrismdp.com/2011/08/work-with-me</id><content type='html'>&lt;p&gt;I’ve been taking a break from my work and blogging for the summer: but now I’m looking for work again from next week.&lt;/p&gt;

&lt;p&gt;To this end I’ve put up a &lt;a href=&quot;/workwithme.html&quot;&gt;new page&lt;/a&gt; on this site which has all the details of what I can offer, and my availability. If you’d like to work with me this autumn, do &lt;a href=&quot;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#116;&amp;#111;:&amp;#099;&amp;#104;&amp;#114;&amp;#105;&amp;#115;&amp;#064;&amp;#116;&amp;#104;&amp;#105;&amp;#110;&amp;#107;&amp;#099;&amp;#111;&amp;#100;&amp;#101;&amp;#108;&amp;#101;&amp;#097;&amp;#114;&amp;#110;&amp;#046;&amp;#099;&amp;#111;&amp;#109;&quot;&gt;get in touch&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I also plan to start blogging again soon, with my first topic being &lt;a href=&quot;/2011/08/e-petitions-handling-traffic&quot;&gt;how we handled the massive site traffic&lt;/a&gt; we experienced on e-petitions &lt;a href=&quot;http://www.bbc.co.uk/news/uk-politics-14474429&quot;&gt;a couple of weeks ago&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>e-petitions: deconstructed</title><category term='code'/><category term='chef'/><category term='agile'/><category term='adn'/><category term='government'/><category term='e-petitions'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2011/07/e-petitions-deconstructed'/><updated>2011-07-29T15:57:09+01:00</updated><id>http://chrismdp.com/2011/07/e-petitions-deconstructed</id><content type='html'>&lt;div class=&quot;notice&quot;&gt;Update: I've posted more about the massive traffic surge and how we responded &lt;a href=&quot;/2011/08/e-petitions-handling-traffic&quot;&gt;here&lt;/a&gt;.&lt;/div&gt;

&lt;p&gt;The project that I’ve been working on at the Government Digital Service (GDS) for the last few weeks has just been launched. It’s the new Government &lt;a href=&quot;http://epetitions.direct.gov.uk&quot;&gt;e-petitions&lt;/a&gt; service, which replaces the old Number 10 petitions website run by the previous government. Time to talk about the architecture, how we set the team up and the effect the project is having within government.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/e-petitions.png&quot; alt=&quot;e-petitions&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-project&quot;&gt;The project&lt;/h2&gt;

&lt;p&gt;The project was overseen and run by &lt;a href=&quot;http://twitter.com/HMGSkunks&quot;&gt;Skunkworks&lt;/a&gt;, the new innovation arm of the GDS that specialises in quick projects with small teams. They hired the &lt;a href=&quot;http://agiledelivery.net&quot;&gt;Agile Delivery Network&lt;/a&gt; (ADN) to do the work: this is a non-profit organisation I’m involved with that’s trying to help government deliver IT projects more quickly.&lt;/p&gt;

&lt;p&gt;We put together a team consisting of myself and two other developers, a designer, a tester/project manager, our customer and an analyst to help with the copy and training the staff who will be moderating petitions.&lt;/p&gt;

&lt;p&gt;We originally started the project at the very beginning of June, knowing that we only had six weeks to get the site live. We ran three two-week iterations, during which requirements shifted around as the important deliverables came into focus.&lt;/p&gt;

&lt;p&gt;There were a number of major technical hurdles. We spent a lot of time getting the accessibility of the site right, and tweaking the feel of the search feature. Getting the site hosted was difficult: it’s not straightforward finding website hosting for a government website that collects personal data.&lt;/p&gt;

&lt;p&gt;Whilst we tried to find the right place to host the site, we spent a lot of time using &lt;a href=&quot;http://www.opscode.com/chef&quot;&gt;Chef&lt;/a&gt; to test our build configuration on Amazon EC2. When the hosting came online, it was relatively simple (thankfully) to deploy the site to the production environment, as we’d already prepared all the configuration scripts in advance.&lt;/p&gt;

&lt;h2 id=&quot;the-tech&quot;&gt;The tech&lt;/h2&gt;

&lt;p&gt;We built the site in Rails, with a MySQL and a Solr search backend. It’s running in production on two application servers, through nginx for static content with unicorn at the backend. There is one dedicated DB server, and one dedicated Solr server. Our JMeter testing showed that we may not need the dedicated Solr server, so that might also share CPU with a read-only MySQL slave in future if the site traffic gets heavier.&lt;/p&gt;

&lt;p&gt;For server configuration, we’re running a customised version of chef-solo on each of the servers, bootstrapped with a little bespoke script. We didn’t want to set up a chef server as we didn’t get the hosting environment set up until quite late in the day, and we didn’t want an external server with access to the production environment.&lt;/p&gt;

&lt;p&gt;Chef turned out to be awesome: it was very satisfying to watch all the scripts we’d built on EC2 “just work” (well, almost) on the live environment. Nginx + Unicorn was also a highlight: it’s more Unix-y that Apache + Passenger and handles graceful restarting very nicely.&lt;/p&gt;

&lt;h2 id=&quot;the-reaction&quot;&gt;The reaction&lt;/h2&gt;

&lt;p&gt;The site has been well received by those outside government, but perhaps just as importantly the way that we ran the project caused a bit of a stir within Whitehall too. Agile projects are still rare in government, and IT spending is a &lt;a href=&quot;http://www.bbc.co.uk/news/uk-politics-14314935&quot;&gt;hot topic&lt;/a&gt; right now. It’s great that people are beginning to think about how to deliver software in better ways and the guys at Skunkworks are doing really well at promoting agile methods internally.&lt;/p&gt;

&lt;h2 id=&quot;the-team&quot;&gt;The team&lt;/h2&gt;

&lt;p&gt;Everyone who worked hard to make the site what it is: it was great fun working with you!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.unboxedconsulting.com/people/tom-dickinson&quot;&gt;Tom Dickinson&lt;/a&gt; from &lt;a href=&quot;http://unboxedconsulting.com&quot;&gt;Unboxed&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://uk.linkedin.com/in/peterherlihy&quot;&gt;Peter Herlihy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://uk.linkedin.com/pub/charlie-macloughlin/3/183/821&quot;&gt;Charlie MacLoughlin&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.unboxedconsulting.com/people/jolyon-pawlyn&quot;&gt;Jolyon Pawlyn&lt;/a&gt; from &lt;a href=&quot;http://unboxedconsulting.com&quot;&gt;Unboxed&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.unboxedconsulting.com/people/alan-thomas&quot;&gt;Alan Thomas&lt;/a&gt; from &lt;a href=&quot;http://unboxedconsulting.com&quot;&gt;Unboxed&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.unboxedconsulting.com/people/will-tomlins&quot;&gt;Will Tomlins&lt;/a&gt; from &lt;a href=&quot;http://unboxedconsulting.com&quot;&gt;Unboxed&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Me&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We’re planning to get the code out on github soon. Hope you like the site and enjoy using it.&lt;/p&gt;
</content></entry><entry><title>Lean code: slides and feedback</title><category term='code'/><category term='lean'/><category term='presentation'/><category term='software craftsmanship'/><category term='sc2011'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2011/05/lean-code-slides-and-feedback'/><updated>2011-05-26T21:35:40+01:00</updated><id>http://chrismdp.com/2011/05/lean-code-slides-and-feedback</id><content type='html'>&lt;p&gt;I facilitated a workshop at &lt;a href=&quot;http://lanyrd.com/2011/software-craftsmanship/&quot;&gt;SC2011&lt;/a&gt; today about how code might be thought of as Lean. The idea was to start a coding project and cope with shifting requirements to identify what happens when we deliver as fast as we can, whether testing is worth it, and what waste actually means.&lt;/p&gt;

&lt;p&gt;If you were there, please do &lt;a href=&quot;http://speakerrate.com/talks/7643-lean-code&quot;&gt;rate the talk&lt;/a&gt; so I can improve!&lt;/p&gt;

&lt;p&gt;A number of people expressed an interest in trying the exercise, so here are the slides if you’re interested in trying it at home.&lt;/p&gt;

&lt;object id=&quot;__sse8116737&quot; width=&quot;425&quot; height=&quot;355&quot;&gt;&lt;param name=&quot;movie&quot; value=&quot;http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=lean-code-110526153405-phpapp02&amp;amp;stripped_title=lean-code&amp;amp;userName=chrismdp&quot; /&gt;&lt;param name=&quot;allowFullScreen&quot; value=&quot;true&quot; /&gt;&lt;param name=&quot;allowScriptAccess&quot; value=&quot;always&quot; /&gt;&lt;embed name=&quot;__sse8116737&quot; src=&quot;http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=lean-code-110526153405-phpapp02&amp;amp;stripped_title=lean-code&amp;amp;userName=chrismdp&quot; type=&quot;application/x-shockwave-flash&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;true&quot; width=&quot;425&quot; height=&quot;355&quot; /&gt;&lt;/object&gt;

&lt;p&gt;The session details are also &lt;a href=&quot;http://lanyrd.com/2011/software-craftsmanship/sfkgw/&quot;&gt;on Lanyrd&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let me know how you get on, and if you need any help!&lt;/p&gt;
</content></entry><entry><title>Pomodoros help you refactor</title><category term='code'/><category term='pomodoros'/><category term='tdd'/><category term='craftsmanship'/><category term='pairing'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2011/04/pomodoros-help-you-refactor'/><updated>2011-04-01T20:21:15+01:00</updated><id>http://chrismdp.com/2011/04/pomodoros-help-you-refactor</id><content type='html'>&lt;p&gt;&lt;i&gt;&quot;If you finish a task while the Pomodoro is still ticking, the following rule applies: If a Pomodoro Begins, It Has to Ring. It’s a good idea to take advantage of the opportunity for overlearning, using the remaining portion of the Pomodoro to review or repeat what you’ve done, make small improvements, and note down what you’ve learned until the Pomodoro rings.&quot;&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;– Francesco Cirillo, &lt;a href=&quot;http://www.pomodorotechnique.com/&quot;&gt;The Pomodoro Technique&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What’s the single most important part of Test Driven Development not to miss? Refactoring. What’s the part of TDD that’s most often missed? Refactoring.&lt;/p&gt;

&lt;p&gt;With refactoring, we work our way toward a great design, clean code, and flexible organic tests. Without refactoring, we have ugly brittle test suites and uglier code. We know this. What I don’t always do is take advantage of the moments I have when I can effectively refactor for free.&lt;/p&gt;

&lt;p&gt;At the end of a task, when the build is running, I’ve previously let my mind wander to the next thing, or check email, surf the net, and generally &lt;a href=&quot;http://www.computus.org/journal/?p=982&quot;&gt;get out of the zone&lt;/a&gt;. This bad habit has been highlighted to me in &lt;a href=&quot;/2011/03/pomodoros-done-hopefully-right&quot;&gt;my use of the pomodoro technique recently&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I was doing the same for the shorter pauses during normal TDD. My pomodoros statistics were telling me that I’m very bad at concentrating whilst coding: the average time spent before I let my mind wander was 11.67 minutes. I was allowing my mind to drift whilst Rails started up to run whatever test I was working on. Not good.&lt;/p&gt;

&lt;h2 id=&quot;time-to-improve&quot;&gt;Time to improve&lt;/h2&gt;

&lt;p&gt;This week, I’ve been trying to take the time to look at my code critically for areas of improvement. A pomodoro is indivisible, which means I’m not &lt;em&gt;allowed&lt;/em&gt; to think about anything else.&lt;/p&gt;

&lt;p&gt;And guess what? I always find something to improve, and I feel that little bit better about my code.&lt;/p&gt;

&lt;p&gt;The also helps with the thing I’ve missed most about not pairing: that other person’s critical eye on what you’re doing, always thinking about the code being written. During the natural pauses, you can be that other person and ensure the code you write is great. Being two people is &lt;a href=&quot;http://www.pixar.com/shorts/gg/index.html&quot;&gt;more fun, too&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>Call for coders: Children's Future International</title><category term='code'/><category term='charity'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2010/10/childrens-future-international'/><updated>2010-10-18T19:42:33+01:00</updated><id>http://chrismdp.com/2010/10/childrens-future-international</id><content type='html'>&lt;p&gt;For the past few months &lt;a href=&quot;http://edendevelopment.co.uk&quot;&gt;my company&lt;/a&gt; has been involved with a charity in Cambodia called &lt;a href=&quot;http://www.childrensfutureinternational.org/&quot;&gt;Children’s Future International&lt;/a&gt;. They are a fantastic organisation dedicated to helping children in very challenging conditions; they enable them to live and be educated in a safe community. &lt;/p&gt;

&lt;p&gt;We’ve been helping them to build a system to keep track of where their students live, which school they go to and which programmes they are involved with.&lt;/p&gt;

&lt;p&gt;This autumn we’ve decided to increase the number of developers working on the project. The charity have agreed to open source the code, so that anyone who wants to can pitch in and lend a hand. I’ve taken on co-ordinating this effort, and we need your help!&lt;/p&gt;

&lt;h2 id=&quot;how-do-i-help&quot;&gt;How do I help?&lt;/h2&gt;

&lt;p&gt;The code is here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://github.com/edendevelopment/cfi&quot;&gt;http://github.com/edendevelopment/cfi&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We’re currently running an issue tracker here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://github.com/edendevelopment/cfi/issues&quot;&gt;http://github.com/edendevelopment/cfi/issues&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;See the &lt;a href=&quot;http://github.com/edendevelopment/cfi/blob/master/README.textile&quot;&gt;README&lt;/a&gt;, but the gist is: grab the code, claim an issue (remove the ‘you can help’ tag and mark it with ‘in progress’), write a patch, submit a pull request.&lt;/p&gt;

&lt;p&gt;We’re picky about code quality. Your patches might get sent back for improvements in quality and/or test coverage. Pleased don’t be offended if this happens to you :)&lt;/p&gt;

&lt;h2 id=&quot;why-should-i-help&quot;&gt;Why should I help?&lt;/h2&gt;

&lt;p&gt;We don’t often stop to think about this, but we coders have a unique gift which can be used to bring huge benefit to the world. We have the power to help people do &lt;em&gt;real tangible good.&lt;/em&gt; The reward we get through helping out in this particular project is the satisfaction of helping to ensure that very vulnerable children get to live and go to school in a safe community. Oh, and your name on the commit list on the README :)&lt;/p&gt;

&lt;p&gt;There’s more: thinking ahead a little, it’s possible that we might be able to build a system which lots of charities can use for free to organise their processes, save themselves lots of money, leaving themselves more resources to do greater things. Wouldn’t that be cool? This is starting already: there is another charity interested in building off the current codebase.&lt;/p&gt;

&lt;p&gt;So what are you waiting for? Check out the &lt;a href=&quot;http://github.com/edendevelopment/cfi/issues/&quot;&gt;issues list&lt;/a&gt; and lend a hand!&lt;/p&gt;

</content></entry><entry><title>How to test your node.js app</title><category term='javascript'/><category term='code'/><category term='tdd'/><category term='node.js'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2010/05/tdd-with-node-js'/><updated>2010-05-23T11:05:00+01:00</updated><id>http://chrismdp.com/2010/05/tdd-with-node-js</id><content type='html'>&lt;p&gt;I’ve wanted to hack on a &lt;a href=&quot;http://nodejs.org&quot;&gt;node.js&lt;/a&gt; project for a while, and a new app idea has given me the perfect excuse. My first question was: how do I test this? It’s a fairly new field out there, and there isn’t much help from node.js itself: it’s much more like &lt;a href=&quot;http://rack.rubyforge.org/&quot;&gt;Rack&lt;/a&gt; than a proper framework. So I spent some time coming up with one way to do it.&lt;/p&gt;

&lt;p&gt;Disclaimer: I’m not that experienced with Javascript, particularly with the best way to define objects. I’d be grateful for patches to help improve the quality of the code here. I’ve also borrowed heavily from &lt;a href=&quot;http://github.com/redsquirrel/apprentice-us&quot;&gt;apprentice-us&lt;/a&gt; - thanks to &lt;a href=&quot;http://twitter.com/redsquirrel&quot;&gt;Dave&lt;/a&gt; and &lt;a href=&quot;http://twitter.com/coreyhaines&quot;&gt;Corey&lt;/a&gt;!&lt;/p&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;This is what I’ve got so far (the actual app I’m working will remain closed-source for the mo):&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://github.com/chrismdp/example-nodejs-project&quot;&gt;Example node.js github project&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You probably want to refer to the code whilst reading the rest of this article.&lt;/p&gt;

&lt;p&gt;To run the tests, run &lt;em&gt;rake&lt;/em&gt;. To start the app, run &lt;em&gt;node app.js&lt;/em&gt; (you will need to have node.js installed obviously).&lt;/p&gt;

&lt;p&gt;If you install the &lt;a href=&quot;http://github.com/mynyml/watchr&quot;&gt;watchr&lt;/a&gt; gem, and run &lt;em&gt;watchr autotest.watchr&lt;/em&gt;, you’ll get robust autotest like functionality. I’m liking watchr much better than ZenTest right now.&lt;/p&gt;

&lt;h2 id=&quot;how-it-works&quot;&gt;How it works&lt;/h2&gt;

&lt;p&gt;The basic premise is to decouple the request/response handler from the server (see &lt;em&gt;app.js&lt;/em&gt;, &lt;em&gt;lib/http.js&lt;/em&gt; and &lt;em&gt;lib/router.js&lt;/em&gt;). The interesting bit is in &lt;em&gt;test/ integration/ user_sees_homepage.js&lt;/em&gt; - this then calls the dispatch method directly, passing in dummy Request and Response objects.&lt;/p&gt;

&lt;p&gt;Note how I’ve &lt;a href=&quot;http://github.com/chrismdp/example-nodejs-project/blob/master/test/integration/user_sees_homepage.js&quot;&gt;defined the Response object&lt;/a&gt;. This allows me currently to write an integration test that looks like this:&lt;/p&gt;

&lt;p&gt;{% highlight javascript %}
router.dispatch(new Request(“GET”, “/”), new Response(function(headers, data) {
  assert.contains(“200”, headers[‘status’])
  assert.contains(“Hello, world!”, data)
}));
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;The assert.contains() method is not part of node.js: it’s implemented in &lt;em&gt;test/helper.js&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The reason you need the asserts to be fired in the end() function is that node.js is inherently asynchronous and will finish executing this file whilst waiting for the haml file to load in &lt;em&gt;lib/router.js&lt;/em&gt;. Try it yourself: if you put an assert at the bottom of the file it will fire immediately.&lt;/p&gt;

&lt;h2 id=&quot;unit-tests&quot;&gt;Unit tests&lt;/h2&gt;

&lt;p&gt;The plan is then to define whichever unit tests you need in &lt;em&gt;test/ unit/ (something)_test.js&lt;/em&gt;, with the corresponding code in &lt;em&gt;lib/ models/ (something).js&lt;/em&gt;. Just run javascript code in here and call methods on assert, and rake will execute it.&lt;/p&gt;

&lt;h2 id=&quot;improvements&quot;&gt;Improvements&lt;/h2&gt;

&lt;p&gt;You could potentially use the Sinatra-like framework &lt;a href=&quot;http://expressjs.com&quot;&gt;Express&lt;/a&gt; to define &lt;em&gt;lib/router.js&lt;/em&gt; - I’ve handrolled it for the moment. I’m of the opinion that you spot betterrefactorings by handrolling to start with: it could be that express.js isn’t right for my app, and I can’t easily tell yet.&lt;/p&gt;

&lt;p&gt;There are a number of javascript testing libraries out there, but at the moment I’m happy with my own handrolled version, which just relies on the ‘assert’ package that node.js provides. There’s nothing to stop you using JSpec or some other javascript testing library: I wanted to keep things simple to start with. &lt;/p&gt;

&lt;p&gt;I’m also aware that Cucumber &lt;a href=&quot;http://blog.josephwilk.net/ruby/testing-javascript-with-cucumber-in-javascript.html&quot;&gt;now supports javascript through V8&lt;/a&gt;, which is an important step in the right direction. Unfortunately however it doesn’t yet support the &lt;a href=&quot;http://commonjs.org&quot;&gt;commonjs&lt;/a&gt; package system, and doesn’t run through node.js but through raw V8. This makes it hard to use with anything but toy examples. Ideally I’ve love to plug Cucumber in in the future, if we can get it to use node.js as the platform somehow.&lt;/p&gt;

&lt;p&gt;If you use it for something useful, let me know! I’d be very happy to receive patches and suggestions.&lt;/p&gt;
</content></entry><entry><title>Every Ash Cloud Has A Silver Lining</title><category term='travel'/><category term='chicago'/><category term='pairing'/><category term='code'/><category term='ashcloud'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2010/05/every-ash-cloud-has-a-silver-lining'/><updated>2010-05-12T15:05:00+01:00</updated><id>http://chrismdp.com/2010/05/every-ash-cloud-has-a-silver-lining</id><content type='html'>&lt;p&gt;&lt;i&gt;Enrique and I recently became victims of the ash cloud, and spent rather longer in the US than we anticipated…&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;I spent a weekend in Chicago last month chatting to some other exceptional companies about the way we all do business. I learnt a huge amount about Eden and how we want to make it better in the future. We were due to leave on Sunday night, but unfortunately the ash cloud had other ideas, and we were stuck in Chicago for a further five days. It wasn’t much fun to be stranded, but when you’re stuck somewhere, you might as well make the most of it…&lt;/p&gt;

&lt;p&gt;Whilst on my extended trip, I got to hang out at &lt;a href=&quot;http://8thlight.com&quot;&gt;8th Light&lt;/a&gt; and &lt;a href=&quot;http://obtiva.com&quot;&gt;Obtiva&lt;/a&gt;, at the latter for several days. Thanks especially to Obtiva for hosting us for much of the week! Over the ten days I paired with &lt;a href=&quot;http://twitter.com/slagyr&quot;&gt;Micah Martin&lt;/a&gt;, &lt;a href=&quot;http://twitter.com/redsquirrel&quot;&gt;Dave Hoover&lt;/a&gt;, &lt;a href=&quot;http://twitter.com/chadwpry&quot;&gt;Chad Prye&lt;/a&gt;, &lt;a href=&quot;http://twitter.com/dougbradbury&quot;&gt;Doug Bradbury&lt;/a&gt; and &lt;a href=&quot;http://twitter.com/paytonrules&quot;&gt;Eric Smith&lt;/a&gt;. I hacked on RSpec2 briefly with &lt;a href=&quot;http://twitter.com/dchelimsky&quot;&gt;David Chelimsky&lt;/a&gt;. I went to visit the new offices at Hashrocket Chicago. I spent several days sharing a little suite of rooms at our hotel with &lt;a href=&quot;http://twitter.com/gustin&quot;&gt;Gustin&lt;/a&gt; and &lt;a href=&quot;http://twitter.com/ecomba&quot;&gt;Enrique&lt;/a&gt;, hacking on &lt;a href=&quot;http://github.com/edendevelopment/edash&quot;&gt;edash&lt;/a&gt;. I wandered about the city, mostly looking up a lot. &lt;/p&gt;

&lt;p&gt;In the evenings, I got to meet and have dinner with &lt;a href=&quot;http://twitter.com/coreyhaines&quot;&gt;Corey Haines&lt;/a&gt;’ lovely girlfriend Sarah, to hang out with Chad and Joe from Obtiva at a &lt;a href=&quot;http://www.avecrestaurant.com/&quot;&gt;fascinating restaurant&lt;/a&gt;, and ate at a &lt;a href=&quot;http://www.karynsongreen.com/&quot;&gt;vegan place&lt;/a&gt; - not normally on my radar, but it was an experience!&lt;/p&gt;

&lt;p&gt;These were some of the many highlights of a five day trip that turned into a ten day experience. Of course I’d have preferred that I wasn’t delayed, but when life gives you lemons… you pair :)&lt;/p&gt;
</content></entry><entry><title>Radiating status at Eden</title><category term='agile'/><category term='code'/><category term='information radiator'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2010/03/radiating-stats-at-eden'/><updated>2010-03-22T13:55:00+00:00</updated><id>http://chrismdp.com/2010/03/radiating-stats-at-eden</id><content type='html'>&lt;p&gt;&lt;a href=&quot;http://www.agileadvice.com/archives/2005/05/information_rad.html&quot;&gt;Information Radiators&lt;/a&gt; are always a good idea for software teams, and I’ve been pondering how best to show project state at &lt;a href=&quot;http://edendevelopment.co.uk&quot;&gt;Eden Development&lt;/a&gt; for a while.&lt;/p&gt;

&lt;p&gt;Here are the various iterations we’ve been through:&lt;/p&gt;

&lt;h2 id=&quot;iteration-1-build-status-messages&quot;&gt;Iteration 1: Build status messages&lt;/h2&gt;

&lt;p&gt;We’ve had a continuous integration server running on integrity for several months, and we wanted to make it obvious how we were doing, so we got an old mac mini out and plugged in a big monitor. That way everyone could see whether our builds were passing or failing. We set the mac to come on at 9am and turn off at 6pm in System Preferences, and used &lt;a href=&quot;http://www.barbariangroup.com/software/plainview&quot;&gt;Plainview&lt;/a&gt; to display full screen.&lt;/p&gt;

&lt;p&gt;This worked well, except that our builds don’t fail that often: our current projects have short enough builds that developers can still get away with running all the tests locally.&lt;/p&gt;

&lt;h2 id=&quot;iteration-2-enter-the-cycling-metricfu-graphs&quot;&gt;Iteration 2: Enter the cycling metric_fu graphs&lt;/h2&gt;

&lt;p&gt;We have metric_fu running on a &lt;a href=&quot;http://metrics.edendevelopment.co.uk&quot;&gt;private site&lt;/a&gt; anyway, but the stats weren’t very visible. Wouldn’t it be cool if we could see our code stats publicly across the whole company? So we split the screen into two halves using a frameset:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/metric-fu.jpg&quot; alt=&quot;Our status board&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Each of our projects now cycles through the most important pages from the metric_fu library, for each of our live projects. That way, if there’s a big change in the graphs one day, everyone can see that there’s a problem and can dive in and fix it.&lt;/p&gt;

&lt;h2 id=&quot;iteration-3-cramming-more-stuff-in&quot;&gt;Iteration 3: Cramming more stuff in&lt;/h2&gt;

&lt;p&gt;So far so good, but we had some blank space down the bottom left! So we shoehorned in part of &lt;a href=&quot;http://pairyapp.com&quot;&gt;Pairyapp’s&lt;/a&gt; interface, so that everyone could see who was working with who.&lt;/p&gt;

&lt;p&gt;This was nice, because people can suddenly see who’s working on a task on their own, and then jump in as needed. It stopped me trawling round the office just to find somebody: now I can easily see exactly who’s doing what (picture at the bottom).&lt;/p&gt;

&lt;h2 id=&quot;iteration-4-first-pass-on-our-own-build-server-dashboard&quot;&gt;Iteration 4: First pass on our own build server dashboard&lt;/h2&gt;

&lt;p&gt;This worked well, for about ten days… &lt;/p&gt;

&lt;p&gt;…until we saw &lt;a href=&quot;http://www.panic.com/blog/2010/03/the-panic-status-board/&quot;&gt;this&lt;/a&gt;. Our little solution was immediately not good enough and I set to work on make it shinier.&lt;/p&gt;

&lt;p&gt;At about the same time we changed to using &lt;a href=&quot;http://github.com/defunkt/cijoe&quot;&gt;CI Joe&lt;/a&gt; for building our projects. The way we got that working is &lt;a href=&quot;/2010/03/multiple-ci-joes-with-rack-and-passenger&quot;&gt;detailed here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;CI Joe doesn’t come with an integrated dashboard, so I set to work writing my own. Here’s where I’ve got to so far:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/dashboard-1.png&quot; alt=&quot;My dashboard app&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s not open source yet, but I plan to make it so soon. The pictures are of the person or pair who made the last commit.&lt;/p&gt;

&lt;h2 id=&quot;iteration-5-the-final-result&quot;&gt;Iteration 5: The final result&lt;/h2&gt;

&lt;p&gt;And here’s how our screen looks this morning:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/dashboard-2.jpg&quot; alt=&quot;The final result&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(sorry about the censorship)&lt;/p&gt;

&lt;p&gt;It’s not finished yet, I’ve plenty more plans. Expect another few posts on this in the future.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;UPDATE:&lt;/em&gt; Added link to CI Joe post and explained pictures on the dashboard app.&lt;/p&gt;
</content></entry><entry><title>Five things I learnt from Corey Haines</title><category term='craftsmanship'/><category term='pairing'/><category term='code'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2010/03/pairing-with-corey-haines'/><updated>2010-03-17T10:18:00+00:00</updated><id>http://chrismdp.com/2010/03/pairing-with-corey-haines</id><content type='html'>&lt;p&gt;Recently I attended &lt;a href=&quot;http://qconlondon.com&quot;&gt;QCon&lt;/a&gt; and got a chance on the last day to pair with &lt;a href=&quot;http://coreyhaines.com&quot;&gt;Corey Haines&lt;/a&gt;. We worked on a new rails project we’re building with a few friends (that’s the subject of another post). We’d spent a fair amount of time hanging out, but I hadn’t had a chance to sit down and actually code with him. We paired for a couple of hours in the QCon expo area just as everyone was packing up.&lt;/p&gt;

&lt;p&gt;Here are a few lessons and some things I picked up.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;REALLY learn vim.&lt;/em&gt; Watching Corey fire around &lt;a href=&quot;http://vim.org&quot;&gt;vim&lt;/a&gt; was something else: my brain could barely keep up with where the cursor was sometimes. Sometimes it felt like he’d just moved the cursor to where he wanted it to be through Sheer Power of Thought. I’m no slouch in vim, but was impressed by just how much faster I’ll be able to go someday, as I continue to practice.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;resource_controller. formtastic. That is all.&lt;/em&gt; These gems take out the legwork of building a thin restful resource-based rails app. You end up with a lot of tests and very little code to worry about. As webapps become more about &lt;a href=&quot;/2009/12/rip-web-1-0/&quot;&gt;javascript and the front-end&lt;/a&gt;, rails apps are becoming thinner and thinner, and these gems make them really fast to write.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Alias everything.&lt;/em&gt; Corey has a few really useful little bash tricks, like:&lt;/p&gt;

&lt;p&gt;{% highlight bash %}
alias c=’script/console’
alias r=’rake routes | grep’
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;..and some others I didn’t catch. They save so much time and are so obvious that later I found myself banging ‘c’ into a console and wondering why it doesn’t work. &lt;/p&gt;

&lt;p&gt;The summary of these lessons is another more general one:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Work to remove whatever constrains you from getting the computer to do what you want.&lt;/em&gt; We need to ensure that there is as little as possible in the way of getting stuff done. Everything else is &lt;a href=&quot;http://en.wikpedia.org/wiki/Yak_Shaving&quot;&gt;yak shaving&lt;/a&gt;: slow typing, tool-illiteracy, whatever. Anytime we’re not thinking about the problem, we’re wasting time.&lt;/p&gt;

&lt;p&gt;And finally, a meta-lesson:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Extend your pairing gene pool.&lt;/em&gt; It’s amazing how much you learn when you pair with someone outside your immediate sphere. Rather like when I first paired with &lt;a href=&quot;http://blog.nexwerk.com&quot;&gt;Enrique&lt;/a&gt;, I learnt about stuff I would never have heard of otherwise. &lt;/p&gt;

&lt;p&gt;I spent two hours working with Corey and it was a pleasure. Sadly we live a few thousand miles apart, but I’m looking forward to remote pairing sessions in the future.&lt;/p&gt;
</content></entry><entry><title>Archivey the Robot</title><category term='google wave'/><category term='code'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2010/03/archivey-the-robot'/><updated>2010-03-08T16:15:00+00:00</updated><id>http://chrismdp.com/2010/03/archivey-the-robot</id><content type='html'>&lt;p&gt;Following hot on the heels of &lt;a href=&quot;/2010/03/introducing-pushy/&quot;&gt;Pushy&lt;/a&gt;, I’ve implemented the companion application Archivey. This will delete all but the last five messages on a wave, excepting the top message. It’s meant to be used in conjunction with Pushy and any other chatty robots to keep the number of messages in a wave down to a manageable level.&lt;/p&gt;

&lt;p&gt;Potential other uses would be in a chatting context: you don’t always want to see the complete history of a chat session and this could be a way to hide the noise. Remember that you can always see the complete history by clicking Playback on the wave, so the messages aren’t lost: they’re just archived.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;To use, add archiveyrobot@appspot.com to a wave.&lt;/em&gt; Be warned, as soon as a new message is added it will merrily start deleting messages, so be careful!&lt;/p&gt;

&lt;p&gt;Source code on &lt;a href=&quot;http://github.com/chrismdp/archivey&quot;&gt;github&lt;/a&gt;. Hope you like it: let me know if you find it useful.&lt;/p&gt;
</content></entry><entry><title>Introducing Pushy - github notifications to google wave</title><category term='google wave'/><category term='code'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2010/03/introducing-pushy'/><updated>2010-03-07T20:18:00+00:00</updated><id>http://chrismdp.com/2010/03/introducing-pushy</id><content type='html'>&lt;p&gt;I’ve been having a bit of a love affair with &lt;a href=&quot;http://wave.google.com&quot;&gt;Google Wave&lt;/a&gt; recently. Like most people I watched the &lt;a href=&quot;http://wave.google.com/about.html#video&quot;&gt;long introductory video&lt;/a&gt;, then tried out the sandbox last July and didn’t really get it. I then read &lt;a href=&quot;http://blog.cubeofm.com/on-how-google-wave-surprisingly-changed-my-li&quot;&gt;this interesting post&lt;/a&gt; which spurred me on to try using it for actual work.&lt;/p&gt;

&lt;p&gt;Guess what? It works. Our conversations have become more structured and organised. We’re finding that it does help with keeping everything together in one place, and is more ‘alive’ somehow than a traditional wiki. &lt;/p&gt;

&lt;p&gt;So I thought: “Wouldn’t it be cool if you could have your github messages popping up in wave?”&lt;/p&gt;

&lt;p&gt;So here’s the results of my handiwork: Pushy.&lt;/p&gt;

&lt;p&gt;In simple terms, it’s a robot which accepts any form of HTTP post and adds the content as a new message on the wave. It has special handling for github post-receive hooks: it formats them nicely using a gadget.&lt;/p&gt;

&lt;h2 id=&quot;how-to-use-it&quot;&gt;How to use it&lt;/h2&gt;

&lt;p&gt;Log on to &lt;a href=&quot;http://wave.google.com&quot;&gt;wave.google.com&lt;/a&gt; and add pushyrobot@appspot.com to a new wave. The robot will add a message giving you the URL to post to:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/pushy-1.png&quot; alt=&quot;Pushy's receive message&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then, when you post to this url (here I’m using curl):&lt;/p&gt;

&lt;p&gt;{% highlight bash %}$ curl -d “testing pushy” http://pushyrobot.appspot.com/push/googlewave.com/fjWFoDWkf{% endhighlight %}&lt;/p&gt;

&lt;p&gt;It will add the message to the wave:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/pushy-3.png&quot; alt=&quot;The message appears&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you’re using the github notifications, simply add the URL verbatim to your project’s service hooks as a Post-Receive hook:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/pushy-4.png&quot; alt=&quot;Github service hook configuration page&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click “Test Hook” and the wave will update. Any new commits to this project should now appear.&lt;/p&gt;

&lt;p&gt;Here’s what the commit messages for github commits look like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/pushy-5.png&quot; alt=&quot;Github commit message view&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;source-code&quot;&gt;Source code&lt;/h2&gt;

&lt;p&gt;The source code is at &lt;a href=&quot;http://github.com/chrismdp/pushy&quot;&gt;github.com/chrismdp/pushy&lt;/a&gt;. It’s my first Python project and first App Engine deployment, so be gentle :) I’d welcome forks and patches: especially if you extend the special formatting for other services.&lt;/p&gt;

&lt;p&gt;Enjoy! Do let me know if you use it for anything useful. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;UPDATE:&lt;/em&gt; The wave forum post discussing the robot is &lt;a href=&quot;http://bit.ly/bKCOkV&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;UPDATE:&lt;/em&gt; Pushy now supports google code’s &lt;a href=&quot;http://code.google.com/p/support/wiki/PostCommitWebHooks&quot;&gt;PostCommitWebHooks&lt;/a&gt; and formats them in a similar way to github commits.&lt;/p&gt;
</content></entry></feed>
