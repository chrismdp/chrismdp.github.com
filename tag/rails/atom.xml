---
layout: nil
---
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title>Chris Parsons: posts tagged rails</title>

  <link href="http://chrismdp.com/"/>
  <updated>2011-10-17T19:10:29+01:00</updated>
  <id>http://chrismdp.com/tag/rails</id>
  <author>
    <name>Chris Parsons</name>
    <email>chrismdp@gmail.com</email>
  </author>
<entry><title>Your tests are lying to you</title><category term='code'/><category term='cucumber'/><category term='craftsmanship'/><category term='bdd'/><category term='rspec'/><category term='rails'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2011/10/your-tests-are-lying-to-you'/><updated>2011-10-17T19:10:29+01:00</updated><id>http://chrismdp.com/2011/10/your-tests-are-lying-to-you</id><content type='html'>&lt;p&gt;Using mocks within your test suite has gone rather out of fashion. Programmers everywhere have been lamenting the fact that mock-based tests are becoming more and more brittle: they’re having to change the test code in multiple places each time there’s the slightest code change. In fact, they seem to be changing the test code much much more often than the production code.&lt;/p&gt;

&lt;p&gt;Using mocks appear to require a lot of set up code for the object under test. Why not just fire up Factory Girl, create a bunch of objects we need to test this code, and just check the outputs?&lt;/p&gt;

&lt;p&gt;This works, and appears to work nicely. For a while.&lt;/p&gt;

&lt;p&gt;Eventually your tests will get to the point where they’re lying to you: they’re telling you your code works whereas actually it only works by coincidence. This post will examine the different techniques we can use to test code, and why some work better than others in the long term.&lt;/p&gt;

&lt;h2 id=&quot;the-problem&quot;&gt;The problem&lt;/h2&gt;

&lt;p&gt;To look at this further, let’s try to write a conference simulator for a new website that tries to predict how many people might attend an upcoming event: &lt;/p&gt;

&lt;p&gt;{% highlight ruby %}
describe Conference do
  it “calculates total rating” do
    conference = Conference.new(:total_rating =&amp;gt; 9)
    conference.total_rating.should == 9
  end
end
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;A simple start, with equally simple production code. Next, we decide to extract our code for calculating the rating into &lt;code&gt;Speaker&lt;/code&gt; classes. We decide not to change the test suite much, and make the code work behind the scenes:&lt;/p&gt;

&lt;p&gt;{% highlight ruby %}
describe Conference do
  it “calculates total rating” do
    conference = Conference.new(:speakers =&amp;gt; [:chris, :paul])
    conference.total_rating.should == 9
  end
end
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;A nice simple, easy change? You’ll pay for this later. Where is the Speaker coming from? Your Conference class is creating it somewhere, or retrieving it from a factory. You’ve increased the number of collaborators for this class by at least one (possibly three), yet your test isn’t showing the additional complexity. It’s deceitfully hiding it, whilst you continue on in blissful ignorance.&lt;/p&gt;

&lt;p&gt;Your tests are now sitting around the outside of your system. There are no tests for the Speaker class at all, except that we co-incidentally check the rating it emits. Another developer is likely to miss the connection and remove the implied test whilst changing the code for a different reason later.&lt;/p&gt;

&lt;p&gt;This gets worse over time:&lt;/p&gt;

&lt;p&gt;{% highlight ruby %}
describe Conference do
  it “calculates total rating” do
    conference = Conference.new(
      :schedule =&amp;gt; :nine_to_five,
      :talks =&amp;gt; [talk_for(:chris), talk_for(:paul)]
    )
    conference.total_rating.should == 9
  end
end
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Can you see what’s going on here? We’ve created some nice helper methods to make it easy to create the required talk objects we need. This test is fairly easy to read, but it’s dressing up the problem. The test code is relying on far too many collaborators to function correctly to return the correct result.&lt;/p&gt;

&lt;p&gt;When you extract a class, your purely state based tests don’t always require change. If you’re not stubbing out or mocking systems, you can end up in a situation where you’re relying on the code to work without realising it.&lt;/p&gt;

&lt;p&gt;How could it be improved?&lt;/p&gt;

&lt;p&gt;{% highlight ruby %}
describe Conference do
  let(:talk1) { double(:talk, :rating =&amp;gt; 10) }
  let(:talk2) { double(:talk, :rating =&amp;gt; 6) }
  let(:schedule) { double(:schedule, :rating =&amp;gt; 10) }
  before(:each) { Schedule.stub(:new =&amp;gt; schedule) }
  it “calculates total rating” do
    conference = Conference.new(
      :schedule =&amp;gt; :nine_to_five,
      :talks =&amp;gt; [talk1, talk2]
    )
    conference.total_rating.should == 9
  end
end&lt;/p&gt;

&lt;p&gt;describe Speaker do
end
describe Schedule do
end
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Now we’ve isolated the method nicely from its collaborators, and ensured that its behaviour is correct: that it aggregates the ratings of the talks and the schedule. We also make sure that we’re testing Conference correctly, also in isolation.&lt;/p&gt;

&lt;p&gt;The more you use refactoring methods such as Extract Class without cleaning up your tests, the more likely your tests will be lying to you. Little by little, those tests that you trusted are slowly testing more and more code. You add a multitude of edge cases at the edges, never thinking about the complexity within. You’ve resorted to using end-to-end tests to test basic correctness.&lt;/p&gt;

&lt;p&gt;This is a bad thing on many levels: for example, what happens to interface discovery? How will you know how the interface of your lower-level classes needs to behave if you’re not mocking or stubbing it? You are resorting to guessing, rather than exercising the interface ahead of time in your tests. If you have tests around the edges, but not in the middle, you’re not gaining the design input that tests give you in each layer of your system.&lt;/p&gt;

&lt;h2 id=&quot;your-code-stinks&quot;&gt;Your code stinks&lt;/h2&gt;

&lt;p&gt;If you go the whole hog with testing in isolation, then you might end up here with something like this:&lt;/p&gt;

&lt;p&gt;{% highlight ruby %}
describe Conference do
  let(:talk1) { double(:talk, :rating =&amp;gt; 10) }
  let(:talk2) { double(:talk, :rating =&amp;gt; 6) }
  let(:talk3) { double(:talk, :rating =&amp;gt; 2) }
  let(:talk4) { double(:talk, :rating =&amp;gt; 8) }
  let(:track1) { double(:track, :talks =&amp;gt; [talk1, talk3] }
  let(:track2) { double(:track, :talks =&amp;gt; [talk2, talk4] }&lt;/p&gt;

&lt;p&gt;let(:venue1) { double(:venue, :nice_coffee_places =&amp;gt; 3) }&lt;/p&gt;

&lt;p&gt;let(:joe) { double(:announcer, :experience =&amp;gt; 5) }&lt;/p&gt;

&lt;p&gt;let(:schedule) { double(:schedule, :rating =&amp;gt; 10, :accouncer =&amp;gt; joe) }
  before(:each) { Schedule.stub(:new =&amp;gt; schedule) }&lt;/p&gt;

&lt;p&gt;it “calculates total rating” do
    conference = Conference.new(
      :schedule =&amp;gt; :nine_to_five,
      :tracks =&amp;gt; [track1, track2],
      :organiser =&amp;gt; joe,
      :venues =&amp;gt; [venue1, venue1]
    )
    conference.total_rating.should == 6.3945820
  end
end&lt;/p&gt;

&lt;p&gt;{% endhighlight %}&lt;/p&gt;

&lt;p&gt;I’m not surprised people moan about maintaining this: if any aspect of the Conference class changes, this test will break and need to be fixed. We can see that this test code is hard to write and difficult to read. It would be so much easier just to hide this setup in a few factory methods with some sensible defaults, right?&lt;/p&gt;

&lt;p&gt;Maybe it’s not the test code that’s the problem. Perhaps the code stinks. Perhaps the class simply has way too many collaborators, which is why your test code contains a large amount of set up.&lt;/p&gt;

&lt;p&gt;For this test code, we can see there are several objects leaking all over the conference code: to refactor this I’d probably get through a Scheduler, Caterer and perhaps a TrackAggregator before I was done. I’d ensure all these objects were tested in isolation, and ensure that there are acceptance tests all the way through to make sure the customer has what they need.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Well designed code is easy to test.&lt;/em&gt; As a rule of thumb, anytime I get over about two or three lines of setup code for testing a method, I normally take a step back and ask myself if this method is doing too much.&lt;/p&gt;

&lt;h2 id=&quot;test-speed&quot;&gt;Test speed&lt;/h2&gt;

&lt;p&gt;The other advantage of running tests purely in isolation is that they’re fast. Very fast. When I’m coding Rails apps these days, thanks to advice from &lt;a href=&quot;http://twitter.com/coreyhaines&quot;&gt;Corey Haines&lt;/a&gt; I’m running a &lt;code&gt;spec_no_rails&lt;/code&gt; folder which runs independently from the rest of my Rails app. Rails apps by default epitomise this problem: default model tests exercise the whole system from the database up. By running your tests independently you’re not having to clean the database or start Rails each time you run your tests, which means that much of your interesting code can be tested in under a second. &lt;a href=&quot;http://twitter.com/garybernhardt&quot;&gt;Gary Bernhardt&lt;/a&gt; has more information on how to set this up in his excellent &lt;a href=&quot;http://destroyallsoftware.com&quot;&gt;Destroy All Software&lt;/a&gt; screencast series.&lt;/p&gt;

&lt;h2 id=&quot;what-im-not-saying&quot;&gt;What I’m not saying&lt;/h2&gt;

&lt;p&gt;This isn’t an argument for or against Mocks or Stubs. Either technique can be used successfully to generate clean code. It’s an argument about only exercising the code under test, and leave the rest of the system to take care of itself. The important thing is that you &lt;em&gt;don’t exercise your collaborators:&lt;/em&gt; whether you check they’ve received messages or simply stub them to return input doesn’t matter.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Don’t forget end-to-end tests.&lt;/em&gt; These are very important for business acceptance and for ensuring basic functionality. The important thing is to ensure that you’re being intentional about your end-to-end tests and ensure your unit tests are not end-to-end tests by accident.&lt;/p&gt;

&lt;p&gt;Take a good look at the test code for a project you recently worked on. You don’t need to look at the production code yet: notice that I’ve not included any production code in these examples. You shouldn’t need to see it to know whether it’s of good quality or not: you can tell that by reading the tests.&lt;/p&gt;

&lt;p&gt;Which is the most annoying or bulky part of your test code? Are your tests deceiving you about what they’re testing? How could you improve the code to make this test code easier to maintain?&lt;/p&gt;
</content></entry><entry><title>Kanogo: vapourware to beta in 24 hours</title><category term='code'/><category term='products'/><category term='business'/><category term='kano analysis'/><category term='rails'/><category term='heroku'/><category term='ruby'/><category term='kanogo'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2011/09/kanogo-vapourware-to-beta-in-24-hours'/><updated>2011-09-12T11:30:37+01:00</updated><id>http://chrismdp.com/2011/09/kanogo-vapourware-to-beta-in-24-hours</id><content type='html'>&lt;div class=&quot;notice&quot;&gt;
  &lt;h2&gt;TL;DR&lt;/h2&gt;

  &lt;p&gt;Last week I built the first beta of a new web product called &lt;a href=&quot;http://kanogo.com&quot;&gt;Kanogo&lt;/a&gt;. It’s designed to gather feedback and perform &lt;a href=&quot;http://en.wikipedia.org/wiki/Kano_model&quot;&gt;Kano analysis&lt;/a&gt; to determine which direction you should take with your website.&lt;/p&gt;

  &lt;p&gt;Here's an example, designed specifically for this blog. Thanks for your feedback!&lt;/p&gt;

  &lt;iframe allowtransparency=&quot;true&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot; src=&quot;http://kanogo.com/surveys/13/embed?&quot; style=&quot;width: 100%; height: 120px&quot;&gt;
  &lt;/iframe&gt;

  &lt;p&gt;Sign up for the beta &lt;a href=&quot;http://kanogo.com&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;/div&gt;

&lt;h2 id=&quot;the-backstory&quot;&gt;The backstory&lt;/h2&gt;

&lt;p&gt;A while back I agonising over which should be the next greatest feature for one of my products. I thought the best thing to do would be to conduct some Kano analysis on the product in question, and realised there wasn’t an easy way of doing this. I’ve used &lt;a href=&quot;http://kanosurvey.com&quot;&gt;kanosurvey.com&lt;/a&gt; in the past, but it didn’t really feel like the right tool. How was I to get users to answer my survey?&lt;/p&gt;

&lt;p&gt;“Wouldn’t it be great,” I thought, “if I could embed a little survey box on the site that asked customers what they thought and provided me with Kano analysis stats?” The concept behind &lt;a href=&quot;http://kanogo.com&quot;&gt;Kanogo&lt;/a&gt; was born.&lt;/p&gt;

&lt;p&gt;Fast forward several months to last week. I found myself with a few days spare and decided that the best use of them would be to build a beta of this product. Always up for a challenge, I decided to give myself 24 hours to build and launch.&lt;/p&gt;

&lt;p&gt;That’s not very long, so I had to hustle.&lt;/p&gt;

&lt;h2 id=&quot;timeline&quot;&gt;Timeline&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;7 Sep: 12:10am:&lt;/em&gt; &lt;a href=&quot;https://twitter.com/#!/chrismdp/status/111214768651636736&quot;&gt;I announced my intentions&lt;/a&gt;, mostly to motivate myself through fear of failing in public. I finally decided on a name, and registered the domain and the twitter account. I announced the product &lt;a href=&quot;https://twitter.com/#!/chrismdp/status/111240345341263872&quot;&gt;to the world&lt;/a&gt; (well, a &lt;a href=&quot;https://twitter.com/#!/chrismdp/followers&quot;&gt;subset&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;7 Sep: 01:55am:&lt;/em&gt; Got a new Rails 3.1 app running on Heroku cedar. It’s a one page app using a Campaign Monitor signup form. Got my first beta signup. Finished for the night.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;7 Sep: 07:40am:&lt;/em&gt; Announced Kanogo again, just in case anyone had been sleeping at 2am :) Got another 3 beta signups and a bunch of feedback on spelling errors.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;7 Sep: 10:13am:&lt;/em&gt; Simple twitter sign in done using &lt;a href=&quot;https://github.com/intridea/omniauth&quot;&gt;Omniauth&lt;/a&gt; and this really useful &lt;a href=&quot;https://github.com/RailsApps/rails3-mongoid-omniauth/wiki/Tutorial&quot;&gt;tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;7 Sep: 02:45pm:&lt;/em&gt; The USA woke up and I got more beta signups: now up to 5. Got the basic data entry for surveys and features done. Started work on the embed. Was feeling fairly pessimistic about a beta launch for that night, but didn’t want to let myself down.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;7 Sep: 05:53pm:&lt;/em&gt; Embed done, quicker than expected. Took a break. Now feeling &lt;a href=&quot;https://twitter.com/#!/chrismdp/status/111482135218626560&quot;&gt;cautiously optimistic&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;7 Sep: 09:12pm:&lt;/em&gt; Basic response mechanism in: now needed to apply the Kano analysis magic! Adrenalin took over from caffiene as primary stimulant.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;7 Sep: 11:20pm:&lt;/em&gt; Turned on twitter sign in as basic method of getting registered on the site. Removed redundant Campaign Monitor signup: emailed subscribers manually to ask them to sign in via twitter. Beta &lt;a href=&quot;https://twitter.com/#!/kanogoapp/status/111564545708929024&quot;&gt;went live!&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-result&quot;&gt;The result&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/files/kanogo-1.png&quot; alt=&quot;Embed&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/kanogo-2.png&quot; alt=&quot;Results&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After 24 hours, I had a beta running, which worked. Granted, it wasn’t great, but it was something that had some value.&lt;/p&gt;

&lt;p&gt;I spent the rest of the evening and following morning promoting the beta on mailing lists and on twitter. By the end of the following day I had 30 or so beta signups.&lt;/p&gt;

&lt;p&gt;It’s already adding value to beta users. Two sites using the beta already on their own products. One beta user has now decied to implement a feature as he’s realised his customers consider it a “must have”. There’s no substitute for real feedback.&lt;/p&gt;

&lt;h2 id=&quot;learnings&quot;&gt;Learnings&lt;/h2&gt;

&lt;p&gt;Some of the things I’ve learned so far:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Cloud tools are the business.&lt;/em&gt; It was so easy to register the domain with &lt;a href=&quot;http://dnsimple.com&quot;&gt;dnsimple.com&lt;/a&gt;, start up a &lt;a href=&quot;http://twitter.com/kanagoapp&quot;&gt;twitter account&lt;/a&gt; for marketing and customer interaction, deploy to &lt;a href=&quot;http://heroku.com&quot;&gt;Heroku&lt;/a&gt;, get initial beta signups with &lt;a href=&quot;http://campaignmonitor.com&quot;&gt;Campaign Monitor&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Modern development tools rock.&lt;/em&gt; I used Rails 3.1 for this app, which worked beautifully, and I love the use of sprockets to help manage the asset pipeline. Running the app on Heroku cedar went without a hitch. I used twitter for authentication, and it only took an hour to set up.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;There is no “quick and dirty”.&lt;/em&gt; The app is (almost) fully tested: I confess I left a couple of methods only covered by end-to-end tests (which doesn’t really count). I definitely proved that the only way to go fast is to go clean: &lt;a href=&quot;http://agileage.blogspot.com/2011/07/slow-and-dirty-rant-by-jason-gorman-at.html&quot;&gt;Jason was right&lt;/a&gt; that there is no “quick and dirty” only “slow and dirty”. This came back to bite me instantly: the code I didn’t use specs for took me the longest to get working.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Technology is the easy part.&lt;/em&gt; It didn’t take me long to build the site, but the trick is to build a business. After initial interest, the analytics on the site are way down as the next new thing appears on the internet and people move on. To gain traction I need to build the app my beta users actually want. Thankfully, quick feedback is what Kanogo does, so we’re eating our own dogfood and asking our users what they think at every turn. This is already directing which features I work on next, which has to be the most efficient way of moving forward, right?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;whats-next&quot;&gt;What’s next?&lt;/h2&gt;

&lt;p&gt;I plan to continue working on this, listening to beta user feedback, refining the features, and accepting new beta signup for the moment. I hope to turn this into a paid product at some point, as I think there’s a huge amount of value here to websites if I can get the messaging right.&lt;/p&gt;

&lt;h2 id=&quot;can-i-get-involved&quot;&gt;Can I get involved?&lt;/h2&gt;

&lt;p&gt;Sure! It’s not too late to join the beta: you can &lt;a href=&quot;http://kanogo.com&quot;&gt;do so here&lt;/a&gt;. I’d love your feedback on the product. It can give you value anywhere you have users of a website, even on a blog as shown above.&lt;/p&gt;
</content></entry><entry><title>How to get Spork working NOW on Rails 3, Rspec 2 and Cucumber</title><category term='rails'/><category term='ruby'/><category term='rspec'/><category term='spork'/><category term='cucumber'/>    <author>
      <name>Chris Parsons</name>
      <email>chrismdp@gmail.com</email>
    </author>
<link href='http://chrismdp.com/2010/11/getting-spork-working-now-on-rails-3-rspec-2-and-cucumber'/><updated>2010-11-16T21:41:57+00:00</updated><id>http://chrismdp.com/2010/11/getting-spork-working-now-on-rails-3-rspec-2-and-cucumber</id><content type='html'>&lt;p&gt;I’ve spent the evening trying to get &lt;a href=&quot;https://github.com/timcharper/spork&quot;&gt;Spork&lt;/a&gt; to work with Rails 3 and RSpec 2. I’ve never felt the need for it before, but the Rails 3 start up time is fairly hefty and I’m crying out for the extra seconds more than ever.&lt;/p&gt;

&lt;p&gt;It’s not that tricky, thankfully, and the following steps should see you running faster specs and features in no time.&lt;/p&gt;

&lt;h2 id=&quot;rspec-2&quot;&gt;RSpec 2&lt;/h2&gt;

&lt;p&gt;Follow these instructions to get RSpec 2 working:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Install Spork into your Gemfile, and update rspec to 2.1:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;{% highlight ruby %}
gem “spork”, :git =&amp;gt; “git://github.com/chrismdp/spork.git”
gem “rspec-rails”, ‘&amp;gt;= 2.1.0’
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;You’ll need &lt;a href=&quot;http://github.com/chrismdp/spork&quot;&gt;my fork of Spork&lt;/a&gt; for a quick patch to the latest release candidate of Spork.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Add &lt;code&gt;--drb&lt;/code&gt; on a new line in your .rspec file:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you don’t have the .rspec file, create it.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Modify your spec_helper.rb:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You could follow the installation instructions, but not everything is relevant to Rails 3 and Rspec 2. It’s pretty simple anyway: add “require ‘spork’” to the top of your spec_helper.rb file, and put everything else inside spec_helper.rb inside a Spork.pre_fork do … end block:&lt;/p&gt;

&lt;p&gt;{% highlight ruby %}
require ‘spork’&lt;/p&gt;

&lt;p&gt;Spork.prefork do
  ENV[“RAILS_ENV”] ||= ‘test’
  require File.expand_path(“../../config/environment”, &lt;strong&gt;FILE&lt;/strong&gt;)
  require ‘rspec/rails’
  …
end
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;That should be it. To start up the server, run:&lt;/p&gt;

&lt;p&gt;{% highlight bash %}
$ bundle exec spork
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;…and then try running a spec or two. The following command takes about a second on my machine now, whereas it used to take about ten seconds!&lt;/p&gt;

&lt;p&gt;{% highlight bash %}
$ bundle exec rspec spec/controllers/sessions_controller_spec.rb
{% endhighlight %}&lt;/p&gt;

&lt;h2 id=&quot;cucumber&quot;&gt;Cucumber&lt;/h2&gt;

&lt;p&gt;It’s important to note that for more than about 10-20 scenarios, Spork is &lt;em&gt;slower&lt;/em&gt; than running cucumber normally. Therefore only turn it on for a few profiles, such as autotest (but not autotest-all), wip, etc.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Modify your cucumber.yml file:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;{% highlight yaml %}
wip: –drb -tags @wip:3 –wip features
autotest: –drb –color –format progress –strict
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Leave ‘autotest-all’ and ‘default’ alone.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Modify your features/support/env.rb:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is just the same process as with the spec_helper.rb file for RSpec:&lt;/p&gt;

&lt;p&gt;{% highlight ruby %}
require ‘spork’&lt;/p&gt;

&lt;p&gt;Spork.prefork do
  ENV[“RAILS_ENV”] ||= “test”
  require File.expand_path(File.dirname(&lt;strong&gt;FILE&lt;/strong&gt;) + ‘/../../config/environment’)
  require ‘cucumber/formatter/unicode’ # Remove this line if you don’t want Cucumber Unicode support
  require ‘cucumber/rails/rspec’
  …
end
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Again, that should be it. Run the follow to try it out:&lt;/p&gt;

&lt;p&gt;{% highlight bash %}
$ bundle exec spork cucumber
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Now try running a single feature in rerun or autotest mode. I’m getting 20% speedups for about 10 scenarios.&lt;/p&gt;

&lt;h2 id=&quot;using-them-together&quot;&gt;Using them together&lt;/h2&gt;

&lt;p&gt;The RSpec and Cucumber versions of spork use different ports, so there’s no problem running them together. Normally I run both in the same terminal window, one as a background process:&lt;/p&gt;

&lt;p&gt;{% highlight bash %}
$ bundle exec spork cucumber &amp;amp; bundle exec spork
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Then I run autotest in another window.&lt;/p&gt;

&lt;h2 id=&quot;how-do-i-use-this&quot;&gt;How do I use this?&lt;/h2&gt;

&lt;p&gt;I’m really liking this setup. It makes rapid TDD possible again, even when dealing with fairly slow tests. &lt;/p&gt;

&lt;p&gt;Of course, we should be doing all we can to get the speed of our tests as high as possible: slow tests are a type of code smell. However, infrastructure load time is unavoidable and cutting it out is full of all kinds of win.&lt;/p&gt;

&lt;p&gt;Use this setup with &lt;a href=&quot;https://github.com/grosser/autotest&quot;&gt;autotest&lt;/a&gt; and &lt;a href=&quot;https://github.com/svoop/autotest-growl&quot;&gt;autotest-growl&lt;/a&gt; for maximum win. Autotest has come a long way recently: there’s a lightweight alternative to ZenTest now, and easy growl support. Cutting out even the ‘Oh, I should run my tests now step’ totally nails your debug cycle: not sure it gets much tighter than that.&lt;/p&gt;

&lt;h2 id=&quot;update-even-more-speed&quot;&gt;UPDATE: Even more speed!&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://opinionatedprogrammer.com/&quot;&gt;Jo Liss&lt;/a&gt; got in touch: she’s made some performance gains by skipping the “bundle exec” and requiring a few extra files in the prefork block. Read about what she has to say &lt;a href=&quot;http://opinionatedprogrammer.com/2011/02/profiling-spork-for-faster-start-up-time/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</content></entry></feed>
