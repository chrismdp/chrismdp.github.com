---
layout: nil
---
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title>Chris Parsons: posts tagged lean startup</title>

  <link href="http://chrismdp.com/"/>
  <updated>2012-09-13T13:52:16+01:00</updated>
  <id>http://chrismdp.com/tag/lean startup</id>
  <author>
    <name>Chris Parsons</name>
    <email>chrismdp@gmail.com</email>
  </author>
<entry><title>The power of feedback</title><category term='lean startup'/><category term='tdd'/><category term='bdd'/><category term='feedback'/><category term='lean'/><link href='http://chrismdp.com/2012/09/the-power-of-feedback'/><updated>2012-09-13T13:52:16+01:00</updated><id>http://chrismdp.com/2012/09/the-power-of-feedback</id><content type='html'>&lt;p&gt;&lt;i&gt;&quot;Everyone has a story that makes me stronger.&quot; -- Richard Simmons&lt;/i&gt;&lt;/p&gt;

There's something about feedback. Whether it's the validation of your latest idea, a hit on your webpage showing up on Google Analytics, or something as simple as a passing test, it's a valuable and important motivational commodity, which can also shape the direction in which we're going very precisely.

The effect of feedback is the engine at the root of software techniques as diverse as pairing, [TDD](http://en.wikipedia.org/wiki/Test-driven_development), [BDD](http://en.wikipedia.org/wiki/Behavior-driven_development) and the [Lean Startup movement](http://theleanstartup.com). Why is feedback so powerful?

## Feedback shortens the loop

Any sort of feedback represents the end of a creative loop that started when we began to work on whatever we're receiving feedback about. The shorter that loop, the more quickly we can respond to change, and the more agile we can be. It also helps us know when we're done working on something and it's time to move on.

That's partly why TDD is so powerful: we receive instant feedback on what we're working on and we are never more than a few minutes away from a fully working system. It's also why good quality customer feedback is powerful: we're never more than a few iterations away from the feature the customer wants.

## Feedback validates us and our work

The validation of our work is one of the things that lies at the root of [pairing](/2010/01/pairing-works-for-everthing): the constant code review and the camaderie keeps us motivated and working on something longer than we can manage on our own. I've found programming on [Sol Trader](http://soltrader.net) alone to be an enlightening experience - I've learnt how important it is to have others working alongside me. I now have a graphics expert reviewing my code, and more design and artistic help to keep me motivated to turn out releases.

It's also incredibly motivating to receive a &quot;thank you!&quot; or &quot;looks great!&quot; There's a lot of power in simple encouragement. If we know our work is appreciated and valued, we'll likely to work longer and with more energy on that next killer feature.

However, there's a danger in only seeking pure validation, or (worse) coming to rely on it for motivatioW. If we receive too much positive validation, we'll end up getting proud of ourselves and demotivated to push for excellence, and we'll get terminally discouraged if we get too little. We should be seeking the kind of feedback that motivates us to shape our work for the better. We have to learn to ask the right questions.

## Feedback shapes our work

If we let it, feedback will change the work we do and how we do it. This applies no matter how we receive feedback about our work - the different types of feedback will change our work in different ways, and we must therefore strive to increase both the quality and the variety of the feedback we receive, without falling into the trap of simple validation.

Done right, TDD offers more that just validation of our code; it gives us information about the quality of our code design. It causes us to shape our code differently and more carefully than code written without feedback. We can't operate in isolation though: TDD without feedback from stakeholders (whether that's through a technique such as Behaviour Driven Development or some other method) is incomplete: we get feedback that our code works, but nothing on whether it's the right code.

There's more: conversations such as [Lean Startup](http://theleanstartup.com/) are taking the BDD ideas one stage further. Instead of relying on the guesses of the stakeholders to determine what the right features are, how about harnessing feedback from the actual customers using the product? This can be done in various ways, through automatic metrics gathering and [tracking experiments rather than features](https://speakerdeck.com/u/chrismdp/p/lean-startup-validated-learning-and-kanban-for-hypothesis).

It's my opinion that the Lean Startup conversation is certainly as important as the BDD conversation, and potentially as important as the Agile conversation, as it improves the variety of the feedback we receive on our work.

How are you finding feedback shapes your work? Are you getting the right kinds of feedback from a variety of sources? Or are you settling for pure validation?
</content></entry><entry><title>Attempting validated learning with Sol Trader</title><category term='sol trader'/><category term='lean startup'/><category term='learning'/><category term='products'/><category term='agile'/><category term='lean'/><category term='business'/><link href='http://chrismdp.com/2012/05/attempting-validated-learning-with-sol-trader'/><updated>2012-05-14T10:18:47+01:00</updated><id>http://chrismdp.com/2012/05/attempting-validated-learning-with-sol-trader</id><content type='html'>&lt;div class='notice'&gt;
  If you'd like to purchase Sol Trader you can do so at &lt;a href='http://soltrader.net'&gt;soltrader.net&lt;/a&gt;.
&lt;/div&gt;

Sol Trader has been out just about two weeks now. It's been great fun to actually launch the product and gain real feedback from people.

*I've sold about forty copies.* It's a start, and a really good one. Thank you to those of you who have already purchased the game, and for all the feedback and encouraging emails I've received. I've learnt a huge amount already and it's really helped me guide the way ahead.

The big question is: what's next? How do I go from these humble yet encouraging beginnings to turning this game into something truly wonderful?

## Validated learning

I've read Eric Ries' excellent book [The Lean Startup](http://lean.st/) recently. In it he introduces a concept called [Validated learning](http://lean.st/principles/validated-learning) and goes on to define learning as the one important progress metric of startups: much more important than 'customer numbers' or 'features'. Rather than define startups purely by 'profit' or 'growth figures', how can we ensure that we're learning about how our business as fast as possible?

For Sol Trader, there are two main things that I need to find out.

* How can I ensure that I'm creating a game that people want to play, want to come back to, and want to tell their friends about?
* How can I ensure a steady stream of new players for the game?

## The Sol Trader Hypothesis board

In order to support this learning, I've created the Sol Trader hypothesis progress chart:

![Sol Trader hypotheses chart](/files/sol-trader-hypotheses-chart.png)

This is what I'm using to track my theories. A good week would be one where I've managed to prove or disprove a theory or two, rather than simply adding in more and more 'stuff'.

Note the [Kanban limits to work in progress](http://leanca.mp/2011/12/better-learning-through-velocity-how-to-use-kanban-to-learn-better/). In order to get theories tested as fast as possible, it's important to get them through the process as fast as possible.

*You can view and interact with the board for yourself:* it's [on Trello here](https://trello.com/board/sol-hypotheses/4fb0cbe79c2ff2de54036903). I'm determined to do as much of this learning in the open as possible. I'd love your input into the hypotheses that I'm testing: you can vote and comment on particular theories and tell me why you think they're a true (or completely wrong). Any input you give here will have an effect on what I work on next, so if you want to influence the development, then get involved!

## Freed from featuritis

I've really enjoyed freeing myself from the continual focus on &quot;features features features&quot;. Features by themselves mean nothing: they are actually a drag on your product, as you have to spend time and effort maintaining them. It's only the value that your customers gain from them that's important. Focusing on theories has meant that I'm always making progress, even if I'm simply learning what doesn't work.

## Hang on: where is creativity in all this?

There's a delicate balance here between listening to your customers and leading them in the direction you think they should go. I'm not going to sacrifice design flair and narrative to satisfy the baying (buying?) masses. This will likely always be a little bit of a niche game: there is a limit to the number of people interested in the genre. I plan to ultimately build the game I want to play, as opposed to the selling of something rubbish to satisfy everyone. Where's the fun in that?

The important thing is to learn about your customer base, *within the context of your original vision.* If you cannot build a product within those constraints, time to look for a new business. Luckily, one of the earliest things I learnt through mailing list signups and a couple of [hacker news](/2012/01/why-i-switched-from-ruby-back-to-c-plus-plus/) [appearances](/2012/01/switching-sol-trader-from-ruby-to-c-plus-plus-one-week-on/) is that there's a fair amount of latent demand for the vision I've got for the game, which is what spurred me on to [get the alpha out](/2012/05/sol-trader-now-in-alpha) in the first place.

What do you think of learning in public like this, and what do you think of my development approach?

&lt;div class='notice'&gt;
  If you'd like to purchase Sol Trader you can do so at &lt;a href='http://soltrader.net'&gt;soltrader.net&lt;/a&gt;.
&lt;/div&gt;

</content></entry><entry><title>Sol Trader now in Alpha</title><category term='sol trader'/><category term='products'/><category term='agile'/><category term='lean'/><category term='lean startup'/><link href='http://chrismdp.com/2012/05/sol-trader-now-in-alpha'/><updated>2012-05-02T15:37:44+01:00</updated><id>http://chrismdp.com/2012/05/sol-trader-now-in-alpha</id><content type='html'>## It's released!

After a hectic four months of early development &lt;a href='http://soltrader.net'&gt;Sol Trader has gone into Alpha&lt;/a&gt;.

&lt;a href='http://soltrader.net'&gt;&lt;img src='http://soltrader.net/files/sol-trader-hero.png' style='width: 48em'/&gt;&lt;/a&gt;

With this release, you can explore the known Solar System and make money through trading on the stock markets. There isn't much else there yet, but I'm planning a slew of improvements over the coming months.

I've decided to charge right off the bat: you can buy the Alpha for £5 (about $8). This price will go up as I put more work into the game, and future game updates will be free until it's finished.

## Exciting yet terrifying

This is both a wonderfully exciting and deeply terrifying moment for me. The game isn't near finished, yet I've released it on an unsuspecting set of game players. I've been reading the [Lean Startup](http://theleanstartup.com/) and I think it's ready for feedback. This is my [Minimum Viable Product](http://www.startuplessonslearned.com/2009/08/minimum-viable-product-guide.html).

The exciting bit: I finally get a sense of whether I'm going in the right direction and whether people might enjoy the fairly simple mechanics that are on offer in this version. Seeing Paypal emails letting me know that people have bought the game is very gratifying, even if I have to manually activate every purchase with a knocked-together ruby script.

The terrifying bit is: I finally get a sense of whether people actually might play this game. After all, if nobody likes it at all, there's not much point continuing.

## How I'm going to improve the game

I'm using [KISSMetrics](http://kissmetrics.com) to track both website activity and gameplay. So far it's working out well: I can see how people go through the site, make purchases, and then sign in and play the game.

I've deliberately not worked on the code behind the game for a couple of days, to let the metrics filter through and inform me about what's next.  So far the reaction has been generally positive - my metrics have had good framerates and people are playing for an average of 15 minutes and making about a dozen visits to planets each.

My first impressions based on early metrics and feedback: *I need to make the economy more realistic* as I think this will cause people to play the game for longer, and *I need to add a video of gameplay* to the front page to improve my sign up/purchase rates.

More on how I'm following the Lean Startup approach over the next few weeks and months.

## The long road

This is where I need self-discipline more than ever. My weakness is that when I feel like I've achieved something (like launching an alpha), my tendency is straight away to look for the next thing. I'm determined not to let that happen here. *I feel like I've delivered on perhaps 5% of the vision for the game.* I'm passionate about seeing the rest of the vision fulfilled.

The more of you who buy the game now and play it, the clearer the way forward becomes. I'm grateful for every purchase: thank you to the brave early adopters!

If you've purchased the game, what can I do to improve it? If you haven't purchased it yet, what can I put on the website to better inform your decision? [Let me know](mailto:chris@soltrader.net).

&lt;div class='notice'&gt;
  If you'd like to purchase Sol Trader you can do so at &lt;a href='http://soltrader.net'&gt;soltrader.net&lt;/a&gt;.
&lt;/div&gt;

</content></entry></feed>
